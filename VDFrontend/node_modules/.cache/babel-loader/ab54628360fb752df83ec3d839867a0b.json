{"remainingRequest":"/home/yansha/VDProject/VDFrontend/node_modules/babel-loader/lib/index.js!/home/yansha/VDProject/VDFrontend/src/components/Embedding/workers/loader.js","dependencies":[{"path":"/home/yansha/VDProject/VDFrontend/src/components/Embedding/workers/loader.js","mtime":1735829496885},{"path":"/home/yansha/VDProject/VDFrontend/babel.config.js","mtime":1730469387355},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/cache-loader/dist/cjs.js","mtime":1735202380381},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/babel-loader/lib/index.js","mtime":1735202380921}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucHVzaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5zZWxmLmpzIjsKaW1wb3J0IHsgc3BsaXRTdHJlYW1UcmFuc2Zvcm0sIHBhcnNlSlNPTlRyYW5zZm9ybSwgdGltZWl0IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnOwppbXBvcnQgZDMgZnJvbSAnLi4vLi4vLi4vdXRpbHMvZDMtaW1wb3J0JzsKaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vY29uZmlnL2NvbmZpZyc7CmltcG9ydCB7IExvYWRlciB9IGZyb20gJ3RocmVlJzsKaW1wb3J0IHsgTG9hZGVyV29ya2VyTWVzc2FnZSB9IGZyb20gJy4uLy4uLy4uLy4uL3R5cGVzL2VtYmVkZGluZy10eXBlcyc7Ci8vIGltcG9ydCB7IFByb21wdFBvaW50LCBVTUFQUG9pbnRTdHJlYW0sIExvYWRlcldvcmtlck1lc3NhZ2UgfSBmcm9tICcuLi8uLi8uLi90eXBlcy9lbWJlZGRpbmctdHlwZXMnOwoKY29uc3QgREVCVUcgPSBjb25maWcuZGVidWc7CmNvbnN0IFBPSU5UX1RIUkVTSE9MRCA9IDUwMDA7CmxldCBwZW5kaW5nRGF0YVBvaW50cyA9IFtdOwpsZXQgbG9hZGVkUG9pbnRDb3VudCA9IDA7CmxldCBzZW50UG9pbnRDb3VudCA9IDA7CmxldCBsYXN0RHJhd25Qb2ludHMgPSBudWxsOwoKLyoqCiAqIEhhbmRsZSBpbmNvbWluZyBtZXNzYWdlcyBmcm9tIHRoZSBtYWluIHRocmVhZAogKiBAcGFyYW0ge01lc3NhZ2VFdmVudH0gZSAtIFRoZSBtZXNzYWdlIGV2ZW50CiAqLwpzZWxmLm9ubWVzc2FnZSA9IGUgPT4gewogIC8vIFN0cmVhbSBwb2ludCBkYXRhCiAgc3dpdGNoIChlLmRhdGEuY29tbWFuZCkgewogICAgY2FzZSAnc3RhcnRMb2FkRGF0YSc6CiAgICAgIHsKICAgICAgICB0aW1laXQoJ1N0cmVhbSBkYXRhJywgdHJ1ZSk7CiAgICAgICAgY29uc3QgdXJsID0gZS5kYXRhLnBheWxvYWQudXJsOwogICAgICAgIHN0YXJ0TG9hZERhdGEodXJsKTsKICAgICAgICBicmVhazsKICAgICAgfQogICAgZGVmYXVsdDoKICAgICAgewogICAgICAgIGNvbnNvbGUuZXJyb3IoJ1dvcmtlcjogdW5rbm93biBtZXNzYWdlJywgZS5kYXRhLmNvbW1hbmQpOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgfQp9Owpjb25zdCBzdGFydExvYWREYXRhID0gdXJsID0+IHsKICBjb25zb2xlLmxvZygnc3RhcnRMb2FkRGF0YS0tLS0tLS0nKTsKICBmZXRjaCh1cmwpLnRoZW4oYXN5bmMgcmVzcG9uc2UgPT4gewogICAgdmFyIF9yZXNwb25zZSRib2R5OwogICAgaWYgKCFyZXNwb25zZS5vaykgewogICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gbG9hZCBkYXRhJywgcmVzcG9uc2UpOwogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCByZWFkZXIgPSAoX3Jlc3BvbnNlJGJvZHkgPSByZXNwb25zZS5ib2R5KSA9PT0gbnVsbCB8fCBfcmVzcG9uc2UkYm9keSA9PT0gdm9pZCAwIHx8IChfcmVzcG9uc2UkYm9keSA9IF9yZXNwb25zZSRib2R5LnBpcGVUaHJvdWdoKG5ldyBUZXh0RGVjb2RlclN0cmVhbSgpKSkgPT09IG51bGwgfHwgX3Jlc3BvbnNlJGJvZHkgPT09IHZvaWQgMCB8fCAoX3Jlc3BvbnNlJGJvZHkgPSBfcmVzcG9uc2UkYm9keS5waXBlVGhyb3VnaChzcGxpdFN0cmVhbVRyYW5zZm9ybSgnXG4nKSkpID09PSBudWxsIHx8IF9yZXNwb25zZSRib2R5ID09PSB2b2lkIDAgfHwgKF9yZXNwb25zZSRib2R5ID0gX3Jlc3BvbnNlJGJvZHkucGlwZVRocm91Z2gocGFyc2VKU09OVHJhbnNmb3JtKCkpKSA9PT0gbnVsbCB8fCBfcmVzcG9uc2UkYm9keSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3Jlc3BvbnNlJGJvZHkuZ2V0UmVhZGVyKCk7CiAgICB3aGlsZSAodHJ1ZSAmJiByZWFkZXIgIT09IHVuZGVmaW5lZCkgewogICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZWFkZXIucmVhZCgpOwogICAgICBjb25zdCBwb2ludCA9IHJlc3VsdC52YWx1ZTsgLy8g5aSE55CG55qE5pWw5o2u54K5CiAgICAgIGNvbnN0IGRvbmUgPSByZXN1bHQuZG9uZTsgLy8g5rWB5piv5ZCm57uT5p2fCgogICAgICBpZiAoZG9uZSkgewogICAgICAgIHRpbWVpdCgnU3RyZWFtIGRhdGEnLCBERUJVRyk7CiAgICAgICAgcG9pbnRTdHJlYW1GaW5pc2hlZCgpOwogICAgICAgIGJyZWFrOwogICAgICB9IGVsc2UgewogICAgICAgIHByb2Nlc3NQb2ludFN0cmVhbShwb2ludCk7CgogICAgICAgIC8vIC8vIFRPRE86IFJlbW92ZSBtZSBpbiBwcm9kCiAgICAgICAgLy8gaWYgKGxvYWRlZFBvaW50Q291bnQgPj0gMzA1MDAwKSB7CiAgICAgICAgLy8gICBwb2ludFN0cmVhbUZpbmlzaGVkKCk7CiAgICAgICAgLy8gICB0aW1laXQoJ1N0cmVhbSBkYXRhJywgREVCVUcpOwogICAgICAgIC8vICAgYnJlYWs7CiAgICAgICAgLy8gfQogICAgICB9CiAgICB9CiAgfSk7Cn07CgovKioKICogUHJvY2VzcyBvbmUgZGF0YSBwb2ludAogKiBAcGFyYW0gcG9pbnQgTG9hZGVkIGRhdGEgcG9pbnQKICovCmNvbnN0IHByb2Nlc3NQb2ludFN0cmVhbSA9IHBvaW50ID0+IHsKICBjb25zdCBwcm9tcHRQb2ludCA9IHsKICAgIHg6IHBvaW50WzBdLAogICAgeTogcG9pbnRbMV0sCiAgICBwcm9tcHQ6IHBvaW50WzJdLAogICAgaWQ6IGxvYWRlZFBvaW50Q291bnQKICB9OwogIGlmIChwb2ludC5sZW5ndGggPiAzKSB7CiAgICBwcm9tcHRQb2ludC50aW1lID0gcG9pbnRbM107CiAgfQogIGlmIChwb2ludC5sZW5ndGggPiA0KSB7CiAgICBwcm9tcHRQb2ludC5ncm91cElEID0gcG9pbnRbNF07CiAgfQogIHBlbmRpbmdEYXRhUG9pbnRzLnB1c2gocHJvbXB0UG9pbnQpOwogIGxvYWRlZFBvaW50Q291bnQgKz0gMTsKCiAgLy8gTm90aWZ5IHRoZSBtYWluIHRocmVhZCBpZiB3ZSBoYXZlIGxvYWRlZCBlbm91Z2ggZGF0YQogIGlmIChwZW5kaW5nRGF0YVBvaW50cy5sZW5ndGggPj0gUE9JTlRfVEhSRVNIT0xEKSB7CiAgICBjb25zdCByZXN1bHQgPSB7CiAgICAgIGNvbW1hbmQ6ICd0cmFuc2ZlckxvYWREYXRhJywKICAgICAgcGF5bG9hZDogewogICAgICAgIGlzRmlyc3RCYXRjaDogbGFzdERyYXduUG9pbnRzID09PSBudWxsLAogICAgICAgIGlzTGFzdEJhdGNoOiBmYWxzZSwKICAgICAgICBwb2ludHM6IHBlbmRpbmdEYXRhUG9pbnRzLAogICAgICAgIGxvYWRlZFBvaW50Q291bnQKICAgICAgfQogICAgfTsKICAgIHBvc3RNZXNzYWdlKHJlc3VsdCk7CiAgICBzZW50UG9pbnRDb3VudCArPSBwZW5kaW5nRGF0YVBvaW50cy5sZW5ndGg7CiAgICBsYXN0RHJhd25Qb2ludHMgPSBwZW5kaW5nRGF0YVBvaW50cy5zbGljZSgpOwogICAgcGVuZGluZ0RhdGFQb2ludHMgPSBbXTsKICB9Cn07CgovKioKICogQ29uc3RydWN0IHRyZWUgYW5kIG5vdGlmeSB0aGUgbWFpbiB0aHJlYWQgd2hlbiBmaW5pc2ggcmVhZGluZyBhbGwgZGF0YQogKi8KY29uc3QgcG9pbnRTdHJlYW1GaW5pc2hlZCA9ICgpID0+IHsKICAvLyBTZW5kIGFueSBsZWZ0b3ZlciBwb2ludHMKCiAgY29uc3QgcmVzdWx0ID0gewogICAgY29tbWFuZDogJ3RyYW5zZmVyTG9hZERhdGEnLAogICAgcGF5bG9hZDogewogICAgICBpc0ZpcnN0QmF0Y2g6IGxhc3REcmF3blBvaW50cyA9PT0gbnVsbCwKICAgICAgaXNMYXN0QmF0Y2g6IHRydWUsCiAgICAgIHBvaW50czogcGVuZGluZ0RhdGFQb2ludHMsCiAgICAgIGxvYWRlZFBvaW50Q291bnQKICAgIH0KICB9OwogIHBvc3RNZXNzYWdlKHJlc3VsdCk7CiAgc2VudFBvaW50Q291bnQgKz0gcGVuZGluZ0RhdGFQb2ludHMubGVuZ3RoOwogIGxhc3REcmF3blBvaW50cyA9IHBlbmRpbmdEYXRhUG9pbnRzLnNsaWNlKCk7CiAgcGVuZGluZ0RhdGFQb2ludHMgPSBbXTsKfTsKZXhwb3J0IGRlZmF1bHQgc2VsZjs="},{"version":3,"names":["splitStreamTransform","parseJSONTransform","timeit","d3","config","Loader","LoaderWorkerMessage","DEBUG","debug","POINT_THRESHOLD","pendingDataPoints","loadedPointCount","sentPointCount","lastDrawnPoints","self","onmessage","e","data","command","url","payload","startLoadData","console","error","log","fetch","then","response","_response$body","ok","reader","body","pipeThrough","TextDecoderStream","getReader","undefined","result","read","point","value","done","pointStreamFinished","processPointStream","promptPoint","x","y","prompt","id","length","time","groupID","push","isFirstBatch","isLastBatch","points","postMessage","slice"],"sources":["/home/yansha/VDProject/VDFrontend/src/components/Embedding/workers/loader.js"],"sourcesContent":["import {\n    splitStreamTransform,\n    parseJSONTransform,\n    timeit\n} from '../../../utils/utils';\n\nimport d3 from '../../../utils/d3-import';\nimport { config } from '../../../config/config';\nimport { Loader } from 'three';\nimport { LoaderWorkerMessage } from '../../../../types/embedding-types';\n// import { PromptPoint, UMAPPointStream, LoaderWorkerMessage } from '../../../types/embedding-types';\n\nconst DEBUG = config.debug;\nconst POINT_THRESHOLD = 5000;\n\nlet pendingDataPoints = [];\nlet loadedPointCount = 0;\nlet sentPointCount = 0;\nlet lastDrawnPoints = null;\n\n/**\n * Handle incoming messages from the main thread\n * @param {MessageEvent} e - The message event\n */\nself.onmessage = (e) => {\n    // Stream point data\n    switch (e.data.command) {\n        case 'startLoadData': {\n\n            timeit('Stream data', true);\n            const url = e.data.payload.url;\n            startLoadData(url);\n            break;\n        }\n\n        default: {\n            console.error('Worker: unknown message', e.data.command);\n            break;\n        }\n    }\n};\n\n\nconst startLoadData = (url) => {\n\n    console.log('startLoadData-------');\n    fetch(url).then(async (response) => {\n        if (!response.ok) {\n            console.error('Failed to load data', response);\n            return;\n        }\n\n        const reader = response.body\n            ?.pipeThrough(new TextDecoderStream())\n            ?.pipeThrough(splitStreamTransform('\\n'))\n            ?.pipeThrough(parseJSONTransform())\n            ?.getReader();\n\n        while (true && reader !== undefined) {\n            const result = await reader.read();\n            const point = result.value; // 处理的数据点\n            const done = result.done; // 流是否结束\n\n            if (done) {\n                timeit('Stream data', DEBUG);\n                pointStreamFinished();\n                break;\n            } else {\n                processPointStream(point);\n\n                // // TODO: Remove me in prod\n                // if (loadedPointCount >= 305000) {\n                //   pointStreamFinished();\n                //   timeit('Stream data', DEBUG);\n                //   break;\n                // }\n            }\n        }\n    });\n};\n\n/**\n * Process one data point\n * @param point Loaded data point\n */\nconst processPointStream = (point) => {\n    const promptPoint = {\n        x: point[0],\n        y: point[1],\n        prompt: point[2],\n        id: loadedPointCount\n    };\n\n    if (point.length > 3) {\n        promptPoint.time = point[3];\n    }\n\n    if (point.length > 4) {\n        promptPoint.groupID = point[4];\n    }\n\n    pendingDataPoints.push(promptPoint);\n    loadedPointCount += 1;\n\n    // Notify the main thread if we have loaded enough data\n    if (pendingDataPoints.length >= POINT_THRESHOLD) {\n        const result = {\n            command: 'transferLoadData',\n            payload: {\n                isFirstBatch: lastDrawnPoints === null,\n                isLastBatch: false,\n                points: pendingDataPoints,\n                loadedPointCount\n            }\n        };\n        postMessage(result);\n\n        sentPointCount += pendingDataPoints.length;\n        lastDrawnPoints = pendingDataPoints.slice();\n        pendingDataPoints = [];\n    }\n};\n\n/**\n * Construct tree and notify the main thread when finish reading all data\n */\nconst pointStreamFinished = () => {\n    // Send any leftover points\n\n    const result = {\n        command: 'transferLoadData',\n        payload: {\n            isFirstBatch: lastDrawnPoints === null,\n            isLastBatch: true,\n            points: pendingDataPoints,\n            loadedPointCount\n        }\n    };\n    postMessage(result);\n\n    sentPointCount += pendingDataPoints.length;\n    lastDrawnPoints = pendingDataPoints.slice();\n    pendingDataPoints = [];\n};\n\n\nexport default self;"],"mappings":"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","ignoreList":[]}]}