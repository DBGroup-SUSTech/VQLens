{"remainingRequest":"/home/yansha/VDProject/VDFrontend/node_modules/babel-loader/lib/index.js!/home/yansha/VDProject/VDFrontend/node_modules/babel-loader/lib/index.js??ref--17!/home/yansha/VDProject/VDFrontend/src/components/Embedding/EmbeddingPointWebGL.js","dependencies":[{"path":"/home/yansha/VDProject/VDFrontend/src/components/Embedding/EmbeddingPointWebGL.js","mtime":1744442733392},{"path":"/home/yansha/VDProject/VDFrontend/babel.config.js","mtime":1744442733384},{"path":"/home/yansha/VDProject/VDFrontend/babel.config.js","mtime":1744442733384},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/cache-loader/dist/cjs.js","mtime":1735202380381},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/babel-loader/lib/index.js","mtime":1735202380921},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/babel-loader/lib/index.js","mtime":1735202380921}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["d3","config","updatePopperTooltip","fragmentShader","vertexShader","Labeler","edgeFragmentShader","edgeVertexShader","pointMouseenterTimer","pointMouseleaveTimer","initWebGLMatrices","that","xDomainMid","xScale","domain","yDomainMid","yScale","xRangeMid","range","yRangeMid","xMultiplier","yMultiplier","dataScaleMatrix","dataScaleMatrix1D","flat","normalizeMatrix","svgFullSize","width","height","normalizeMatrix1D","webGLMatrices","initWebGLBuffers","gridData","Error","positions","textureCoords","_iterator","_createForOfIteratorHelper","promptPoints","_step","s","n","done","point","value","push","x","y","err","e","f","totalPointSize","frontPositionBuffer","pointRegl","buffer","length","type","usage","subdata","frontTextureCoordinateBuffer","frontBufferPointSize","drawScatterPlot","clear","color","depth","pointCount","loadedPointCount","a","b","curPointWidth","Math","log","layout","scatterDotRadius","min","max","alpha","zoomMatrix","getZoomMatrix","curZoomTransform","textureArray","defaultPointColorInt","secondPointColorInt","texture","data","format","userAlpha","opacity","undefined","drawPoints","enable","stencil","frag","vert","attributes","position","stride","offset","textureCoord","uniforms","pointWidth","blend","func","srcRGB","srcAlpha","dstRGB","dstAlpha","count","primitive","drawContour","console","error","contourGroup","svg","select","gridData1D","grid","_iterator2","_step2","row","_iterator3","_step3","item","levels","contourLevels","thresholds","minValue","apply","maxValue","step","i","contours","size","contourXScale","scaleLinear","xRange","contourYScale","yRange","map","coordinates","colorScaleInterpolator","interpolateLab","colorScale","scaleSequential","extent","d","selectAll","slice","join","attr","geoPath","drawGroupContour","group","_that$groupNames","groupGrids","concat","_iterator4","_step4","_iterator5","_step5","groupNames","indexOf","zoomTransform","k","zoomMatrix1D","updateWebGLBuffers","newPoints","_iterator6","_step6","timeTextureMap","groupID","has","time","u","get","highlightPoint","args","offx","animated","anyTrue","showPoints","hoverPoint","hideHighlights","topSvg","oldHighlightPoint","clearTimeout","setTimeout","tooltipTop","classList","add","remove","$store","state","datasetName","image","imageGroup","prompt","imageURLPrefix","highlightRadius","exp","highlightStroke","curHighlightPoint","empty","append","style","transition","duration","on","node","getCoordinates","nodesIdList","_iterator7","_step7","resultIndex","curPoint","drawSearchScatterPlot","dataNodeLink","links","searchPointRegl","connectData","nodeList","nodes","startNode","searchList","sList","groundTruthList","gList","diffSList","filter","includes","diffGList","interList","tracePoints","_iterator8","_step8","id","edgePositions","_iterator9","_step9","link","startPoint","source","endPoint","target","curLineWidth","lineCount","lineAlpha","timePointColorInt","lineUvs","drawLines","LineWidth","allpointPositions","allpointUvs","_i","_tracePoints","allpointCount","pointAlpha","drawAllPoints","interPositions","interPointUvs","_iterator10","_step10","_point","interPointCount","drawInterPoints","diffGPositions","diffGPointUvs","_iterator11","_step11","_point2","diffGPointCount","drawDiffGPoints","diffSPositions","diffSPointUvs","_iterator12","_step12","_point3","diffSPointCount","drawDiffSPoints","startNodePositions","startNodePointUvs","_iterator13","_step13","_point4","startNodePointCount","drawstartNodePoints","drawSearchScatterPlot2","searchPointResults2","uvs","_iterator14","_step14","items","reduce","allTrue"],"sources":["/home/yansha/VDProject/VDFrontend/src/components/Embedding/EmbeddingPointWebGL.js"],"sourcesContent":["import d3 from '../../utils/d3-import';\nimport { config } from '../../config/config';\nimport { updatePopperTooltip } from './EmbeddingLabel';\nimport fragmentShader from './shaders/point.frag?raw';\nimport vertexShader from './shaders/point.vert?raw';\nimport * as Labeler from './EmbeddingLabel';\n\nimport edgeFragmentShader from './shaders/edge.frag?raw';\nimport edgeVertexShader from './shaders/edge.vert?raw';\n\nlet pointMouseenterTimer = null;\nlet pointMouseleaveTimer = null;\n\nexport function initWebGLMatrices(that) {\n    // Convert the x and y scales to a matrix (applying scale is cheaper in GPU)\n\n    const xDomainMid = (that.xScale.domain()[0] + that.xScale.domain()[1]) / 2;\n    const yDomainMid = (that.yScale.domain()[0] + that.yScale.domain()[1]) / 2;\n\n    const xRangeMid = (that.xScale.range()[0] + that.xScale.range()[1]) / 2;\n    const yRangeMid = (that.yScale.range()[0] + that.yScale.range()[1]) / 2;\n\n    const xMultiplier =\n        (that.xScale.range()[1] - that.xScale.range()[0]) /\n        (that.xScale.domain()[1] - that.xScale.domain()[0]);\n\n    const yMultiplier =\n        (that.yScale.range()[1] - that.yScale.range()[0]) /\n        (that.yScale.domain()[1] - that.yScale.domain()[0]);\n\n    // WebGL is column-major!\n    // Transform from data space to stage space (same as applying that.xScale(),\n    // and that.yScale())\n\n    const dataScaleMatrix = [\n        [xMultiplier, 0, -xMultiplier * xDomainMid + xRangeMid],\n        [0, yMultiplier, -yMultiplier * yDomainMid + yRangeMid],\n        [0, 0, 1]\n    ];\n\n    // 适当调整平移量，使得绘图区域的中心与视图的中心对齐\n    // dataScaleMatrix[0][2] += (that.svgFullSize.width / 2 - xRangeMid);\n    // dataScaleMatrix[1][2] += (that.svgFullSize.height / 2 - yRangeMid);\n    const dataScaleMatrix1D = dataScaleMatrix.flat();\n\n    // Transforming the stage space to the normalized coordinate\n    // Note we need to flip the y coordinate\n    const normalizeMatrix = [\n        [2 / that.svgFullSize.width, 0, -1],\n        [0, -2 / that.svgFullSize.height, 1],\n        [0, 0, 1]\n    ];\n\n    const normalizeMatrix1D = normalizeMatrix.flat();\n\n\n    // 将所有矩阵存储在 webGLMatrices 对象中\n    that.webGLMatrices = {\n        dataScaleMatrix: dataScaleMatrix1D,\n        normalizeMatrix: normalizeMatrix1D,\n    };\n\n}\n\nexport function initWebGLBuffers(that) {\n    if (that.gridData === null) {\n        throw new Error('GridData is null.');\n    }\n\n    // 获取每个点的位置和颜色\n    const positions = [];\n    const textureCoords = [];\n\n    for (const point of that.promptPoints) {\n        positions.push([point.x, point.y]);\n        textureCoords.push([0, 0]);\n    }\n\n    let totalPointSize = that.gridData.totalPointSize;\n\n    that.frontPositionBuffer = that.pointRegl.buffer({\n        length: totalPointSize * 4 * 2,\n        type: 'float',\n        usage: 'dynamic'\n    });\n    that.frontPositionBuffer.subdata(positions, 0);\n\n    that.frontTextureCoordinateBuffer = that.pointRegl.buffer({\n        length: totalPointSize * 4 * 2,\n        type: 'float',\n        usage: 'dynamic'\n    });\n    that.frontTextureCoordinateBuffer.subdata(textureCoords, 0);\n    that.frontBufferPointSize = that.promptPoints.length;\n}\n\n/**\n * Draw a scatter plot for the UMAP.\n */\nexport function drawScatterPlot(that) {\n    if (!that.webGLMatrices) {\n        throw Error('webGLMatrices not initialized');\n    }\n\n    that.pointRegl.clear({\n        color: [0, 0, 0, 0],\n        depth: 1\n    });\n\n    // Adjust point width based on the number of points to draw\n    let pointCount = that.loadedPointCount;\n\n\n    // Logarithmic regression by fitting the following three points\n    // https://keisan.casio.com/exec/system/14059930226691\n    // [(6e4, 2), (3e5, 1), [1.8e6, 0.5]]\n    const a = 6.71682071;\n    const b = -0.437974871;\n    that.curPointWidth =\n        a +\n        b *\n        Math.log(\n            config.layout.scatterDotRadius *\n            (that.svgFullSize.height / 10000000) *\n            pointCount\n        );\n    that.curPointWidth = Math.min(5, that.curPointWidth);\n    that.curPointWidth = Math.max(0.4, that.curPointWidth);\n    const alpha = 1 / (Math.log(pointCount) / Math.log(500));\n\n    // Get the current zoom\n    const zoomMatrix = getZoomMatrix(that.curZoomTransform);\n\n    // Create a texture array (default 3x1)\n    let textureArray = [\n        config.layout.defaultPointColorInt[0],\n        config.layout.defaultPointColorInt[1],\n        config.layout.defaultPointColorInt[2],\n        255,\n        config.layout.secondPointColorInt[0],\n        config.layout.secondPointColorInt[1],\n        config.layout.secondPointColorInt[2],\n        255,\n        255,\n        255,\n        255,\n        0\n    ];\n    // [default color, second color, transparent, empty]\n    const texture = that.pointRegl.texture({\n        width: 3,\n        height: 1,\n        data: textureArray,\n        format: 'rgba'\n    });\n\n    // If user specifies an alpha level, we use it to override auto-alpha\n    let userAlpha = -1.0;\n    if (that.gridData && that.gridData.opacity !== undefined) {\n        userAlpha = Math.max(0, Math.min(that.gridData.opacity, 1));\n    }\n\n    const drawPoints = that.pointRegl({\n        depth: { enable: false },\n        stencil: { enable: false },\n        frag: fragmentShader,\n        vert: vertexShader,\n\n        attributes: {\n            position: {\n                buffer: that.frontPositionBuffer,\n                stride: 2 * 4,\n                offset: 0\n            },\n            textureCoord: {\n                buffer: that.frontTextureCoordinateBuffer,\n                stride: 2 * 4,\n                offset: 0\n            }\n        },\n        uniforms: {\n            // Placeholder for function parameters\n            pointWidth: 1.2,\n            dataScaleMatrix: that.webGLMatrices.dataScaleMatrix,\n            zoomMatrix: zoomMatrix,\n            normalizeMatrix: that.webGLMatrices.normalizeMatrix,\n            alpha: alpha,\n            userAlpha: userAlpha,\n            texture: texture\n        },\n        blend: {\n            enable: true,\n            func: {\n                srcRGB: 'one',\n                srcAlpha: 'one',\n                dstRGB: 'one minus src alpha',\n                dstAlpha: 'one minus src alpha'\n            }\n        },\n\n        count: that.frontBufferPointSize,\n        primitive: 'points'\n    });\n\n    drawPoints();\n}\n\nexport function drawContour(that) {\n\n    if (that.gridData == null) {\n        console.error('Grid data not initialized');\n        return null;\n    }\n\n    const contourGroup = that.svg.select(`.contour-group`);\n\n    const gridData1D = [];\n    const grid = that.gridData.grid;\n    for (const row of grid) {\n        for (const item of row) {\n            gridData1D.push(item);\n        }\n    }\n\n    // Linear interpolate the levels to determine the thresholds\n    const levels = config.layout.contourLevels;\n    const thresholds = [];\n    const minValue = Math.min(...gridData1D);\n    const maxValue = Math.max(...gridData1D);\n    const step = (maxValue - minValue) / levels;\n    for (let i = 0; i < levels; i++) {\n        thresholds.push(minValue + step * i);\n    }\n\n    let contours = d3\n        .contours()\n        .thresholds(thresholds)\n        .size([grid.length, grid[0].length])(gridData1D);\n\n    // Convert the scale of the generated paths\n    const contourXScale = d3\n        .scaleLinear()\n        .domain([0, grid.length])\n        .range(that.gridData.xRange);\n\n    const contourYScale = d3\n        .scaleLinear()\n        .domain([0, grid[0].length])\n        .range(that.gridData.yRange);\n\n    contours = contours.map(item => {\n        item.coordinates = item.coordinates.map(coordinates => {\n            return coordinates.map(positions => {\n                return positions.map(point => {\n                    return [\n                        that.xScale(contourXScale(point[0])),\n                        // that.xScale(contourXScale(point[0])) + (that.svgFullSize.width - that.svgFullSize.height) / 2,\n                        that.yScale(contourYScale(point[1]))\n                    ];\n                });\n            });\n        });\n        return item;\n    });\n\n    // Create a new color interpolator\n    // (starting from white here)\n    const colorScaleInterpolator = d3.interpolateLab(\n        '#ffffff',\n        config.layout['groupColors'][0]\n    );\n    const colorScale = d3.scaleSequential(\n        d3.extent(thresholds),\n        d => colorScaleInterpolator(d / 1)\n    );\n\n    // Draw the contours\n    contourGroup\n        .selectAll('path')\n        .data(contours.slice(1))\n        .join('path')\n        .attr('fill', d => colorScale(d.value))\n        .attr('d', d3.geoPath());\n\n    return contours;\n};\n\n\nexport function drawGroupContour(that, group) {\n\n\n    if (that.gridData == null || that.gridData.groupGrids == undefined) {\n        console.error('Grid data not initialized', that.gridData);\n        return null;\n    }\n\n    const contourGroup = that.svg.select(`.contour-group-${group}`);\n\n    const gridData1D = [];\n    const grid = that.gridData.groupGrids[group];\n    for (const row of grid) {\n        for (const item of row) {\n            gridData1D.push(item);\n        }\n    }\n\n    // Linear interpolate the levels to determine the thresholds\n    const levels = config.layout.contourLevels;\n    const thresholds = [];\n    const minValue = Math.min(...gridData1D);\n    const maxValue = Math.max(...gridData1D);\n    const step = (maxValue - minValue) / levels;\n    for (let i = 0; i < levels; i++) {\n        thresholds.push(minValue + step * i);\n    }\n\n    let contours = d3\n        .contours()\n        .thresholds(thresholds)\n        .size([grid.length, grid[0].length])(gridData1D);\n\n    // Convert the scale of the generated paths\n    const contourXScale = d3\n        .scaleLinear()\n        .domain([0, grid.length])\n        .range(that.gridData.xRange);\n\n    const contourYScale = d3\n        .scaleLinear()\n        .domain([0, grid[0].length])\n        .range(that.gridData.yRange);\n\n    contours = contours.map(item => {\n        item.coordinates = item.coordinates.map(coordinates => {\n            return coordinates.map(positions => {\n                return positions.map(point => {\n                    return [\n                        that.xScale(contourXScale(point[0])),\n                        // that.xScale(contourXScale(point[0])) + (that.svgFullSize.width - that.svgFullSize.height) / 2,\n                        that.yScale(contourYScale(point[1]))\n                    ];\n                });\n            });\n        });\n        return item;\n    });\n\n    // Create a new color interpolator\n    // (starting from white here)\n    const colorScaleInterpolator = d3.interpolateLab(\n        '#ffffff',\n        config.layout['groupColors'][that.groupNames?.indexOf(group) || 0]\n    );\n    const colorScale = d3.scaleSequential(\n        d3.extent(thresholds),\n        d => colorScaleInterpolator(d / 1)\n    );\n\n    // Draw the contours\n    contourGroup\n        .selectAll('path')\n        .data(contours.slice(1))\n        .join('path')\n        .attr('fill', d => colorScale(d.value))\n        .attr('d', d3.geoPath());\n\n    return contours;\n};\n\n/**\n * Convert the current zoom transform into a matrix\n * @param zoomTransform D3 zoom transform\n * @returns 1D matrix\n */\nconst getZoomMatrix = (zoomTransform) => {\n    // Transforming the stage space based on the current zoom transform\n    const zoomMatrix = [\n        [zoomTransform.k, 0, zoomTransform.x],\n        [0, zoomTransform.k, zoomTransform.y],\n        [0, 0, 1]\n    ];\n    const zoomMatrix1D = zoomMatrix.flat();\n    return zoomMatrix1D;\n};\n\nexport function updateWebGLBuffers(that, newPoints) {\n    // Get the position and color of each new point\n    const positions = [];\n    const textureCoords = [];\n\n    for (const point of newPoints) {\n        positions.push([point.x, point.y]);\n\n        if (that.timeTextureMap === null) {\n            if (that.groupNames && point.groupID !== undefined) {\n                textureCoords.push([point.groupID / that.groupNames.length, 0]);\n            } else {\n                textureCoords.push([0, 0]);\n            }\n        } else {\n            if (that.timeTextureMap.has(point.time)) {\n                const u =\n                    that.timeTextureMap.get(point.time) /\n                    (that.timeTextureMap.size - 1);\n                textureCoords.push([u, 0.5]);\n            } else {\n                // The last entry in the texture array is reserved for 'bad' points\n                // (e.g., wrong year)\n                textureCoords.push([1, 0]);\n            }\n        }\n    }\n\n    // Update the buffer using byte offsets\n    that.frontPositionBuffer.subdata(\n        positions,\n        that.frontBufferPointSize * 2 * 4\n    );\n    that.frontTextureCoordinateBuffer.subdata(\n        textureCoords,\n        that.frontBufferPointSize * 2 * 4\n    );\n    that.frontBufferPointSize += newPoints.length;\n}\n\nexport function highlightPoint(that, args) {\n    const offx = 0;\n    const { point, animated } = args;\n    if (!anyTrue(that.showPoints)) return;\n    if (point === that.hoverPoint) return;\n    if (that.hideHighlights) return;\n\n    // Draw the point on the top svg\n    const group = that.topSvg.select('g.top-content g.highlights');\n    const oldHighlightPoint = group.select('circle.highlight-point');\n\n    // 整体向右进行偏移 \n\n    // Hovering empty space\n    if (point === undefined) {\n        if (pointMouseleaveTimer !== null) {\n            clearTimeout(pointMouseleaveTimer);\n            pointMouseleaveTimer = null;\n        }\n\n        if (pointMouseenterTimer !== null) {\n            clearTimeout(pointMouseenterTimer);\n            pointMouseenterTimer = null;\n        }\n\n        // Clear the highlight and tooltip in a short delay\n        pointMouseleaveTimer = setTimeout(() => {\n            that.hoverPoint = null;\n            that.tooltipTop.classList.add('hidden');\n            oldHighlightPoint.remove();\n            pointMouseleaveTimer = null;\n        }, 50);\n\n        return;\n    }\n\n    // Hovering over a point\n    that.hoverPoint = point;\n    if (that.$store.state.datasetName == \"ImageNet2012ValSet\") {\n        that.hoverPoint.groupID = 0;\n    }\n\n    // that.hoverPoint.groupID = 0;\n    // Change the point's text to an image tag if this is an image point\n\n\n    if (that.gridData && that.gridData.image !== undefined) {\n        if (that.gridData.image.imageGroup === that.hoverPoint.groupID) {\n            console.log(\"that.hoverPoint\", that.hoverPoint, that.hoverPoint.prompt)\n\n            that.hoverPoint.prompt = `<img class=\"tooltip-image\" src=\"${that.gridData.image.imageURLPrefix + that.hoverPoint.prompt}\">`;\n        }\n    }\n\n\n\n    if (pointMouseleaveTimer !== null) {\n        clearTimeout(pointMouseleaveTimer);\n        pointMouseleaveTimer = null;\n    }\n\n    const highlightRadius = Math.max(\n        10 / that.curZoomTransform.k,\n        (that.curPointWidth * Math.exp(Math.log(that.curZoomTransform.k) * 0.55)) / that.curZoomTransform.k\n    );\n\n    const highlightStroke = 1.2 / that.curZoomTransform.k;\n    let curHighlightPoint; // 用于存储当前高亮点的选择器\n\n    // 如果没有高亮点\n    if (oldHighlightPoint.empty()) {\n        curHighlightPoint = group\n            .append('circle')\n            .attr('class', 'highlight-point')\n            .attr('cx', that.xScale(point.x) + offx)\n            .attr('cy', that.yScale(point.y))\n            .attr('r', highlightRadius)\n            .style('stroke-width', highlightStroke);\n    } else {\n        // 如果已有高亮点\n        curHighlightPoint = oldHighlightPoint;\n\n        if (animated) {\n            curHighlightPoint\n                .transition()\n                .duration(150)\n                .attr('cx', that.xScale(point.x) + offx)\n                .attr('cy', that.yScale(point.y))\n                .attr('r', highlightRadius)\n                .style('stroke-width', highlightStroke)\n                .on('end', () => {\n                    updatePopperTooltip(\n                        that.tooltipTop,\n                        curHighlightPoint.node(),\n                        point.prompt,\n                        'top'\n                    );\n                });\n        } else {\n            curHighlightPoint\n                .attr('cx', that.xScale(point.x) + offx)\n                .attr('cy', that.yScale(point.y))\n                .attr('r', highlightRadius)\n                .style('stroke-width', highlightStroke);\n\n            updatePopperTooltip(\n                that.tooltipTop,\n                curHighlightPoint.node(),\n                point.prompt,\n                'top'\n            );\n        }\n    }\n\n    if (pointMouseenterTimer !== null) {\n        clearTimeout(pointMouseenterTimer);\n    }\n\n    pointMouseenterTimer = setTimeout(() => {\n        that.tooltipTop.classList.remove('hidden');\n        pointMouseenterTimer = null;\n    }, 300);\n}\n\nfunction getCoordinates(nodesIdList, promptPoints) {\n    const coordinates = [];\n    for (const resultIndex of nodesIdList) {\n        const curPoint = promptPoints[resultIndex];\n        coordinates.push(curPoint);\n    }\n    return coordinates;\n}\n\nexport function drawSearchScatterPlot(that) {\n    if (!that.webGLMatrices) {\n        throw new Error('webGLMatrices not initialized');\n    }\n\n    if (that.$store.state.dataNodeLink.links == null) {\n        return null;\n    }\n\n    that.searchPointRegl.clear({\n        color: [0, 0, 0, 0],\n        depth: 1\n    });\n\n    // Here are some code for processing data\n    let connectData = that.$store.state.dataNodeLink.links;\n    let nodeList = that.$store.state.dataNodeLink.nodes;\n    let startNode = that.$store.state.dataNodeLink.startNode;\n    let searchList = that.$store.state.dataNodeLink.sList;\n    let groundTruthList = that.$store.state.dataNodeLink.gList;\n\n    let diffSList = searchList.filter(x => !groundTruthList.includes(x));\n    let diffGList = groundTruthList.filter(x => !searchList.includes(x));\n    let interList = searchList.filter(x => groundTruthList.includes(x));\n\n    let tracePoints = [];\n\n    for (const resultIndex of nodeList) {\n        const curPoint = that.promptPoints[resultIndex.id];\n        tracePoints.push(curPoint);\n    }\n\n    let edgePositions = [];\n\n    for (const link of connectData) {\n        const startPoint = that.promptPoints[link.source];\n        const endPoint = that.promptPoints[link.target];\n\n        // 添加边的起点和终点\n        if (startPoint && endPoint) {\n            edgePositions.push(startPoint.x, startPoint.y, endPoint.x, endPoint.y);\n        }\n    }\n\n\n    diffGList = getCoordinates(diffGList, that.promptPoints);\n    diffSList = getCoordinates(diffSList, that.promptPoints);\n    interList = getCoordinates(interList, that.promptPoints);\n    startNode = getCoordinates([startNode], that.promptPoints);\n\n\n    const curLineWidth = 2.0; // 设置线条宽度\n    const lineCount = edgePositions.length / 4; // 每两个顶点表示一条线\n    // curPointWidth = Math.min(5, curPointWidth);\n    const lineAlpha = 1 / (Math.log(lineCount) / Math.log(500));\n\n    // // Get the current zoom\n    const zoomMatrix = getZoomMatrix(that.curZoomTransform);\n\n    // Create a texture array (default 3x1)\n    const textureArray = [\n        // timePointColorInt (RGBA)\n        config.layout.timePointColorInt[0], // R\n        config.layout.timePointColorInt[1], // G\n        config.layout.timePointColorInt[2], // B\n        255, // A\n\n        // Add yellow color (RGBA)\n        255, // R\n        255, // G\n        0,   // B\n        255,  // A\n\n        // Add blue color (RGBA)\n        0,   // R\n        0,   // G\n        255, // B\n        255, // A\n\n        // Add green color (RGBA)\n        0,   // R\n        255, // G\n        0,   // B\n        255, // A\n\n\n\n        // secondPointColorInt (RGBA)\n        config.layout.secondPointColorInt[0], // R\n        config.layout.secondPointColorInt[1], // G\n        config.layout.secondPointColorInt[2], // B\n        255, // A\n    ];\n\n    // Create texture with width 5 and height 1 (now 5 colors)\n    const texture = that.searchPointRegl.texture({\n        width: 5,\n        height: 1,\n        data: textureArray,\n        format: 'rgba'\n    });\n\n\n    const lineUvs = [];\n    for (let i = 0; i < edgePositions / 2; i++) {\n        lineUvs.push([0, 0]);\n    }\n\n    const drawLines = that.searchPointRegl({\n        depth: { enable: false },\n        stencil: { enable: false },\n        frag: edgeFragmentShader,\n        vert: edgeVertexShader,\n        attributes: {\n            position: edgePositions,\n            textureCoord: lineUvs\n        },\n\n        uniforms: {\n            dataScaleMatrix: that.webGLMatrices.dataScaleMatrix,\n            zoomMatrix: zoomMatrix,\n            normalizeMatrix: that.webGLMatrices.normalizeMatrix,\n            LineWidth: curLineWidth,\n            alpha: lineAlpha,\n            userAlpha: -1,\n            texture: texture\n\n        },\n\n        blend: {\n            enable: true,\n            func: {\n                srcRGB: 'one',\n                srcAlpha: 'one',\n                dstRGB: 'one minus src alpha',\n                dstAlpha: 'one minus src alpha'\n            }\n        },\n\n        count: lineCount * 2,\n        primitive: 'lines',\n\n    });\n\n    drawLines();\n\n    // Collect position and color for each point\n    const allpointPositions = [];\n    const allpointUvs = [];\n\n    for (const point of tracePoints) {\n        allpointPositions.push([point.x, point.y]);\n        allpointUvs.push([0.1, 0.1]);\n    }\n    // Adjust point width based on the number of points to draw\n    const allpointCount = allpointPositions.length;\n\n    // Logarithmic regression by fitting the following three points\n    // https://keisan.casio.com/exec/system/14059930226691\n    // [(6e4, 2), (3e5, 1), [1.8e6, 0.5]]\n    const a = 6.71682071;\n    const b = -0.437974871;\n    let curPointWidth =\n        a +\n        b *\n        Math.log(\n            config.layout.scatterDotRadius *\n            (that.svgFullSize.height / 760) *\n            allpointCount\n        );\n\n    const pointAlpha = 1 / (Math.log(allpointCount) / Math.log(500));\n\n    const drawAllPoints = that.searchPointRegl({\n        depth: { enable: false }, // 禁用深度测试\n        stencil: { enable: false }, // 禁用模板缓冲区\n        frag: fragmentShader, // 片段着色器\n        vert: vertexShader, // 顶点着色器\n\n        attributes: {\n            position: allpointPositions, // 动态传入的 positions\n            textureCoord: allpointUvs // 动态传入的 uvs\n        },\n\n        uniforms: {\n            pointWidth: curPointWidth,\n            dataScaleMatrix: that.webGLMatrices.dataScaleMatrix,\n            zoomMatrix: zoomMatrix, // 动态传入的 zoomMatrix\n            normalizeMatrix: that.webGLMatrices.normalizeMatrix,\n            alpha: pointAlpha, // 透明度\n            userAlpha: -1, // 用户自定义透明度\n            texture: texture // 传递纹理数据\n        },\n\n        blend: {\n            enable: true, // 启用混合\n            func: {\n                srcRGB: 'one', // RGB源混合因子\n                srcAlpha: 'one', // Alpha源混合因子\n                dstRGB: 'one minus src alpha', // RGB目标混合因子\n                dstAlpha: 'one minus src alpha' // Alpha目标混合因子\n            }\n        },\n\n        count: allpointCount, // 动态传入的点数\n        primitive: 'points' // 绘制点\n    });\n\n    drawAllPoints();\n\n\n    // Collect position and color for each point\n    const interPositions = [];\n    const interPointUvs = [];\n\n    for (const point of interList) {\n        interPositions.push([point.x, point.y]);\n        interPointUvs.push([1.0, 1.0]);\n    }\n\n    // Adjust point width based on the number of points to draw\n    const interPointCount = interPositions.length;\n    const drawInterPoints = that.searchPointRegl({\n        depth: { enable: false }, // 禁用深度测试\n        stencil: { enable: false }, // 禁用模板缓冲区\n        frag: fragmentShader, // 片段着色器\n        vert: vertexShader, // 顶点着色器\n\n        attributes: {\n            position: interPositions, // 动态传入的 positions\n            textureCoord: interPointUvs // 动态传入的 uvs\n        },\n\n        uniforms: {\n            pointWidth: curPointWidth,\n            dataScaleMatrix: that.webGLMatrices.dataScaleMatrix,\n            zoomMatrix: zoomMatrix, // 动态传入的 zoomMatrix\n            normalizeMatrix: that.webGLMatrices.normalizeMatrix,\n            alpha: pointAlpha, // 透明度\n            userAlpha: -1, // 用户自定义透明度\n            texture: texture // 传递纹理数据\n        },\n\n        blend: {\n            enable: true, // 启用混合\n            func: {\n                srcRGB: 'one', // RGB源混合因子\n                srcAlpha: 'one', // Alpha源混合因子\n                dstRGB: 'one minus src alpha', // RGB目标混合因子\n                dstAlpha: 'one minus src alpha' // Alpha目标混合因子\n            }\n        },\n\n        count: interPointCount, // 动态传入的点数\n        primitive: 'points' // 绘制点\n    });\n    if (interList.length > 0) {\n        drawInterPoints();\n    }\n\n\n    // Collect position and color for each point\n    const diffGPositions = [];\n    const diffGPointUvs = [];\n\n    for (const point of diffGList) {\n        diffGPositions.push([point.x, point.y]);\n        diffGPointUvs.push([0.3, 0.3]);\n    }\n\n    // Adjust point width based on the number of points to draw\n    const diffGPointCount = diffGPositions.length;\n\n    const drawDiffGPoints = that.searchPointRegl({\n        depth: { enable: false }, // 禁用深度测试\n        stencil: { enable: false }, // 禁用模板缓冲区\n        frag: fragmentShader, // 片段着色器\n        vert: vertexShader, // 顶点着色器\n\n        attributes: {\n            position: diffGPositions, // 动态传入的 positions\n            textureCoord: diffGPointUvs // 动态传入的 uvs\n        },\n\n        uniforms: {\n            pointWidth: curPointWidth,\n            dataScaleMatrix: that.webGLMatrices.dataScaleMatrix,\n            zoomMatrix: zoomMatrix, // 动态传入的 zoomMatrix\n            normalizeMatrix: that.webGLMatrices.normalizeMatrix,\n            alpha: pointAlpha, // 透明度\n            userAlpha: -1, // 用户自定义透明度\n            texture: texture // 传递纹理数据\n        },\n\n        blend: {\n            enable: true, // 启用混合\n            func: {\n                srcRGB: 'one', // RGB源混合因子\n                srcAlpha: 'one', // Alpha源混合因子\n                dstRGB: 'one minus src alpha', // RGB目标混合因子\n                dstAlpha: 'one minus src alpha' // Alpha目标混合因子\n            }\n        },\n\n        count: diffGPointCount, // 动态传入的点数\n        primitive: 'points' // 绘制点\n    });\n    if (diffGList.length > 0) {\n        drawDiffGPoints();\n    }\n\n\n    // Collect position and color for each point\n    const diffSPositions = [];\n    const diffSPointUvs = [];\n\n    for (const point of diffSList) {\n        diffSPositions.push([point.x, point.y]);\n        diffSPointUvs.push([0.8, 0.8]);\n    }\n\n    // Adjust point width based on the number of points to draw\n    const diffSPointCount = diffSPositions.length;\n\n\n    const drawDiffSPoints = that.searchPointRegl({\n        depth: { enable: false }, // 禁用深度测试\n        stencil: { enable: false }, // 禁用模板缓冲区\n        frag: fragmentShader, // 片段着色器\n        vert: vertexShader, // 顶点着色器\n\n        attributes: {\n            position: diffSPositions, // 动态传入的 positions\n            textureCoord: diffSPointUvs // 动态传入的 uvs\n        },\n\n        uniforms: {\n            pointWidth: curPointWidth,\n            dataScaleMatrix: that.webGLMatrices.dataScaleMatrix,\n            zoomMatrix: zoomMatrix, // 动态传入的 zoomMatrix\n            normalizeMatrix: that.webGLMatrices.normalizeMatrix,\n            alpha: pointAlpha, // 透明度\n            userAlpha: -1, // 用户自定义透明度\n            texture: texture // 传递纹理数据\n        },\n\n        blend: {\n            enable: true, // 启用混合\n            func: {\n                srcRGB: 'one', // RGB源混合因子\n                srcAlpha: 'one', // Alpha源混合因子\n                dstRGB: 'one minus src alpha', // RGB目标混合因子\n                dstAlpha: 'one minus src alpha' // Alpha目标混合因子\n            }\n        },\n\n        count: diffSPointCount, // 动态传入的点数\n        primitive: 'points' // 绘制点\n    });\n    if (diffSList.length > 0) {\n        drawDiffSPoints();\n    }\n\n    // Collect position and color for each point\n    const startNodePositions = [];\n    const startNodePointUvs = [];\n\n    for (const point of startNode) {\n        startNodePositions.push([point.x, point.y]);\n        startNodePointUvs.push([0.3, 0.3]);\n    }\n\n    // Adjust point width based on the number of points to draw\n    const startNodePointCount = startNodePositions.length;\n\n\n    const drawstartNodePoints = that.searchPointRegl({\n        depth: { enable: false }, // 禁用深度测试\n        stencil: { enable: false }, // 禁用模板缓冲区\n        frag: fragmentShader, // 片段着色器\n        vert: vertexShader, // 顶点着色器\n\n        attributes: {\n            position: startNodePositions, // 动态传入的 positions\n            textureCoord: startNodePointUvs // 动态传入的 uvs\n        },\n\n        uniforms: {\n            pointWidth: curPointWidth,\n            dataScaleMatrix: that.webGLMatrices.dataScaleMatrix,\n            zoomMatrix: zoomMatrix, // 动态传入的 zoomMatrix\n            normalizeMatrix: that.webGLMatrices.normalizeMatrix,\n            alpha: pointAlpha, // 透明度\n            userAlpha: -1, // 用户自定义透明度\n            texture: texture // 传递纹理数据\n        },\n\n        blend: {\n            enable: true, // 启用混合\n            func: {\n                srcRGB: 'one', // RGB源混合因子\n                srcAlpha: 'one', // Alpha源混合因子\n                dstRGB: 'one minus src alpha', // RGB目标混合因子\n                dstAlpha: 'one minus src alpha' // Alpha目标混合因子\n            }\n        },\n\n        count: startNodePointCount, // 动态传入的点数\n        primitive: 'points' // 绘制点\n    });\n    if (startNode.length > 0) {\n        drawstartNodePoints();\n    }\n\n\n}\n\nexport function drawSearchScatterPlot2(that) {\n    if (!that.webGLMatrices) {\n        throw Error('webGLMatrices not initialized');\n    }\n\n    // Clear the WebGL context\n    that.searchPointRegl.clear({\n        color: [0, 0, 0, 0],\n        depth: 1\n    });\n\n    // Adjust point width based on the number of points to draw\n    console.log(\"that.searchPointResults2\", that.searchPointResults2)\n    const pointCount = that.searchPointResults2.length;\n    console.log(\"that.searchPointResults2\", pointCount)\n\n    // Logarithmic regression parameters\n    const a = 6.71682071;\n    const b = -0.437974871;\n    let curPointWidth = a + b * Math.log(config.layout.scatterDotRadius * (that.svgFullSize.height / 760) * pointCount);\n    curPointWidth = Math.min(5, curPointWidth);\n    const alpha = 1 / (Math.log(pointCount) / Math.log(500));\n\n    // Get the current zoom matrix\n    const zoomMatrix = getZoomMatrix(that.curZoomTransform);\n\n    // Create a texture array for point colors\n    const textureArray = [\n        config.layout.timePointColorInt[0],\n        config.layout.timePointColorInt[1],\n        config.layout.timePointColorInt[2],\n        255,\n        config.layout.secondPointColorInt[0],\n        config.layout.secondPointColorInt[1],\n        config.layout.secondPointColorInt[2],\n        255,\n        255,\n        255,\n        255,\n        0\n    ];\n\n    const texture = that.searchPointRegl.texture({\n        width: 3,\n        height: 1,\n        data: textureArray,\n        format: 'rgba'\n    });\n\n    // Collect positions and texture coordinates for each point\n    const positions = [];\n    const uvs = [];\n    console.log(\"that.searchPointResults222222\", that.searchPointResults2)\n\n    for (const point of that.searchPointResults2) {\n        positions.push([point.x, point.y]);\n        uvs.push([0, 0]);\n    }\n\n    const drawPoints = that.searchPointRegl({\n        depth: { enable: false },\n        stencil: { enable: false },\n        frag: fragmentShader,\n        vert: vertexShader,\n        attributes: {\n            position: positions,\n            textureCoord: uvs\n        },\n        uniforms: {\n            pointWidth: curPointWidth,\n            dataScaleMatrix: that.webGLMatrices.dataScaleMatrix,\n            zoomMatrix: zoomMatrix,\n            normalizeMatrix: that.webGLMatrices.normalizeMatrix,\n            alpha: alpha,\n            userAlpha: -1,\n            texture: texture\n        },\n        blend: {\n            enable: true,\n            func: {\n                srcRGB: 'one',\n                srcAlpha: 'one',\n                dstRGB: 'one minus src alpha',\n                dstAlpha: 'one minus src alpha'\n            }\n        },\n        count: pointCount,\n        primitive: 'points'\n    });\n\n    drawPoints();\n\n    console.log(\"that.searchPointResults3333\", that.searchPointResults2)\n}\n\nexport const anyTrue = (items) => items.reduce((a, b) => a || b);\nexport const allTrue = (items) => items.reduce((a, b) => a && b);"],"mappings":"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","ignoreList":[]}]}