{"remainingRequest":"/home/yansha/VDProject/VDFrontend/node_modules/babel-loader/lib/index.js!/home/yansha/VDProject/VDFrontend/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/yansha/VDProject/VDFrontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yansha/VDProject/VDFrontend/src/views/MainView/MiddleMainView/DistributionView.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/yansha/VDProject/VDFrontend/src/views/MainView/MiddleMainView/DistributionView.vue","mtime":1735218965317},{"path":"/home/yansha/VDProject/VDFrontend/babel.config.js","mtime":1730469387355},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/cache-loader/dist/cjs.js","mtime":1735202380381},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/babel-loader/lib/index.js","mtime":1735202380921},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/cache-loader/dist/cjs.js","mtime":1735202380381},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/vue-loader/lib/index.js","mtime":1735202381045}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["api","THREE","FontLoader","OrbitControls","mapState","config","createRegl","d3","initWebGLMatrices","initWebGLBuffers","drawScatterPlot","drawGroupContour","LoaderWorker","TreeWorker","name","components","data","component","svg","svgFullSize","width","height","svgSize","svgPadding","top","bottom","left","right","topSvg","topicCanvases","pointCanvas","pointRegl","frontPositionBuffer","frontTextureCoordinateBuffer","frontBufferPointSize","searchPointCanvas","searchPointRegl","xScale","yScale","webGLMatrices","curPointWidth","curZoomTransform","gridData","points","loadedPointCount","reductionData","showContours","showPoints","zoom","loaderWorker","treeWorker","mounted","init","methods","dag","$refs","distributionMain","clientHeight","clientWidth","select","initWorker","initTopSvg","initCanvas","initSVGGroups","initData","then","extent","scaleExtent","layout","zoomScale","interpolate","on","g","zoomed","zoomEnded","call","squareCanvasWidth","Math","min","zoomIdentity","json","$store","state","dataURLs","grid","undefined","console","log","xRange","yRange","xLength","yLength","padded","scaleLinear","domain","range","treeMessage","command","payload","groupIDs","times","postMessage","_this$pointCanvas","discomponent","append","attr","node","umapGroup","classed","e","transform","scaleChanged","k","toString","onmessage","loaderWorkerMessageHandler","treeWorkerMessageHandler","isFirstBatch","promptPoints","anyTrue","searchMessage","newPoints","point","push","updateWebGLBuffers","isLastBatch","footerStoreValue","numPoints","length","footerStore","set","error","message","url","lastMouseClientPosition","Error","closestPoint","structuredClone","screenPointX","applyX","x","screenPointY","applyY","y","distance","max","abs","highlightRadius","scatterDotRadius","exp","curHoverRadius","HOVER_RADIUS","highlightPoint","animated","computed","watch","reductionInfo","newVal","gridDensity"],"sources":["src/views/MainView/MiddleMainView/DistributionView.vue"],"sourcesContent":["<template>\n    <div v-if=\"this.$store.state.isDone['DisT']\" class=\"distribution-main\" ref=\"distributionMain\">\n    </div>\n</template>\n\n\n<script>\nimport api from \"@/api/data\";\nimport * as THREE from 'three';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { mapState } from \"vuex\";\nimport { config } from '@/config/config';\nimport createRegl from 'regl';\nimport d3 from '../../../utils/d3-import';\nimport { initWebGLMatrices, initWebGLBuffers, drawScatterPlot, drawGroupContour } from '../MiddleMainView/Embedding';\n// import { LoaderWorkerMessage } from '../../../../types/embedding-types';\nimport LoaderWorker from '../../../components/Embedding/workers/loader.worker?worker&inline';\nimport TreeWorker from '../../../components/Embedding/workers/tree.worker?worker&inline';\n\nexport default {\n    name: \"DistributionView\",\n    components: {\n\n    },\n    data() {\n        return {\n            component: null,    // HTMLElement： d3.select('.distribution-main')\n\n            svg: null,    // d3.Selection<HTMLElement, unknown, null, undefined>, unsed for drawing contour\n            svgFullSize: { width: 0, height: 0 },   // Size\n            svgSize: { width: 0, height: 0 }, // square draw \n            svgPadding: { top: 0, bottom: 0, left: 0, right: 0 }, // Padding\n\n            topSvg: null,   // d3.Selection<HTMLElement, unknown, null, undefined>, unsed for drawing hightlights\n            topicCanvases: [],  // used for drawing embedding points and others\n\n            // points\n            pointCanvas: null,\n            pointRegl: null,\n            frontPositionBuffer: null,\n            frontTextureCoordinateBuffer: null,\n            frontBufferPointSize: 0,\n\n            // search\n            searchPointCanvas: null,\n            searchPointRegl: null,\n\n            // setting\n            xScale: null,\n            yScale: null,\n\n            // scatter plot\n            webGLMatrices: null,\n            curPointWidth: 0,\n\n            curZoomTransform: null,\n\n            // data\n            gridData: null,\n            points: null,\n            loadedPointCount: 1,\n            reductionData: [],\n\n\n            // user settings\n            showContours: true,\n            showPoints: true,\n\n\n            // zooming\n            zoom: null, // d3.ZoomBehavior<HTMLElement, unknown>\n\n            // Web workers\n            loaderWorker: null,\n            treeWorker: null,\n\n\n        };\n    },\n    mounted() {\n\n        this.init();\n\n    },\n    methods: {\n        init() {\n\n            const dag = this.$refs.distributionMain;\n            this.svgFullSize.height = dag.clientHeight;\n            this.svgFullSize.width = dag.clientWidth;\n\n            this.component = d3.select('.distribution-main');\n\n            this.initWorker();\n\n            this.initTopSvg();\n            // Initialize the canvases\n            this.initCanvas();\n            // \n            this.initSVGGroups();\n\n            this.initData().then(() => {\n                this.initTopSvg();\n                this.initCanvas();\n                this.initSVGGroups();\n            });\n\n            // Register zoom\n            this.zoom = d3\n                .zoom()\n                .extent([\n                    [0, 0],\n                    [this.svgSize.width, this.svgSize.height]\n                ])\n                .scaleExtent([config.layout.zoomScale[0], config.layout.zoomScale[1]])\n                .interpolate(d3.interpolate)\n                .on('zoom', (g) => {\n                    (async () => {\n                        await this.zoomed(g);\n                    })();\n                })\n                .on('end', () => this.zoomEnded());\n\n            this.topSvg.call(this.zoom).on('dblclick.zoom', null);\n\n            const squareCanvasWidth = Math.min(\n                this.svgFullSize.width - this.svgPadding.left - this.svgPadding.right,\n                this.svgFullSize.height - this.svgPadding.top - this.svgPadding.bottom\n            );\n\n            this.svgSize = {\n                width: squareCanvasWidth,\n                height: squareCanvasWidth\n            };\n\n\n            this.curZoomTransform = d3.zoomIdentity;\n\n        },\n        async initData() {\n\n            const gridData = await d3.json(this.$store.state.dataURLs.grid);\n            if (gridData === undefined) {\n                console.log('Fail to load grid data');\n            }\n\n            this.gridData = gridData;\n\n            // Initialize the data scales\n            const xRange = this.gridData.xRange;\n            const yRange = this.gridData.yRange;\n\n            let xLength = xRange[1] - xRange[0];\n            let yLength = yRange[1] - yRange[0];\n\n            if (!this.gridData.padded) {\n                // Add padding for the data\n                if (xLength < yLength) {\n                    yRange[0] -= yLength / 50;\n                    yRange[1] += yLength / 50;\n                    yLength = yRange[1] - yRange[0];\n\n                    xRange[0] -= (yLength - xLength) / 2;\n                    xRange[1] += (yLength - xLength) / 2;\n                } else {\n                    // Add padding for the data\n                    xRange[0] -= xLength / 50;\n                    xRange[1] += xLength / 50;\n                    xLength = xRange[1] - xRange[0];\n\n                    yRange[0] -= (xLength - yLength) / 2;\n                    yRange[1] += (xLength - yLength) / 2;\n                }\n            }\n            this.xScale = d3\n                .scaleLinear()\n                .domain(xRange)\n                .range([0, this.svgSize.width]);\n\n            this.yScale = d3\n                .scaleLinear()\n                .domain(yRange)\n                .range([this.svgSize.height, 0]);\n\n            const treeMessage = {\n                command: 'initQuadtree',\n                payload: {\n                    xRange: xRange,\n                    yRange: yRange,\n                    groupIDs: -1,\n                    times: ['']\n                }\n            };\n            console.log(\"and post message to worker!!!\", treeMessage)\n\n            this.treeWorker.postMessage(treeMessage);\n        },\n        initCanvas() {\n\n            const discomponent = this.$refs.distributionMain;\n            this.pointCanvas = d3.select(discomponent)\n                .append('canvas')\n                .attr('class', 'embedding-canvas')\n                .attr('width', this.svgFullSize.width)\n                .attr('height', this.svgFullSize.height);\n\n            this.pointRegl = createRegl(this.pointCanvas?.node());\n\n            // this.searchPointCanvas = d3.select(discomponent)\n            //     .append('canvas')\n            //     .attr('class', 'search-point-canvas')\n            //     .attr('width', this.svgFullSize.width)\n            //     .attr('height', this.svgFullSize.height);\n\n            // this.searchPointRegl = createRegl(this.searchPointCanvas?.node());\n\n            // this.topicCanvases = [];\n            // for (const pos of ['top', 'bottom']) {\n            //     this.topicCanvases.push(\n            //         d3\n            //             .select(discomponent)\n            //             .append('canvas')\n            //             .attr('class', `topic-grid-canvas.${pos}`)\n            //             .attr('width', `${this.svgFullSize.width}px`)\n            //             .attr('height', `${this.svgFullSize.height}px`)\n            //     );\n            // }\n\n        },\n        initSVGGroups() {\n\n            this.svg = this.component.append('svg')\n                .attr('class', \"embedding-svg\")\n                .attr('width', this.svgFullSize.width)\n                .attr('height', this.svgFullSize.height);\n\n\n            const umapGroup = this.svg\n                .append('g')\n                .attr('class', 'umap-group')\n                .attr(\n                    'transform',\n                    `translate(${this.svgPadding.left}, ${this.svgPadding.top})`\n                );\n\n            umapGroup\n                .append('g')\n                .attr('class', 'contour-group')\n                .classed('hidden', !this.showContours);\n\n        },\n        initTopSvg() {\n\n            // 创建一个 SVG 元素并设置其属性\n            this.topSvg = this.component.append('svg')\n                .attr('class', \"top-svg\")\n                .attr('width', this.svgFullSize.width)  // 设置宽度\n                .attr('height', this.svgFullSize.height) // 设置高度\n\n            const topSvg = d3.select('.top-svg')\n                .attr('width', `${this.svgFullSize.width}px`)\n                .attr('height', `${this.svgFullSize.height}px`);\n\n            // const topGroup = topSvg.append('g').attr('class', 'top-group');\n\n            // topGroup\n            //     .append('rect')\n            //     .attr('class', 'mouse-track-rect')\n            //     .attr('width', this.svgFullSize.width)\n            //     .attr('height', this.svgFullSize.height);\n\n            // const topContent = topGroup.append('g').attr('class', 'top-content');\n\n            // topContent.append('g').attr('class', 'topics-bottom');\n            // topContent\n            //     .append('g')\n            //     .attr('class', 'topics');\n            // topContent.append('g').attr('class', 'topics-top');\n            // topContent.append('g').attr('class', 'highlights');\n\n        },\n        zoomed(e) {\n            const transform = e.transform;\n            const scaleChanged = this.curZoomTransform.k !== transform.k;\n            this.curZoomTransform = transform;\n\n            // === Task (1) ===\n            // Transform the SVG elements\n            this.svg.select('.umap-group').attr('transform', transform.toString());\n\n            // Transform the top SVG elements\n            this.topSvg\n                .select('.top-group')\n                .attr('transform', transform.toString());\n\n            // Transform the visible canvas elements\n            if (this.showPoints) {\n                if (this.frontPositionBuffer && this.frontTextureCoordinateBuffer) {\n                    drawScatterPlot(this);\n                }\n            }\n\n        },\n        // Event handler for zoom ended\n        zoomEnded() {\n            console.log(\"svg zoom end !!!\")\n        },\n        initWorker() {\n            // Initialize the web worker to load data and deal with the quadtree\n            this.loaderWorker = new LoaderWorker();\n            this.loaderWorker.onmessage = (e) => {\n                this.loaderWorkerMessageHandler(e);\n            };\n\n            this.treeWorker = new TreeWorker();\n            this.treeWorker.onmessage = (e) => {\n                this.treeWorkerMessageHandler(e);\n            };\n        },\n        loaderWorkerMessageHandler(e) {\n            switch (e.data.command) {\n                case 'transferLoadData': {\n                    // Add these points to the quadtree ASAP\n                    const treeMessage = {\n                        command: 'updateQuadtree',\n                        payload: {\n                            points: e.data.payload.points\n                        }\n                    };\n                    this.treeWorker.postMessage(treeMessage);\n\n                    if (e.data.payload.isFirstBatch) {\n                        // Add the first batch points\n                        this.promptPoints = e.data.payload.points;\n\n                        initWebGLBuffers();\n                        if (anyTrue(this.showPoints)) {\n                            drawScatterPlot();\n                        }\n\n                        // Add the points to the search index\n                        const searchMessage = {\n                            command: 'addPoints',\n                            payload: {\n                                points: e.data.payload.points\n                            }\n                        };\n                        // this.searchWorker.postMessage(searchMessage);\n                    } else {\n                        // Batches after the first batch\n                        // Add the points to the prompt point list\n                        const newPoints = e.data.payload.points;\n                        for (const point of newPoints) {\n                            this.promptPoints.push(point);\n                        }\n\n                        // Add the points to the search index\n                        // const searchMessage = {\n                        //     command: 'addPoints',\n                        //     payload: {\n                        //         points: newPoints\n                        //     }\n                        // };\n                        // this.searchWorker.postMessage(searchMessage);\n\n                        // Add the new points to the WebGL buffers\n                        this.updateWebGLBuffers(newPoints);\n                        if (anyTrue(this.showPoints)) {\n                            drawScatterPlot();\n                        }\n\n                        if (e.data.payload.isLastBatch) {\n                            console.log('Finished loading all data.');\n                        }\n                    }\n\n                    // Update the data point count\n                    this.loadedPointCount = e.data.payload.loadedPointCount;\n\n                    // Update the footer\n                    this.footerStoreValue.numPoints = this.promptPoints.length;\n                    this.footerStore.set(this.footerStoreValue);\n                    break;\n                }\n\n                default: {\n                    console.error('Unknown message', e.data.command);\n                    break;\n                }\n            }\n        },\n        treeWorkerMessageHandler(e) {\n            switch (e.data.command) {\n                case 'finishInitQuadtree': {\n                    // Tell the loader worker to start loading data\n                    // (need to wait to set up the quadtree to avoid racing)\n                    const message = {\n                        command: 'startLoadData',\n                        payload: { url: this.$store.state.dataURLs.point }\n                    };\n                    this.loaderWorker.postMessage(message);\n                    break;\n                }\n\n                case 'finishQuadtreeSearch': {\n                    if (this.lastMouseClientPosition === null) {\n                        throw new Error('lastMouseClientPosition is null');\n                    }\n                    // Check if the closest point is relatively close to the mouse\n                    const closestPoint = structuredClone(\n                        e.data.payload.point\n                    );\n                    const screenPointX = this.curZoomTransform.applyX(\n                        this.xScale(closestPoint.x)\n                    );\n                    const screenPointY = this.curZoomTransform.applyY(\n                        this.yScale(closestPoint.y)\n                    );\n\n                    const distance = Math.max(\n                        Math.abs(screenPointX - this.lastMouseClientPosition.x),\n                        Math.abs(screenPointY - this.lastMouseClientPosition.y)\n                    );\n\n                    const highlightRadius = Math.max(\n                        10 / this.curZoomTransform.k,\n                        (config.layout.scatterDotRadius *\n                            Math.exp(Math.log(this.curZoomTransform.k) * 0.55)) /\n                        this.curZoomTransform.k\n                    );\n\n                    // Highlight the point if it is close enough to the mouse\n                    const curHoverRadius = Math.max(\n                        HOVER_RADIUS,\n                        highlightRadius * this.curZoomTransform.k\n                    );\n\n                    if (distance <= curHoverRadius) {\n                        this.highlightPoint({ point: closestPoint, animated: false });\n                    } else {\n                        this.highlightPoint({ point: undefined, animated: false });\n                    }\n                    break;\n                }\n\n                default: {\n                    console.error('Unknown message', e.data.command);\n                    break;\n                }\n            }\n        },\n    },\n    computed: {\n        ...mapState({\n        }),\n    },\n    watch: {\n\n        reductionInfo(newVal) {\n            if (newVal && newVal.length) {\n                this.reductionData = newVal;\n                this.gridData = this.$store.state.gridDensity;\n            }\n        },\n    }\n};\n\n\n</script>\n\n<style lang=\"scss\">\n@use './DistributionView.scss';\n</style>"],"mappings":"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","ignoreList":[]}]}