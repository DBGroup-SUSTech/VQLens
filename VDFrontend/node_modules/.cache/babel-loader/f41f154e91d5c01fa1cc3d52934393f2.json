{"remainingRequest":"/home/yansha/VDProject/VDFrontend/node_modules/babel-loader/lib/index.js!/home/yansha/VDProject/VDFrontend/src/components/Embedding/workers/tree.js?worker&inline","dependencies":[{"path":"/home/yansha/VDProject/VDFrontend/src/components/Embedding/workers/tree.js","mtime":1735204529718},{"path":"/home/yansha/VDProject/VDFrontend/babel.config.js","mtime":1730469387355},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/cache-loader/dist/cjs.js","mtime":1735202380381},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/babel-loader/lib/index.js","mtime":1735202380921}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXNuZXh0Lml0ZXJhdG9yLmNvbnN0cnVjdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXNuZXh0Lml0ZXJhdG9yLmZpbmQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuc2VsZi5qcyI7CmltcG9ydCBkMyBmcm9tICcuLi8uLi8uLi91dGlscy9kMy1pbXBvcnQnOwppbXBvcnQgeyB0aW1laXQgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7CmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uLy4uLy4uL2NvbmZpZy9jb25maWcnOwpjb25zdCBERUJVRyA9IGNvbmZpZy5kZWJ1ZzsKY29uc3QgZ3JvdXBUaW1lVHJlZU1hcCA9IG5ldyBNYXAoKTsKCi8qKgogKiBIYW5kbGUgbWVzc2FnZSBldmVudHMgZnJvbSB0aGUgbWFpbiB0aHJlYWQKICogQHBhcmFtIGUgTWVzc2FnZSBldmVudAogKi8Kc2VsZi5vbm1lc3NhZ2UgPSBlID0+IHsKICAvLyBTdHJlYW0gcG9pbnQgZGF0YQogIHN3aXRjaCAoZS5kYXRhLmNvbW1hbmQpIHsKICAgIGNhc2UgJ2luaXRRdWFkdHJlZSc6CiAgICAgIHsKICAgICAgICBjb25zdCB7CiAgICAgICAgICB4UmFuZ2UsCiAgICAgICAgICB5UmFuZ2UsCiAgICAgICAgICB0aW1lcywKICAgICAgICAgIGdyb3VwSURzCiAgICAgICAgfSA9IGUuZGF0YS5wYXlsb2FkOwogICAgICAgIGNvbnNvbGUubG9nKCdXb3JrZXI6IGluaXQgcXVhZHRyZWUnLCB4UmFuZ2UsIHlSYW5nZSwgdGltZXMsIGdyb3VwSURzKTsKICAgICAgICBpbml0UXVhZHRyZWUoeFJhbmdlLCB5UmFuZ2UsIHRpbWVzLCBncm91cElEcyk7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIGNhc2UgJ3VwZGF0ZVF1YWR0cmVlJzoKICAgICAgewogICAgICAgIGNvbnN0IHBvaW50cyA9IGUuZGF0YS5wYXlsb2FkLnBvaW50czsKICAgICAgICB1cGRhdGVRdWFkdHJlZShwb2ludHMpOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgICBjYXNlICdzdGFydFF1YWR0cmVlU2VhcmNoJzoKICAgICAgewogICAgICAgIGNvbnN0IHsKICAgICAgICAgIHgsCiAgICAgICAgICB5LAogICAgICAgICAgdGltZSwKICAgICAgICAgIGdyb3VwSUQKICAgICAgICB9ID0gZS5kYXRhLnBheWxvYWQ7CiAgICAgICAgcXVhZHRyZWVTZWFyY2goeCwgeSwgdGltZSwgZ3JvdXBJRCk7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIGRlZmF1bHQ6CiAgICAgIHsKICAgICAgICBjb25zb2xlLmVycm9yKCdXb3JrZXI6IHVua25vd24gbWVzc2FnZScsIGUuZGF0YS5jb21tYW5kKTsKICAgICAgICBicmVhazsKICAgICAgfQogIH0KfTsKCi8qKgogKiBJbml0aWFsaXplIHRoZSBxdWFkdHJlZQogKiBAcGFyYW0geFJhbmdlIFt4TWluLCB4TWF4XQogKiBAcGFyYW0geVJhbmdlIFt5TWluLCB5TWF4XQogKi8KY29uc3QgaW5pdFF1YWR0cmVlID0gKHhSYW5nZSwgeVJhbmdlLCB0aW1lcywgZ3JvdXBJRHMpID0+IHsKICAvLyBJbml0aWFsaXplIHRoZSBxdWFkdHJlZSBjb250YWlucyBhbGwgdGhlIHBvaW50cyAoZ3JvdXAgPSAnJywgdGltZSA9ICcnKQogIGluaXRUaW1lUXVhZHRyZWVzKHhSYW5nZSwgeVJhbmdlLCAtMSwgWycnXSk7CgogIC8vIEluaXRpYWxpemUgdGltZSB0cmVlcyBpZiB1c2VycyBoYXZlIHNwZWNpZmllZCB0aW1lcyBpbiB0aGVpciBlbWJlZGRpbmdzCiAgaWYgKHRpbWVzLmxlbmd0aCA+IDApIHsKICAgIGlmIChncm91cElEcy5sZW5ndGggPiAwKSB7CiAgICAgIGZvciAoY29uc3QgZ3JvdXBJRCBvZiBncm91cElEcykgewogICAgICAgIGluaXRUaW1lUXVhZHRyZWVzKHhSYW5nZSwgeVJhbmdlLCBncm91cElELCB0aW1lcyk7CiAgICAgIH0KICAgIH0KCiAgICAvLyBBbHNvIGNyZWF0ZSB0aW1lIHRyZWVzIGNvdmVyIGFsbCBncm91cHMKICAgIGluaXRUaW1lUXVhZHRyZWVzKHhSYW5nZSwgeVJhbmdlLCAtMSwgdGltZXMpOwogIH0KCiAgLy8gSW5pdGlhbGl6ZSBncm91cCB0cmVlcyAodGhlc2UgdHJlZXMgYXJlIHNwZWNpYWwgdGltZSB0cmVlcyB3aXRoIHRoZQogIC8vIHRpbWUga2V5IHNldCB0byAnJykKICBpZiAoZ3JvdXBJRHMubGVuZ3RoID4gMCkgewogICAgZm9yIChjb25zdCBncm91cElEIG9mIGdyb3VwSURzKSB7CiAgICAgIGluaXRUaW1lUXVhZHRyZWVzKHhSYW5nZSwgeVJhbmdlLCBncm91cElELCBbJyddKTsKICAgIH0KICB9CgogIC8vIE5vdGlmeSB0aGUgbWFpbiB0aHJlYWQKICBjb25zdCBtZXNzYWdlID0gewogICAgY29tbWFuZDogJ2ZpbmlzaEluaXRRdWFkdHJlZScsCiAgICBwYXlsb2FkOiBudWxsCiAgfTsKICBwb3N0TWVzc2FnZShtZXNzYWdlKTsKfTsKY29uc3QgaW5pdFRpbWVRdWFkdHJlZXMgPSAoeFJhbmdlLCB5UmFuZ2UsIGdyb3VwSUQsIHRpbWVzKSA9PiB7CiAgLy8gRmluZCB0aGUgY29ycmVjdCB0aW1lIHRyZWUgbWFwIHVuZGVyIHRoZSBncm91cCBsZXZlbAogIGxldCBjdXJUaW1lVHJlZU1hcDsKICBpZiAoZ3JvdXBUaW1lVHJlZU1hcC5oYXMoZ3JvdXBJRCkpIHsKICAgIGN1clRpbWVUcmVlTWFwID0gZ3JvdXBUaW1lVHJlZU1hcC5nZXQoZ3JvdXBJRCk7CiAgfSBlbHNlIHsKICAgIGN1clRpbWVUcmVlTWFwID0gbmV3IE1hcCgpOwogICAgZ3JvdXBUaW1lVHJlZU1hcC5zZXQoZ3JvdXBJRCwgY3VyVGltZVRyZWVNYXApOwogIH0KICBmb3IgKGNvbnN0IHRpbWUgb2YgdGltZXMpIHsKICAgIGNvbnN0IGN1clRyZWUgPSBkMy5xdWFkdHJlZSgpLngoZCA9PiBkLngpLnkoZCA9PiBkLnkpLmNvdmVyKHhSYW5nZVswXSwgeVJhbmdlWzBdKS5jb3Zlcih4UmFuZ2VbMV0sIHlSYW5nZVsxXSk7CiAgICBjdXJUaW1lVHJlZU1hcC5zZXQodGltZSwgY3VyVHJlZSk7CiAgfQp9OwoKLyoqCiAqIEFkZCBuZXcgcG9pbnRzIHRvIHRoZSBxdWFkdHJlZQogKiBAcGFyYW0gcG9pbnRzIE5ldyBwb2ludHMKICovCmNvbnN0IHVwZGF0ZVF1YWR0cmVlID0gcG9pbnRzID0+IHsKICAvLyBBZGQgdGhlc2UgcG9pbnRzIHRvIHRoZSBxdWFkdHJlZSBhZnRlciBzZW5kaW5nIHRoZW0gdG8gdGhlIG1haW4gdGhyZWFkCiAgY29uc3QgYWxsVHJlZSA9IGdyb3VwVGltZVRyZWVNYXAuZ2V0KC0xKS5nZXQoJycpOwogIGZvciAoY29uc3QgcG9pbnQgb2YgcG9pbnRzKSB7CiAgICAvLyBBZGQgdGhlIHBvaW50IHRvIHRoZSB0cmVlIGNvbnRhaW5pbmcgYWxsIHBvaW50cwogICAgYWxsVHJlZS5hZGQocG9pbnQpOwoKICAgIC8vIEFkZCB0aGUgcG9pbnQgdG8gdGhlIGNvcnJlY3QgZ3JvdXAgdHJlZSBhbmQgdGltZSB0cmVlIG1hcHMKICAgIGlmIChwb2ludC50aW1lICE9PSB1bmRlZmluZWQpIHsKICAgICAgaWYgKHBvaW50Lmdyb3VwSUQgIT09IHVuZGVmaW5lZCkgewogICAgICAgIGlmIChncm91cFRpbWVUcmVlTWFwLmhhcyhwb2ludC5ncm91cElEKSAmJiBncm91cFRpbWVUcmVlTWFwLmdldChwb2ludC5ncm91cElEKS5oYXMocG9pbnQudGltZSkpIHsKICAgICAgICAgIGNvbnN0IGN1clRyZWUgPSBncm91cFRpbWVUcmVlTWFwLmdldChwb2ludC5ncm91cElEKS5nZXQocG9pbnQudGltZSk7CiAgICAgICAgICBjdXJUcmVlLmFkZChwb2ludCk7CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyBBZGQgdGhlIHBvaW50IHRvIHRoZSB0aW1lIHRyZWUgbWFwIHJlZ2FyZGxlc3Mgb2YgZ3JvdXAKICAgICAgaWYgKGdyb3VwVGltZVRyZWVNYXAuZ2V0KC0xKS5oYXMocG9pbnQudGltZSkpIHsKICAgICAgICBjb25zdCBjdXJUcmVlID0gZ3JvdXBUaW1lVHJlZU1hcC5nZXQoLTEpLmdldChwb2ludC50aW1lKTsKICAgICAgICBjdXJUcmVlLmFkZChwb2ludCk7CiAgICAgIH0KICAgIH0KCiAgICAvLyBBZGQgdGhlIHBvaW50IHRvIHRoZSBncm91cCB0cmVlIHJlZ2FyZGxlc3Mgb2YgdGltZQogICAgaWYgKHBvaW50Lmdyb3VwSUQpIHsKICAgICAgaWYgKGdyb3VwVGltZVRyZWVNYXAuaGFzKHBvaW50Lmdyb3VwSUQpKSB7CiAgICAgICAgY29uc3QgY3VyVHJlZSA9IGdyb3VwVGltZVRyZWVNYXAuZ2V0KHBvaW50Lmdyb3VwSUQpLmdldCgnJyk7CiAgICAgICAgY3VyVHJlZS5hZGQocG9pbnQpOwogICAgICB9CiAgICB9CiAgfQp9OwoKLyoqCiAqIEZpbmQgdGhlIGNsb3Nlc3QgZGF0YSBwb2ludAogKiBAcGFyYW0geCBYIGNvb3JkaW5hdGUgaW4gdGhlIGRhdGEgc3BhY2UKICogQHBhcmFtIHkgWSBjb29yZGluYXRlIGluIHRoZSBkYXRhIHNwYWNlCiAqIEByZXR1cm5zIFRoZSBjbG9zZXN0IHBvaW50IHRvICh4LCB5KSBpbiB0aGUgcXVhZHRyZWUKICovCmNvbnN0IHF1YWR0cmVlU2VhcmNoID0gKHgsIHksIHRpbWUsIGdyb3VwSUQpID0+IHsKICBpZiAoZ3JvdXBUaW1lVHJlZU1hcC5oYXMoZ3JvdXBJRCkpIHsKICAgIGlmIChncm91cFRpbWVUcmVlTWFwLmdldChncm91cElEKS5oYXModGltZSkpIHsKICAgICAgY29uc3QgY3VyVHJlZSA9IGdyb3VwVGltZVRyZWVNYXAuZ2V0KGdyb3VwSUQpLmdldCh0aW1lKTsKICAgICAgY29uc3QgY2xvc2VzdFBvaW50ID0gY3VyVHJlZS5maW5kKHgsIHkpOwogICAgICBpZiAoY2xvc2VzdFBvaW50ID09PSB1bmRlZmluZWQpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgY29uc3QgcmVzdWx0ID0gewogICAgICAgIGNvbW1hbmQ6ICdmaW5pc2hRdWFkdHJlZVNlYXJjaCcsCiAgICAgICAgcGF5bG9hZDogewogICAgICAgICAgcG9pbnQ6IGNsb3Nlc3RQb2ludAogICAgICAgIH0KICAgICAgfTsKICAgICAgcG9zdE1lc3NhZ2UocmVzdWx0KTsKICAgIH0KICB9Cn07CmV4cG9ydCBkZWZhdWx0IHNlbGY7"},{"version":3,"names":["d3","timeit","config","DEBUG","debug","groupTimeTreeMap","Map","self","onmessage","e","data","command","xRange","yRange","times","groupIDs","payload","console","log","initQuadtree","points","updateQuadtree","x","y","time","groupID","quadtreeSearch","error","initTimeQuadtrees","length","message","postMessage","curTimeTreeMap","has","get","set","curTree","quadtree","d","cover","allTree","point","add","undefined","closestPoint","find","result"],"sources":["/home/yansha/VDProject/VDFrontend/src/components/Embedding/workers/tree.js"],"sourcesContent":["import d3 from '../../../utils/d3-import';\nimport { timeit } from '../../../utils/utils';\nimport { config } from '../../../config/config';\n\nconst DEBUG = config.debug;\n\nconst groupTimeTreeMap = new Map();\n\n/**\n * Handle message events from the main thread\n * @param e Message event\n */\nself.onmessage = (e) => {\n  // Stream point data\n  switch (e.data.command) {\n    case 'initQuadtree': {\n      const { xRange, yRange, times, groupIDs } = e.data.payload;\n      console.log('Worker: init quadtree', xRange, yRange, times, groupIDs);\n      initQuadtree(xRange, yRange, times, groupIDs);\n\n      break;\n    }\n\n    case 'updateQuadtree': {\n      const points = e.data.payload.points;\n      updateQuadtree(points);\n      break;\n    }\n\n    case 'startQuadtreeSearch': {\n      const { x, y, time, groupID } = e.data.payload;\n      quadtreeSearch(x, y, time, groupID);\n      break;\n    }\n\n    default: {\n      console.error('Worker: unknown message', e.data.command);\n      break;\n    }\n  }\n};\n\n/**\n * Initialize the quadtree\n * @param xRange [xMin, xMax]\n * @param yRange [yMin, yMax]\n */\nconst initQuadtree = (xRange, yRange, times, groupIDs) => {\n  // Initialize the quadtree contains all the points (group = '', time = '')\n  initTimeQuadtrees(xRange, yRange, -1, ['']);\n\n  // Initialize time trees if users have specified times in their embeddings\n  if (times.length > 0) {\n    if (groupIDs.length > 0) {\n      for (const groupID of groupIDs) {\n        initTimeQuadtrees(xRange, yRange, groupID, times);\n      }\n    }\n\n    // Also create time trees cover all groups\n    initTimeQuadtrees(xRange, yRange, -1, times);\n  }\n\n  // Initialize group trees (these trees are special time trees with the\n  // time key set to '')\n  if (groupIDs.length > 0) {\n    for (const groupID of groupIDs) {\n      initTimeQuadtrees(xRange, yRange, groupID, ['']);\n    }\n  }\n\n  // Notify the main thread\n  const message = {\n    command: 'finishInitQuadtree',\n    payload: null\n  };\n  postMessage(message);\n};\n\nconst initTimeQuadtrees = (xRange, yRange, groupID, times) => {\n  // Find the correct time tree map under the group level\n  let curTimeTreeMap;\n\n  if (groupTimeTreeMap.has(groupID)) {\n    curTimeTreeMap = groupTimeTreeMap.get(groupID);\n  } else {\n    curTimeTreeMap = new Map();\n    groupTimeTreeMap.set(groupID, curTimeTreeMap);\n  }\n\n  for (const time of times) {\n    const curTree = d3\n      .quadtree()\n      .x(d => d.x)\n      .y(d => d.y)\n      .cover(xRange[0], yRange[0])\n      .cover(xRange[1], yRange[1]);\n    curTimeTreeMap.set(time, curTree);\n  }\n};\n\n/**\n * Add new points to the quadtree\n * @param points New points\n */\nconst updateQuadtree = (points) => {\n  // Add these points to the quadtree after sending them to the main thread\n  const allTree = groupTimeTreeMap.get(-1).get('');\n\n  for (const point of points) {\n    // Add the point to the tree containing all points\n    allTree.add(point);\n\n    // Add the point to the correct group tree and time tree maps\n    if (point.time !== undefined) {\n      if (point.groupID !== undefined) {\n        if (\n          groupTimeTreeMap.has(point.groupID) &&\n          groupTimeTreeMap.get(point.groupID).has(point.time)\n        ) {\n          const curTree = groupTimeTreeMap.get(point.groupID).get(point.time);\n          curTree.add(point);\n        }\n      }\n\n      // Add the point to the time tree map regardless of group\n      if (groupTimeTreeMap.get(-1).has(point.time)) {\n        const curTree = groupTimeTreeMap.get(-1).get(point.time);\n        curTree.add(point);\n      }\n    }\n\n    // Add the point to the group tree regardless of time\n    if (point.groupID) {\n      if (groupTimeTreeMap.has(point.groupID)) {\n        const curTree = groupTimeTreeMap.get(point.groupID).get('');\n        curTree.add(point);\n      }\n    }\n  }\n};\n\n/**\n * Find the closest data point\n * @param x X coordinate in the data space\n * @param y Y coordinate in the data space\n * @returns The closest point to (x, y) in the quadtree\n */\nconst quadtreeSearch = (x, y, time, groupID) => {\n  if (groupTimeTreeMap.has(groupID)) {\n    if (groupTimeTreeMap.get(groupID).has(time)) {\n      const curTree = groupTimeTreeMap.get(groupID).get(time);\n\n      const closestPoint = curTree.find(x, y);\n      if (closestPoint === undefined) {\n        return;\n      }\n\n      const result = {\n        command: 'finishQuadtreeSearch',\n        payload: {\n          point: closestPoint\n        }\n      };\n      postMessage(result);\n    }\n  }\n};\n\nexport default self;"],"mappings":"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","ignoreList":[]}]}