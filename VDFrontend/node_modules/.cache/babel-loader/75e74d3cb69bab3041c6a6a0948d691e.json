{"remainingRequest":"/home/yansha/VDProject/VDFrontend/node_modules/babel-loader/lib/index.js!/home/yansha/VDProject/VDFrontend/node_modules/babel-loader/lib/index.js??ref--17!/home/yansha/VDProject/VDFrontend/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/yansha/VDProject/VDFrontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yansha/VDProject/VDFrontend/src/views/MainView/RightMainView/HistoryView.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/yansha/VDProject/VDFrontend/src/views/MainView/RightMainView/HistoryView.vue","mtime":1744442733412},{"path":"/home/yansha/VDProject/VDFrontend/babel.config.js","mtime":1744442733384},{"path":"/home/yansha/VDProject/VDFrontend/babel.config.js","mtime":1744442733384},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/cache-loader/dist/cjs.js","mtime":1735202380381},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/babel-loader/lib/index.js","mtime":1735202380921},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/babel-loader/lib/index.js","mtime":1735202380921},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/cache-loader/dist/cjs.js","mtime":1735202380381},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/vue-loader/lib/index.js","mtime":1735202381045}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["d3","mapState","api","name","components","data","nodelinkdata","svgWidth","svgHeight","velocityDecay","thumbnailWidth","thumbnailHeight","mounted","getViewSize","$store","state","dataNodeLink","console","log","initGraph","methods","dag","$refs","clientHeight","clientWidth","nodes","initThumbnail","convertToImage","event","node","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","imageUrl","targetElement","targetBBox","targetWidth","targetHeight","patternId","pattern","svg","defs","_pattern","image","wrap","_callee$","_context","prev","next","getImageUrl","datasetName","id","sent","select","target","getBBox","width","height","concat","empty","attr","append","stop","thumbnail","updateThumbnail","that","selectAll","remove","container","legendNode","cloneNode","linkNode","recall","links","map","d","_objectSpread","val","value","minVal","Math","min","apply","_toConsumableArray","maxVal","max","normalize","normalizedValue","a","simulation","forceSimulation","force","forceLink","forceManyBody","strength","forceCenter","on","ticked","call","zoom","scaleExtent","zoomed","colorMap","scaleOrdinal","range","groupColorMap","link","join","sqrt","group","border","v","drag","dragstarted","dragged","dragended","labels","style","text","b","existingBox","document","querySelector","parseInt","dataset","nodeId","options","pageX","pageY","closest","stopPropagation","distance","legend","uniqueGroups","Set","legendItems","enter","i","source","x","y","active","alphaTarget","restart","subject","fx","fy","transform","computed","dataNodelink","retrievalSet","modelName","retrievalInfo","isDone","watch"],"sources":["src/views/MainView/RightMainView/HistoryView.vue"],"sourcesContent":["<template>\n    <div class=\"node-link-main\">\n      <svg ref=\"dag\" class=\"dag-svg\"></svg>\n      <svg ref=\"thumbnail\" class=\"thumbnail-svg\"></svg>\n    </div>\n  </template>\n  \n  <script>\n  import * as d3 from \"d3\";\n  import { mapState } from \"vuex\";\n  import api from \"@/api/data\";\n  \n  export default {\n    name: \"NodeLinkView\",\n    components: {},\n    data() {\n      return {\n        nodelinkdata: {},\n        svgWidth: 0,  // 页面的宽度\n        svgHeight: 0,   // 页面高度\n        velocityDecay: 0.6,\n        thumbnailWidth: 0, // 缩略图宽度\n        thumbnailHeight: 0, // 缩略图高度\n      };\n    },\n    mounted() {\n      this.getViewSize();\n      this.nodelinkdata = this.$store.state.dataNodeLink;\n      console.log(\"请输出 link data 来看一下连接线的 data\",this.nodelinkdata);\n      this.initGraph(this.nodelinkdata);\n    },\n    methods: {\n      getViewSize() {\n        const dag = this.$refs.dag;\n        this.svgHeight = dag.clientHeight;\n        this.svgWidth = dag.clientWidth;\n        this.thumbnailWidth = this.svgWidth / 5;  // 缩略图宽度和高度分别为整个svg 的1/5\n        this.thumbnailHeight = this.svgHeight / 5;\n        if (this.nodelinkdata.nodes) {\n          this.initGraph(this.nodelinkdata);\n          this.initThumbnail();\n        }\n      },\n      async convertToImage(event, node) {\n        const res = await api.getImageUrl({ \"datasetName\": this.$store.state.datasetName, \"nodeId\": node.id });\n        const imageUrl = res[\"data\"][\"imageUrl\"];\n        const targetElement = d3.select(event.target);\n        const targetBBox = targetElement.node().getBBox();\n        const targetWidth = targetBBox.width;\n        const targetHeight = targetBBox.height;\n        const patternId = `pattern-${node.id}`;\n        let pattern = d3.select(`#${patternId}`);\n        if (pattern.empty()) {\n          const svg = d3.select(`#node-class`);\n          let defs = svg.select(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          if (defs.empty()) {\n            defs = svg.append(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          }\n          const pattern = defs.append(\"pattern\")\n            .attr(\"id\", patternId)\n            .attr(\"patternUnits\", \"objectBoundingBox\")\n            .attr(\"width\", 1) // 宽度为 1 表示相对于目标元素的宽度\n            .attr(\"height\", 1) // 高度为 1 表示相对于目标元素的高度\n            .attr(\"patternTransform\", \"translate(1, 1)\"); // 向右和向下移动 10 个单位\n  \n          const image = pattern.append(\"image\")\n            .attr(\"xlink:href\", imageUrl)\n            .attr(\"width\", 58)\n            .attr(\"height\", 58)\n            .attr(\"preserveAspectRatio\", \"xMidYMid slice\");\n        }\n        targetElement\n          .attr(\"r\", 30)\n          .attr(\"fill\", `url(#pattern-${node.id})`)\n          .attr(\"stroke\", \"#000\") // 设置边框颜色\n          .attr(\"stroke-width\", 2); // 设置边框宽度;\n  \n      },\n      initThumbnail() {\n        const thumbnail = d3.select(this.$refs.thumbnail);\n        thumbnail\n          .attr(\"width\", this.thumbnailWidth)\n          .attr(\"height\", this.thumbnailHeight)\n          .attr(\"viewBox\", `0 0 ${this.svgWidth} ${this.svgHeight}`)\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"position: absolute; bottom: 20px; left: 20px; border: 1px solid #ccc; background: #fff;\");\n      },\n      updateThumbnail() {\n        const that = this;\n        const thumbnail = d3.select(that.$refs.thumbnail);\n        thumbnail.selectAll(\"*\").remove();\n        const container = thumbnail.append(\"g\")\n          .attr(\"transform\", `scale(${that.thumbnailWidth / that.svgWidth}, ${that.thumbnailHeight / that.svgHeight})`);\n  \n        // Clone legend and link nodes\n        const legendNode = d3.select(that.$refs.dag).select(\"g.nodes\").node().cloneNode(true);\n        const linkNode = d3.select(that.$refs.dag).select(\"g.link\").node().cloneNode(true);\n        container.append(() => legendNode);\n        container.append(() => linkNode);\n  \n      },\n  \n      initGraph(data) {\n        const that = this;\n        const width = that.svgWidth;\n        const height = that.svgHeight;\n        const recall = data[\"metric\"]['recall'];\n        const links = data.links.map(d => ({ ...d }));\n        const nodes = data.nodes.map(d => ({ ...d }));\n  \n        // 在这里获取 links value 中的最大值和最小值\n        const val = links.map(d => d.value);\n        const minVal = Math.min(...val);\n        const maxVal = Math.max(...val);\n  \n        // 定义归一化函数\n        // 定义归一化函数，确保最小值不为 0\n        const normalize = (value) => {\n          const normalizedValue = (value - minVal) / (maxVal - minVal);\n          // 将归一化值范围调整为 [a, 1]，其中 a 为略大于 0 的数值，例如 0.1\n          const a = 0.1;\n          return 10*(normalizedValue * (1 - a) + a);\n        };\n  \n        const simulation = d3.forceSimulation(nodes)\n          .force(\"link\", d3.forceLink(links).id(d => d.id))\n          // .distance(d => normalize(d.value)/100000))\n          .force(\"charge\", d3.forceManyBody().strength(-10))\n          .force(\"center\", d3.forceCenter(width / 2, height / 2).strength(0.3))\n          // .force(\"radial\", d3.forceRadial(500, width / 2, height / 2).strength(0.8))\n          // .force(\"x\", d3.forceX(width / 2).strength(0.05))\n          // .force(\"y\", d3.forceY(height / 2).strength(0.05))\n          .velocityDecay(this.velocityDecay)\n          .on(\"tick\", ticked);\n  \n        const svg = d3.select(this.$refs.dag);\n        svg.selectAll(\"*\").remove();\n  \n        svg.attr(\"viewBox\", `0 0 ${width} ${height}`)\n          .attr(\"width\", \"100%\")\n          .attr(\"height\", \"100%\")\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"max-width: 100%; height: auto;\")\n          .call(d3.zoom().scaleExtent([0.5, 8]).on(\"zoom\", zoomed));\n  \n        const colorMap = d3.scaleOrdinal()\n          .range(['#FF0000', '#A4D3EE', '#FF7F50', '#32CD32']);\n          const groupColorMap = {\n            0: \"#FF0000\",\n            1: \"#A4D3EE\",\n            2: \"#32CD32\",\n            3: \"#FF7F50\",\n          };\n  \n        const container = svg.append(\"g\");\n        const link = container.append(\"g\")\n          .attr(\"class\", \"link\")\n          .attr(\"stroke\", \"#999\")\n          .attr(\"stroke-opacity\", 0.6)\n          .selectAll(\"line\")\n          .data(links)\n          .join(\"line\")\n          .attr(\"stroke-width\", d => Math.sqrt(normalize(d.value)))\n          .attr(\"marker-end\", \"url(#arrowhead)\")\n          .attr(\"fill\", d => groupColorMap[d.group]);\n  \n        const border = container.append(\"g\")\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 20;\n            } else if (v.group === 3) {\n              return 15;\n            } else if (v.group === 2) {\n              return 15;\n            } else {\n              return 12.5;\n            }\n          })\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"none\")\n          .attr(\"stroke-width\", 2);\n  \n        const node = container.append(\"g\")\n          .attr(\"class\", \"nodes\")\n          .attr(\"id\", `node-class`)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"stroke-width\", 0.2)\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 18;\n            } else if (v.group === 3) {\n              return 13;\n            } else if (v.group === 2) {\n              return 13;\n            } else {\n              return 10.5;\n            }\n          })\n          .attr(\"fill\", d => groupColorMap[d.group])\n          .call(d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n  \n        const labels = container.append(\"g\")\n          .attr(\"class\", \"labels\")\n          .selectAll(\"text\")\n          .data(nodes)\n          .join(\"text\")\n          .attr(\"dx\", 6)\n          .attr(\"dy\", \".35em\")\n          .style(\"font-size\", \"12px\")  // 设置字体大小\n          .attr(\"stroke\", \"white\")\n          .attr(\"paint-order\", \"stroke\")\n          .text(d => {\n            if (d.group === 2 || d.group === 3) {\n              return `${d.id}`;\n            } else {\n              return \"\";\n            }\n          });\n  \n        node.on(\"mouseover\", function (event, d) {\n          border.attr(\"stroke\", (b) => b.id === d.id ? \"#6096E6\" : \"none\");\n        })\n          .on(\"mouseout\", function (event, d) {\n            border.attr(\"stroke\", \"none\");\n          });\n  \n        node.on(\"click\", function (event, d) {\n          const existingBox = document.querySelector('.option-box');\n          if (existingBox) {\n            if (parseInt(existingBox.dataset.nodeId) === parseInt(d.id)) {\n              existingBox.remove();\n              return;\n            }\n            existingBox.remove();\n          }\n          const options = d3.select(\"body\").append(\"div\")\n            .attr(\"class\", \"option-box\")\n            .attr(\"data-node-id\", d.id)\n            .style(\"position\", \"absolute\")\n            .style(\"left\", `${event.pageX + 10}px`)\n            .style(\"top\", `${event.pageY + 10}px`)\n            .style(\"display\", \"flex\")\n            .style(\"gap\", \"8px\")\n            .style(\"border\", \"1px solid #7F7F7F\")\n            .style(\"background-color\", \"#F7F7F7\")\n            .style(\"width\", \"86px\")\n            .style(\"height\", \"25px\")\n            .style(\"padding\", \"2.5px 0\")\n            .style(\"padding-left\", \"8px\")\n            .style(\"border-radius\", \"8px\")\n            .style(\"align-items\", \"center\")\n            .style(\"z-index\", 1000);\n          options.append(\"div\")\n            .text(\"+\")\n            .style(\"font-size\", \"20px\")\n            .style(\"color\", \"#679D43\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .on(\"click\", () => console.log(\"Plus clicked\", d));\n          options.append(\"div\")\n            .text(\"-\")\n            .text(\"-\")\n            .style(\"font-size\", \"20px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => console.log(\"Minus clicked\"));\n          options.append(\"div\")\n            .text(\"A\")\n            .style(\"font-size\", \"14px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => that.convertToImage(event, d));\n  \n          d3.select(\"body\").on(\"click\", function (event) {\n            if (!event.target.closest('.option-box') && !event.target.closest('circle')) {\n              d3.selectAll('.option-box').remove();\n            }\n          });\n  \n          event.stopPropagation();\n        });\n  \n        node.append(\"title\")\n          .text(d => `ID: ${d.id}, Distance: ${d.distance}`);\n  \n        svg.append(\"text\")\n          .attr(\"transform\", `translate(60, 50)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 15)\n          .text(`Recall: ${recall}`);\n  \n        const legend = svg.append(\"g\")\n          .attr(\"transform\", `translate(60, 60)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 10);\n  \n        const uniqueGroups = [...new Set(nodes.map(d => d.group))];\n        const legendItems = legend.selectAll(\"g\")\n          .data(uniqueGroups)\n          .enter().append(\"g\")\n          .attr(\"transform\", (d, i) => `translate(0,${i * 20})`);\n        legendItems.append(\"rect\")\n          .attr(\"width\", 18)\n          .attr(\"height\", 18)\n          .attr(\"fill\", d => groupColorMap[d]);\n  \n        legendItems.append(\"text\")\n          .attr(\"x\", 24)\n          .attr(\"y\", 9)\n          .attr(\"dy\", \"0.35em\")\n          .text(d => {\n                if (d === 0) {\n                  return \"start node\";\n                } else if (d === 1) {\n                  return \"normal node\";\n                } else if (d === 2) {\n                  return \"gt&search intersection\";\n                } else if (d === 3) {\n                  return \"search other\";\n                }\n              });\n  \n        function ticked() {\n          link\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y);\n          node\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n          border\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n  \n          labels\n            .attr(\"x\", d => d.x + 2)\n            .attr(\"y\", d => d.y + 0.35); // 这里设置文本的位置\n  \n          that.updateThumbnail();\n        }\n  \n        function dragstarted(event) {\n          if (!event.active) simulation.alphaTarget(0.2).restart();\n          event.subject.fx = event.subject.x;\n          event.subject.fy = event.subject.y;\n        }\n  \n        function dragged(event) {\n          event.subject.fx = event.x;\n          event.subject.fy = event.y;\n        }\n  \n        function dragended(event) {\n          if (!event.active) simulation.alphaTarget(0);\n          event.subject.fx = null;\n          event.subject.fy = null;\n        }\n  \n        function zoomed(event) {\n          container.attr(\"transform\", event.transform);\n          that.updateThumbnail();\n        }\n  \n      },\n    },\n    computed: {\n      ...mapState({\n        dataNodelink: \"dataNodeLink\",\n        retrievalSet: \"retrievalSet\",\n        datasetName: \"datasetName\",\n        modelName: \"modelName\",\n        retrievalInfo: \"retrievalInfo\",\n        isDone: \"isDone\"\n      }),\n    },\n    watch: {\n  \n      // dataNodelink(newVal, oldVal) {\n      //   console.log(\"可以实现更新\",newVal);\n      //   if (newVal !== oldVal) {\n  \n      //   }\n      // }\n  \n    }\n  };\n  </script>\n  \n  <style scoped lang=\"scss\">\n  .node-link-main {\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n    position: relative;\n  \n    .dag-svg {\n      height: 100%;\n      width: 100%;\n    }\n  \n    .thumbnail-svg {\n      position: absolute;\n      bottom: 20px;\n      left: 20px;\n      border: 1px solid #ccc;\n      background: #fff;\n    }\n  }\n  \n  .option-box {\n    border: 1px solid #F7F7F7;\n    background-color: #F7F7F7;\n    padding: 5px;\n    position: absolute;\n    z-index: 1000;\n  \n    div {\n      margin: 2px 0;\n      cursor: pointer;\n    }\n  \n    div:hover {\n      background-color: #f0f0f0;\n    }\n  }\n  \n  .option-button {\n    padding: 5px 10px;\n    border: 1px solid #000;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: #f0f0f0;\n    font-size: 14px;\n    font-family: Arial, sans-serif;\n    color: red;\n  }\n  \n  .option-button:hover {\n    background-color: #e0e0e0;\n  }\n  </style><template>\n    <div class=\"node-link-main\">\n      <svg ref=\"dag\" class=\"dag-svg\"></svg>\n      <svg ref=\"thumbnail\" class=\"thumbnail-svg\"></svg>\n    </div>\n  </template>\n  \n  <script>\n  import * as d3 from \"d3\";\n  import { mapState } from \"vuex\";\n  import api from \"@/api/data\";\n  \n  export default {\n    name: \"NodeLinkView\",\n    components: {},\n    data() {\n      return {\n        nodelinkdata: {},\n        svgWidth: 0,  // 页面的宽度\n        svgHeight: 0,   // 页面高度\n        velocityDecay: 0.6,\n        thumbnailWidth: 0, // 缩略图宽度\n        thumbnailHeight: 0, // 缩略图高度\n      };\n    },\n    mounted() {\n      this.getViewSize();\n      this.nodelinkdata = this.$store.state.dataNodeLink;\n      console.log(\"请输出 link data 来看一下连接线的 data\",this.nodelinkdata);\n      this.initGraph(this.nodelinkdata);\n    },\n    methods: {\n      getViewSize() {\n        const dag = this.$refs.dag;\n        this.svgHeight = dag.clientHeight;\n        this.svgWidth = dag.clientWidth;\n        this.thumbnailWidth = this.svgWidth / 5;  // 缩略图宽度和高度分别为整个svg 的1/5\n        this.thumbnailHeight = this.svgHeight / 5;\n        if (this.nodelinkdata.nodes) {\n          this.initGraph(this.nodelinkdata);\n          this.initThumbnail();\n        }\n      },\n      async convertToImage(event, node) {\n        const res = await api.getImageUrl({ \"datasetName\": this.$store.state.datasetName, \"nodeId\": node.id });\n        const imageUrl = res[\"data\"][\"imageUrl\"];\n        const targetElement = d3.select(event.target);\n        const targetBBox = targetElement.node().getBBox();\n        const targetWidth = targetBBox.width;\n        const targetHeight = targetBBox.height;\n        const patternId = `pattern-${node.id}`;\n        let pattern = d3.select(`#${patternId}`);\n        if (pattern.empty()) {\n          const svg = d3.select(`#node-class`);\n          let defs = svg.select(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          if (defs.empty()) {\n            defs = svg.append(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          }\n          const pattern = defs.append(\"pattern\")\n            .attr(\"id\", patternId)\n            .attr(\"patternUnits\", \"objectBoundingBox\")\n            .attr(\"width\", 1) // 宽度为 1 表示相对于目标元素的宽度\n            .attr(\"height\", 1) // 高度为 1 表示相对于目标元素的高度\n            .attr(\"patternTransform\", \"translate(1, 1)\"); // 向右和向下移动 10 个单位\n  \n          const image = pattern.append(\"image\")\n            .attr(\"xlink:href\", imageUrl)\n            .attr(\"width\", 58)\n            .attr(\"height\", 58)\n            .attr(\"preserveAspectRatio\", \"xMidYMid slice\");\n        }\n        targetElement\n          .attr(\"r\", 30)\n          .attr(\"fill\", `url(#pattern-${node.id})`)\n          .attr(\"stroke\", \"#000\") // 设置边框颜色\n          .attr(\"stroke-width\", 2); // 设置边框宽度;\n  \n      },\n      initThumbnail() {\n        const thumbnail = d3.select(this.$refs.thumbnail);\n        thumbnail\n          .attr(\"width\", this.thumbnailWidth)\n          .attr(\"height\", this.thumbnailHeight)\n          .attr(\"viewBox\", `0 0 ${this.svgWidth} ${this.svgHeight}`)\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"position: absolute; bottom: 20px; left: 20px; border: 1px solid #ccc; background: #fff;\");\n      },\n      updateThumbnail() {\n        const that = this;\n        const thumbnail = d3.select(that.$refs.thumbnail);\n        thumbnail.selectAll(\"*\").remove();\n        const container = thumbnail.append(\"g\")\n          .attr(\"transform\", `scale(${that.thumbnailWidth / that.svgWidth}, ${that.thumbnailHeight / that.svgHeight})`);\n  \n        // Clone legend and link nodes\n        const legendNode = d3.select(that.$refs.dag).select(\"g.nodes\").node().cloneNode(true);\n        const linkNode = d3.select(that.$refs.dag).select(\"g.link\").node().cloneNode(true);\n        container.append(() => legendNode);\n        container.append(() => linkNode);\n  \n      },\n  \n      initGraph(data) {\n        const that = this;\n        const width = that.svgWidth;\n        const height = that.svgHeight;\n        const recall = data[\"metric\"]['recall'];\n        const links = data.links.map(d => ({ ...d }));\n        const nodes = data.nodes.map(d => ({ ...d }));\n  \n        // 在这里获取 links value 中的最大值和最小值\n        const val = links.map(d => d.value);\n        const minVal = Math.min(...val);\n        const maxVal = Math.max(...val);\n  \n        // 定义归一化函数\n        // 定义归一化函数，确保最小值不为 0\n        const normalize = (value) => {\n          const normalizedValue = (value - minVal) / (maxVal - minVal);\n          // 将归一化值范围调整为 [a, 1]，其中 a 为略大于 0 的数值，例如 0.1\n          const a = 0.1;\n          return 10*(normalizedValue * (1 - a) + a);\n        };\n  \n        const simulation = d3.forceSimulation(nodes)\n          .force(\"link\", d3.forceLink(links).id(d => d.id))\n          // .distance(d => normalize(d.value)/100000))\n          .force(\"charge\", d3.forceManyBody().strength(-10))\n          .force(\"center\", d3.forceCenter(width / 2, height / 2).strength(0.3))\n          // .force(\"radial\", d3.forceRadial(500, width / 2, height / 2).strength(0.8))\n          // .force(\"x\", d3.forceX(width / 2).strength(0.05))\n          // .force(\"y\", d3.forceY(height / 2).strength(0.05))\n          .velocityDecay(this.velocityDecay)\n          .on(\"tick\", ticked);\n  \n        const svg = d3.select(this.$refs.dag);\n        svg.selectAll(\"*\").remove();\n  \n        svg.attr(\"viewBox\", `0 0 ${width} ${height}`)\n          .attr(\"width\", \"100%\")\n          .attr(\"height\", \"100%\")\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"max-width: 100%; height: auto;\")\n          .call(d3.zoom().scaleExtent([0.5, 8]).on(\"zoom\", zoomed));\n  \n        const colorMap = d3.scaleOrdinal()\n          .range(['#FF0000', '#A4D3EE', '#FF7F50', '#32CD32']);\n          const groupColorMap = {\n            0: \"#FF0000\",\n            1: \"#A4D3EE\",\n            2: \"#32CD32\",\n            3: \"#FF7F50\",\n          };\n  \n        const container = svg.append(\"g\");\n        const link = container.append(\"g\")\n          .attr(\"class\", \"link\")\n          .attr(\"stroke\", \"#999\")\n          .attr(\"stroke-opacity\", 0.6)\n          .selectAll(\"line\")\n          .data(links)\n          .join(\"line\")\n          .attr(\"stroke-width\", d => Math.sqrt(normalize(d.value)))\n          .attr(\"marker-end\", \"url(#arrowhead)\")\n          .attr(\"fill\", d => groupColorMap[d.group]);\n  \n        const border = container.append(\"g\")\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 20;\n            } else if (v.group === 3) {\n              return 15;\n            } else if (v.group === 2) {\n              return 15;\n            } else {\n              return 12.5;\n            }\n          })\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"none\")\n          .attr(\"stroke-width\", 2);\n  \n        const node = container.append(\"g\")\n          .attr(\"class\", \"nodes\")\n          .attr(\"id\", `node-class`)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"stroke-width\", 0.2)\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 18;\n            } else if (v.group === 3) {\n              return 13;\n            } else if (v.group === 2) {\n              return 13;\n            } else {\n              return 10.5;\n            }\n          })\n          .attr(\"fill\", d => groupColorMap[d.group])\n          .call(d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n  \n        const labels = container.append(\"g\")\n          .attr(\"class\", \"labels\")\n          .selectAll(\"text\")\n          .data(nodes)\n          .join(\"text\")\n          .attr(\"dx\", 6)\n          .attr(\"dy\", \".35em\")\n          .style(\"font-size\", \"12px\")  // 设置字体大小\n          .attr(\"stroke\", \"white\")\n          .attr(\"paint-order\", \"stroke\")\n          .text(d => {\n            if (d.group === 2 || d.group === 3) {\n              return `${d.id}`;\n            } else {\n              return \"\";\n            }\n          });\n  \n        node.on(\"mouseover\", function (event, d) {\n          border.attr(\"stroke\", (b) => b.id === d.id ? \"#6096E6\" : \"none\");\n        })\n          .on(\"mouseout\", function (event, d) {\n            border.attr(\"stroke\", \"none\");\n          });\n  \n        node.on(\"click\", function (event, d) {\n          const existingBox = document.querySelector('.option-box');\n          if (existingBox) {\n            if (parseInt(existingBox.dataset.nodeId) === parseInt(d.id)) {\n              existingBox.remove();\n              return;\n            }\n            existingBox.remove();\n          }\n          const options = d3.select(\"body\").append(\"div\")\n            .attr(\"class\", \"option-box\")\n            .attr(\"data-node-id\", d.id)\n            .style(\"position\", \"absolute\")\n            .style(\"left\", `${event.pageX + 10}px`)\n            .style(\"top\", `${event.pageY + 10}px`)\n            .style(\"display\", \"flex\")\n            .style(\"gap\", \"8px\")\n            .style(\"border\", \"1px solid #7F7F7F\")\n            .style(\"background-color\", \"#F7F7F7\")\n            .style(\"width\", \"86px\")\n            .style(\"height\", \"25px\")\n            .style(\"padding\", \"2.5px 0\")\n            .style(\"padding-left\", \"8px\")\n            .style(\"border-radius\", \"8px\")\n            .style(\"align-items\", \"center\")\n            .style(\"z-index\", 1000);\n          options.append(\"div\")\n            .text(\"+\")\n            .style(\"font-size\", \"20px\")\n            .style(\"color\", \"#679D43\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .on(\"click\", () => console.log(\"Plus clicked\", d));\n          options.append(\"div\")\n            .text(\"-\")\n            .text(\"-\")\n            .style(\"font-size\", \"20px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => console.log(\"Minus clicked\"));\n          options.append(\"div\")\n            .text(\"A\")\n            .style(\"font-size\", \"14px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => that.convertToImage(event, d));\n  \n          d3.select(\"body\").on(\"click\", function (event) {\n            if (!event.target.closest('.option-box') && !event.target.closest('circle')) {\n              d3.selectAll('.option-box').remove();\n            }\n          });\n  \n          event.stopPropagation();\n        });\n  \n        node.append(\"title\")\n          .text(d => `ID: ${d.id}, Distance: ${d.distance}`);\n  \n        svg.append(\"text\")\n          .attr(\"transform\", `translate(60, 50)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 15)\n          .text(`Recall: ${recall}`);\n  \n        const legend = svg.append(\"g\")\n          .attr(\"transform\", `translate(60, 60)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 10);\n  \n        const uniqueGroups = [...new Set(nodes.map(d => d.group))];\n        const legendItems = legend.selectAll(\"g\")\n          .data(uniqueGroups)\n          .enter().append(\"g\")\n          .attr(\"transform\", (d, i) => `translate(0,${i * 20})`);\n        legendItems.append(\"rect\")\n          .attr(\"width\", 18)\n          .attr(\"height\", 18)\n          .attr(\"fill\", d => groupColorMap[d]);\n  \n        legendItems.append(\"text\")\n          .attr(\"x\", 24)\n          .attr(\"y\", 9)\n          .attr(\"dy\", \"0.35em\")\n          .text(d => {\n                if (d === 0) {\n                  return \"start node\";\n                } else if (d === 1) {\n                  return \"normal node\";\n                } else if (d === 2) {\n                  return \"gt&search intersection\";\n                } else if (d === 3) {\n                  return \"search other\";\n                }\n              });\n  \n        function ticked() {\n          link\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y);\n          node\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n          border\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n  \n          labels\n            .attr(\"x\", d => d.x + 2)\n            .attr(\"y\", d => d.y + 0.35); // 这里设置文本的位置\n  \n          that.updateThumbnail();\n        }\n  \n        function dragstarted(event) {\n          if (!event.active) simulation.alphaTarget(0.2).restart();\n          event.subject.fx = event.subject.x;\n          event.subject.fy = event.subject.y;\n        }\n  \n        function dragged(event) {\n          event.subject.fx = event.x;\n          event.subject.fy = event.y;\n        }\n  \n        function dragended(event) {\n          if (!event.active) simulation.alphaTarget(0);\n          event.subject.fx = null;\n          event.subject.fy = null;\n        }\n  \n        function zoomed(event) {\n          container.attr(\"transform\", event.transform);\n          that.updateThumbnail();\n        }\n  \n      },\n    },\n    computed: {\n      ...mapState({\n        dataNodelink: \"dataNodeLink\",\n        retrievalSet: \"retrievalSet\",\n        datasetName: \"datasetName\",\n        modelName: \"modelName\",\n        retrievalInfo: \"retrievalInfo\",\n        isDone: \"isDone\"\n      }),\n    },\n    watch: {\n  \n      // dataNodelink(newVal, oldVal) {\n      //   console.log(\"可以实现更新\",newVal);\n      //   if (newVal !== oldVal) {\n  \n      //   }\n      // }\n  \n    }\n  };\n  </script>\n  \n  <style scoped lang=\"scss\">\n  .node-link-main {\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n    position: relative;\n  \n    .dag-svg {\n      height: 100%;\n      width: 100%;\n    }\n  \n    .thumbnail-svg {\n      position: absolute;\n      bottom: 20px;\n      left: 20px;\n      border: 1px solid #ccc;\n      background: #fff;\n    }\n  }\n  \n  .option-box {\n    border: 1px solid #F7F7F7;\n    background-color: #F7F7F7;\n    padding: 5px;\n    position: absolute;\n    z-index: 1000;\n  \n    div {\n      margin: 2px 0;\n      cursor: pointer;\n    }\n  \n    div:hover {\n      background-color: #f0f0f0;\n    }\n  }\n  \n  .option-button {\n    padding: 5px 10px;\n    border: 1px solid #000;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: #f0f0f0;\n    font-size: 14px;\n    font-family: Arial, sans-serif;\n    color: red;\n  }\n  \n  .option-button:hover {\n    background-color: #e0e0e0;\n  }\n  </style><template>\n    <div class=\"node-link-main\">\n      <svg ref=\"dag\" class=\"dag-svg\"></svg>\n      <svg ref=\"thumbnail\" class=\"thumbnail-svg\"></svg>\n    </div>\n  </template>\n  \n  <script>\n  import * as d3 from \"d3\";\n  import { mapState } from \"vuex\";\n  import api from \"@/api/data\";\n  \n  export default {\n    name: \"NodeLinkView\",\n    components: {},\n    data() {\n      return {\n        nodelinkdata: {},\n        svgWidth: 0,  // 页面的宽度\n        svgHeight: 0,   // 页面高度\n        velocityDecay: 0.6,\n        thumbnailWidth: 0, // 缩略图宽度\n        thumbnailHeight: 0, // 缩略图高度\n      };\n    },\n    mounted() {\n      this.getViewSize();\n      this.nodelinkdata = this.$store.state.dataNodeLink;\n      console.log(\"请输出 link data 来看一下连接线的 data\",this.nodelinkdata);\n      this.initGraph(this.nodelinkdata);\n    },\n    methods: {\n      getViewSize() {\n        const dag = this.$refs.dag;\n        this.svgHeight = dag.clientHeight;\n        this.svgWidth = dag.clientWidth;\n        this.thumbnailWidth = this.svgWidth / 5;  // 缩略图宽度和高度分别为整个svg 的1/5\n        this.thumbnailHeight = this.svgHeight / 5;\n        if (this.nodelinkdata.nodes) {\n          this.initGraph(this.nodelinkdata);\n          this.initThumbnail();\n        }\n      },\n      async convertToImage(event, node) {\n        const res = await api.getImageUrl({ \"datasetName\": this.$store.state.datasetName, \"nodeId\": node.id });\n        const imageUrl = res[\"data\"][\"imageUrl\"];\n        const targetElement = d3.select(event.target);\n        const targetBBox = targetElement.node().getBBox();\n        const targetWidth = targetBBox.width;\n        const targetHeight = targetBBox.height;\n        const patternId = `pattern-${node.id}`;\n        let pattern = d3.select(`#${patternId}`);\n        if (pattern.empty()) {\n          const svg = d3.select(`#node-class`);\n          let defs = svg.select(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          if (defs.empty()) {\n            defs = svg.append(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          }\n          const pattern = defs.append(\"pattern\")\n            .attr(\"id\", patternId)\n            .attr(\"patternUnits\", \"objectBoundingBox\")\n            .attr(\"width\", 1) // 宽度为 1 表示相对于目标元素的宽度\n            .attr(\"height\", 1) // 高度为 1 表示相对于目标元素的高度\n            .attr(\"patternTransform\", \"translate(1, 1)\"); // 向右和向下移动 10 个单位\n  \n          const image = pattern.append(\"image\")\n            .attr(\"xlink:href\", imageUrl)\n            .attr(\"width\", 58)\n            .attr(\"height\", 58)\n            .attr(\"preserveAspectRatio\", \"xMidYMid slice\");\n        }\n        targetElement\n          .attr(\"r\", 30)\n          .attr(\"fill\", `url(#pattern-${node.id})`)\n          .attr(\"stroke\", \"#000\") // 设置边框颜色\n          .attr(\"stroke-width\", 2); // 设置边框宽度;\n  \n      },\n      initThumbnail() {\n        const thumbnail = d3.select(this.$refs.thumbnail);\n        thumbnail\n          .attr(\"width\", this.thumbnailWidth)\n          .attr(\"height\", this.thumbnailHeight)\n          .attr(\"viewBox\", `0 0 ${this.svgWidth} ${this.svgHeight}`)\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"position: absolute; bottom: 20px; left: 20px; border: 1px solid #ccc; background: #fff;\");\n      },\n      updateThumbnail() {\n        const that = this;\n        const thumbnail = d3.select(that.$refs.thumbnail);\n        thumbnail.selectAll(\"*\").remove();\n        const container = thumbnail.append(\"g\")\n          .attr(\"transform\", `scale(${that.thumbnailWidth / that.svgWidth}, ${that.thumbnailHeight / that.svgHeight})`);\n  \n        // Clone legend and link nodes\n        const legendNode = d3.select(that.$refs.dag).select(\"g.nodes\").node().cloneNode(true);\n        const linkNode = d3.select(that.$refs.dag).select(\"g.link\").node().cloneNode(true);\n        container.append(() => legendNode);\n        container.append(() => linkNode);\n  \n      },\n  \n      initGraph(data) {\n        const that = this;\n        const width = that.svgWidth;\n        const height = that.svgHeight;\n        const recall = data[\"metric\"]['recall'];\n        const links = data.links.map(d => ({ ...d }));\n        const nodes = data.nodes.map(d => ({ ...d }));\n  \n        // 在这里获取 links value 中的最大值和最小值\n        const val = links.map(d => d.value);\n        const minVal = Math.min(...val);\n        const maxVal = Math.max(...val);\n  \n        // 定义归一化函数\n        // 定义归一化函数，确保最小值不为 0\n        const normalize = (value) => {\n          const normalizedValue = (value - minVal) / (maxVal - minVal);\n          // 将归一化值范围调整为 [a, 1]，其中 a 为略大于 0 的数值，例如 0.1\n          const a = 0.1;\n          return 10*(normalizedValue * (1 - a) + a);\n        };\n  \n        const simulation = d3.forceSimulation(nodes)\n          .force(\"link\", d3.forceLink(links).id(d => d.id))\n          // .distance(d => normalize(d.value)/100000))\n          .force(\"charge\", d3.forceManyBody().strength(-10))\n          .force(\"center\", d3.forceCenter(width / 2, height / 2).strength(0.3))\n          // .force(\"radial\", d3.forceRadial(500, width / 2, height / 2).strength(0.8))\n          // .force(\"x\", d3.forceX(width / 2).strength(0.05))\n          // .force(\"y\", d3.forceY(height / 2).strength(0.05))\n          .velocityDecay(this.velocityDecay)\n          .on(\"tick\", ticked);\n  \n        const svg = d3.select(this.$refs.dag);\n        svg.selectAll(\"*\").remove();\n  \n        svg.attr(\"viewBox\", `0 0 ${width} ${height}`)\n          .attr(\"width\", \"100%\")\n          .attr(\"height\", \"100%\")\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"max-width: 100%; height: auto;\")\n          .call(d3.zoom().scaleExtent([0.5, 8]).on(\"zoom\", zoomed));\n  \n        const colorMap = d3.scaleOrdinal()\n          .range(['#FF0000', '#A4D3EE', '#FF7F50', '#32CD32']);\n          const groupColorMap = {\n            0: \"#FF0000\",\n            1: \"#A4D3EE\",\n            2: \"#32CD32\",\n            3: \"#FF7F50\",\n          };\n  \n        const container = svg.append(\"g\");\n        const link = container.append(\"g\")\n          .attr(\"class\", \"link\")\n          .attr(\"stroke\", \"#999\")\n          .attr(\"stroke-opacity\", 0.6)\n          .selectAll(\"line\")\n          .data(links)\n          .join(\"line\")\n          .attr(\"stroke-width\", d => Math.sqrt(normalize(d.value)))\n          .attr(\"marker-end\", \"url(#arrowhead)\")\n          .attr(\"fill\", d => groupColorMap[d.group]);\n  \n        const border = container.append(\"g\")\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 20;\n            } else if (v.group === 3) {\n              return 15;\n            } else if (v.group === 2) {\n              return 15;\n            } else {\n              return 12.5;\n            }\n          })\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"none\")\n          .attr(\"stroke-width\", 2);\n  \n        const node = container.append(\"g\")\n          .attr(\"class\", \"nodes\")\n          .attr(\"id\", `node-class`)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"stroke-width\", 0.2)\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 18;\n            } else if (v.group === 3) {\n              return 13;\n            } else if (v.group === 2) {\n              return 13;\n            } else {\n              return 10.5;\n            }\n          })\n          .attr(\"fill\", d => groupColorMap[d.group])\n          .call(d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n  \n        const labels = container.append(\"g\")\n          .attr(\"class\", \"labels\")\n          .selectAll(\"text\")\n          .data(nodes)\n          .join(\"text\")\n          .attr(\"dx\", 6)\n          .attr(\"dy\", \".35em\")\n          .style(\"font-size\", \"12px\")  // 设置字体大小\n          .attr(\"stroke\", \"white\")\n          .attr(\"paint-order\", \"stroke\")\n          .text(d => {\n            if (d.group === 2 || d.group === 3) {\n              return `${d.id}`;\n            } else {\n              return \"\";\n            }\n          });\n  \n        node.on(\"mouseover\", function (event, d) {\n          border.attr(\"stroke\", (b) => b.id === d.id ? \"#6096E6\" : \"none\");\n        })\n          .on(\"mouseout\", function (event, d) {\n            border.attr(\"stroke\", \"none\");\n          });\n  \n        node.on(\"click\", function (event, d) {\n          const existingBox = document.querySelector('.option-box');\n          if (existingBox) {\n            if (parseInt(existingBox.dataset.nodeId) === parseInt(d.id)) {\n              existingBox.remove();\n              return;\n            }\n            existingBox.remove();\n          }\n          const options = d3.select(\"body\").append(\"div\")\n            .attr(\"class\", \"option-box\")\n            .attr(\"data-node-id\", d.id)\n            .style(\"position\", \"absolute\")\n            .style(\"left\", `${event.pageX + 10}px`)\n            .style(\"top\", `${event.pageY + 10}px`)\n            .style(\"display\", \"flex\")\n            .style(\"gap\", \"8px\")\n            .style(\"border\", \"1px solid #7F7F7F\")\n            .style(\"background-color\", \"#F7F7F7\")\n            .style(\"width\", \"86px\")\n            .style(\"height\", \"25px\")\n            .style(\"padding\", \"2.5px 0\")\n            .style(\"padding-left\", \"8px\")\n            .style(\"border-radius\", \"8px\")\n            .style(\"align-items\", \"center\")\n            .style(\"z-index\", 1000);\n          options.append(\"div\")\n            .text(\"+\")\n            .style(\"font-size\", \"20px\")\n            .style(\"color\", \"#679D43\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .on(\"click\", () => console.log(\"Plus clicked\", d));\n          options.append(\"div\")\n            .text(\"-\")\n            .text(\"-\")\n            .style(\"font-size\", \"20px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => console.log(\"Minus clicked\"));\n          options.append(\"div\")\n            .text(\"A\")\n            .style(\"font-size\", \"14px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => that.convertToImage(event, d));\n  \n          d3.select(\"body\").on(\"click\", function (event) {\n            if (!event.target.closest('.option-box') && !event.target.closest('circle')) {\n              d3.selectAll('.option-box').remove();\n            }\n          });\n  \n          event.stopPropagation();\n        });\n  \n        node.append(\"title\")\n          .text(d => `ID: ${d.id}, Distance: ${d.distance}`);\n  \n        svg.append(\"text\")\n          .attr(\"transform\", `translate(60, 50)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 15)\n          .text(`Recall: ${recall}`);\n  \n        const legend = svg.append(\"g\")\n          .attr(\"transform\", `translate(60, 60)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 10);\n  \n        const uniqueGroups = [...new Set(nodes.map(d => d.group))];\n        const legendItems = legend.selectAll(\"g\")\n          .data(uniqueGroups)\n          .enter().append(\"g\")\n          .attr(\"transform\", (d, i) => `translate(0,${i * 20})`);\n        legendItems.append(\"rect\")\n          .attr(\"width\", 18)\n          .attr(\"height\", 18)\n          .attr(\"fill\", d => groupColorMap[d]);\n  \n        legendItems.append(\"text\")\n          .attr(\"x\", 24)\n          .attr(\"y\", 9)\n          .attr(\"dy\", \"0.35em\")\n          .text(d => {\n                if (d === 0) {\n                  return \"start node\";\n                } else if (d === 1) {\n                  return \"normal node\";\n                } else if (d === 2) {\n                  return \"gt&search intersection\";\n                } else if (d === 3) {\n                  return \"search other\";\n                }\n              });\n  \n        function ticked() {\n          link\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y);\n          node\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n          border\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n  \n          labels\n            .attr(\"x\", d => d.x + 2)\n            .attr(\"y\", d => d.y + 0.35); // 这里设置文本的位置\n  \n          that.updateThumbnail();\n        }\n  \n        function dragstarted(event) {\n          if (!event.active) simulation.alphaTarget(0.2).restart();\n          event.subject.fx = event.subject.x;\n          event.subject.fy = event.subject.y;\n        }\n  \n        function dragged(event) {\n          event.subject.fx = event.x;\n          event.subject.fy = event.y;\n        }\n  \n        function dragended(event) {\n          if (!event.active) simulation.alphaTarget(0);\n          event.subject.fx = null;\n          event.subject.fy = null;\n        }\n  \n        function zoomed(event) {\n          container.attr(\"transform\", event.transform);\n          that.updateThumbnail();\n        }\n  \n      },\n    },\n    computed: {\n      ...mapState({\n        dataNodelink: \"dataNodeLink\",\n        retrievalSet: \"retrievalSet\",\n        datasetName: \"datasetName\",\n        modelName: \"modelName\",\n        retrievalInfo: \"retrievalInfo\",\n        isDone: \"isDone\"\n      }),\n    },\n    watch: {\n  \n      // dataNodelink(newVal, oldVal) {\n      //   console.log(\"可以实现更新\",newVal);\n      //   if (newVal !== oldVal) {\n  \n      //   }\n      // }\n  \n    }\n  };\n  </script>\n  \n  <style scoped lang=\"scss\">\n  .node-link-main {\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n    position: relative;\n  \n    .dag-svg {\n      height: 100%;\n      width: 100%;\n    }\n  \n    .thumbnail-svg {\n      position: absolute;\n      bottom: 20px;\n      left: 20px;\n      border: 1px solid #ccc;\n      background: #fff;\n    }\n  }\n  \n  .option-box {\n    border: 1px solid #F7F7F7;\n    background-color: #F7F7F7;\n    padding: 5px;\n    position: absolute;\n    z-index: 1000;\n  \n    div {\n      margin: 2px 0;\n      cursor: pointer;\n    }\n  \n    div:hover {\n      background-color: #f0f0f0;\n    }\n  }\n  \n  .option-button {\n    padding: 5px 10px;\n    border: 1px solid #000;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: #f0f0f0;\n    font-size: 14px;\n    font-family: Arial, sans-serif;\n    color: red;\n  }\n  \n  .option-button:hover {\n    background-color: #e0e0e0;\n  }\n  </style><template>\n    <div class=\"node-link-main\">\n      <svg ref=\"dag\" class=\"dag-svg\"></svg>\n      <svg ref=\"thumbnail\" class=\"thumbnail-svg\"></svg>\n    </div>\n  </template>\n  \n  <script>\n  import * as d3 from \"d3\";\n  import { mapState } from \"vuex\";\n  import api from \"@/api/data\";\n  \n  export default {\n    name: \"NodeLinkView\",\n    components: {},\n    data() {\n      return {\n        nodelinkdata: {},\n        svgWidth: 0,  // 页面的宽度\n        svgHeight: 0,   // 页面高度\n        velocityDecay: 0.6,\n        thumbnailWidth: 0, // 缩略图宽度\n        thumbnailHeight: 0, // 缩略图高度\n      };\n    },\n    mounted() {\n      this.getViewSize();\n      this.nodelinkdata = this.$store.state.dataNodeLink;\n      console.log(\"请输出 link data 来看一下连接线的 data\",this.nodelinkdata);\n      this.initGraph(this.nodelinkdata);\n    },\n    methods: {\n      getViewSize() {\n        const dag = this.$refs.dag;\n        this.svgHeight = dag.clientHeight;\n        this.svgWidth = dag.clientWidth;\n        this.thumbnailWidth = this.svgWidth / 5;  // 缩略图宽度和高度分别为整个svg 的1/5\n        this.thumbnailHeight = this.svgHeight / 5;\n        if (this.nodelinkdata.nodes) {\n          this.initGraph(this.nodelinkdata);\n          this.initThumbnail();\n        }\n      },\n      async convertToImage(event, node) {\n        const res = await api.getImageUrl({ \"datasetName\": this.$store.state.datasetName, \"nodeId\": node.id });\n        const imageUrl = res[\"data\"][\"imageUrl\"];\n        const targetElement = d3.select(event.target);\n        const targetBBox = targetElement.node().getBBox();\n        const targetWidth = targetBBox.width;\n        const targetHeight = targetBBox.height;\n        const patternId = `pattern-${node.id}`;\n        let pattern = d3.select(`#${patternId}`);\n        if (pattern.empty()) {\n          const svg = d3.select(`#node-class`);\n          let defs = svg.select(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          if (defs.empty()) {\n            defs = svg.append(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          }\n          const pattern = defs.append(\"pattern\")\n            .attr(\"id\", patternId)\n            .attr(\"patternUnits\", \"objectBoundingBox\")\n            .attr(\"width\", 1) // 宽度为 1 表示相对于目标元素的宽度\n            .attr(\"height\", 1) // 高度为 1 表示相对于目标元素的高度\n            .attr(\"patternTransform\", \"translate(1, 1)\"); // 向右和向下移动 10 个单位\n  \n          const image = pattern.append(\"image\")\n            .attr(\"xlink:href\", imageUrl)\n            .attr(\"width\", 58)\n            .attr(\"height\", 58)\n            .attr(\"preserveAspectRatio\", \"xMidYMid slice\");\n        }\n        targetElement\n          .attr(\"r\", 30)\n          .attr(\"fill\", `url(#pattern-${node.id})`)\n          .attr(\"stroke\", \"#000\") // 设置边框颜色\n          .attr(\"stroke-width\", 2); // 设置边框宽度;\n  \n      },\n      initThumbnail() {\n        const thumbnail = d3.select(this.$refs.thumbnail);\n        thumbnail\n          .attr(\"width\", this.thumbnailWidth)\n          .attr(\"height\", this.thumbnailHeight)\n          .attr(\"viewBox\", `0 0 ${this.svgWidth} ${this.svgHeight}`)\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"position: absolute; bottom: 20px; left: 20px; border: 1px solid #ccc; background: #fff;\");\n      },\n      updateThumbnail() {\n        const that = this;\n        const thumbnail = d3.select(that.$refs.thumbnail);\n        thumbnail.selectAll(\"*\").remove();\n        const container = thumbnail.append(\"g\")\n          .attr(\"transform\", `scale(${that.thumbnailWidth / that.svgWidth}, ${that.thumbnailHeight / that.svgHeight})`);\n  \n        // Clone legend and link nodes\n        const legendNode = d3.select(that.$refs.dag).select(\"g.nodes\").node().cloneNode(true);\n        const linkNode = d3.select(that.$refs.dag).select(\"g.link\").node().cloneNode(true);\n        container.append(() => legendNode);\n        container.append(() => linkNode);\n  \n      },\n  \n      initGraph(data) {\n        const that = this;\n        const width = that.svgWidth;\n        const height = that.svgHeight;\n        const recall = data[\"metric\"]['recall'];\n        const links = data.links.map(d => ({ ...d }));\n        const nodes = data.nodes.map(d => ({ ...d }));\n  \n        // 在这里获取 links value 中的最大值和最小值\n        const val = links.map(d => d.value);\n        const minVal = Math.min(...val);\n        const maxVal = Math.max(...val);\n  \n        // 定义归一化函数\n        // 定义归一化函数，确保最小值不为 0\n        const normalize = (value) => {\n          const normalizedValue = (value - minVal) / (maxVal - minVal);\n          // 将归一化值范围调整为 [a, 1]，其中 a 为略大于 0 的数值，例如 0.1\n          const a = 0.1;\n          return 10*(normalizedValue * (1 - a) + a);\n        };\n  \n        const simulation = d3.forceSimulation(nodes)\n          .force(\"link\", d3.forceLink(links).id(d => d.id))\n          // .distance(d => normalize(d.value)/100000))\n          .force(\"charge\", d3.forceManyBody().strength(-10))\n          .force(\"center\", d3.forceCenter(width / 2, height / 2).strength(0.3))\n          // .force(\"radial\", d3.forceRadial(500, width / 2, height / 2).strength(0.8))\n          // .force(\"x\", d3.forceX(width / 2).strength(0.05))\n          // .force(\"y\", d3.forceY(height / 2).strength(0.05))\n          .velocityDecay(this.velocityDecay)\n          .on(\"tick\", ticked);\n  \n        const svg = d3.select(this.$refs.dag);\n        svg.selectAll(\"*\").remove();\n  \n        svg.attr(\"viewBox\", `0 0 ${width} ${height}`)\n          .attr(\"width\", \"100%\")\n          .attr(\"height\", \"100%\")\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"max-width: 100%; height: auto;\")\n          .call(d3.zoom().scaleExtent([0.5, 8]).on(\"zoom\", zoomed));\n  \n        const colorMap = d3.scaleOrdinal()\n          .range(['#FF0000', '#A4D3EE', '#FF7F50', '#32CD32']);\n          const groupColorMap = {\n            0: \"#FF0000\",\n            1: \"#A4D3EE\",\n            2: \"#32CD32\",\n            3: \"#FF7F50\",\n          };\n  \n        const container = svg.append(\"g\");\n        const link = container.append(\"g\")\n          .attr(\"class\", \"link\")\n          .attr(\"stroke\", \"#999\")\n          .attr(\"stroke-opacity\", 0.6)\n          .selectAll(\"line\")\n          .data(links)\n          .join(\"line\")\n          .attr(\"stroke-width\", d => Math.sqrt(normalize(d.value)))\n          .attr(\"marker-end\", \"url(#arrowhead)\")\n          .attr(\"fill\", d => groupColorMap[d.group]);\n  \n        const border = container.append(\"g\")\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 20;\n            } else if (v.group === 3) {\n              return 15;\n            } else if (v.group === 2) {\n              return 15;\n            } else {\n              return 12.5;\n            }\n          })\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"none\")\n          .attr(\"stroke-width\", 2);\n  \n        const node = container.append(\"g\")\n          .attr(\"class\", \"nodes\")\n          .attr(\"id\", `node-class`)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"stroke-width\", 0.2)\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 18;\n            } else if (v.group === 3) {\n              return 13;\n            } else if (v.group === 2) {\n              return 13;\n            } else {\n              return 10.5;\n            }\n          })\n          .attr(\"fill\", d => groupColorMap[d.group])\n          .call(d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n  \n        const labels = container.append(\"g\")\n          .attr(\"class\", \"labels\")\n          .selectAll(\"text\")\n          .data(nodes)\n          .join(\"text\")\n          .attr(\"dx\", 6)\n          .attr(\"dy\", \".35em\")\n          .style(\"font-size\", \"12px\")  // 设置字体大小\n          .attr(\"stroke\", \"white\")\n          .attr(\"paint-order\", \"stroke\")\n          .text(d => {\n            if (d.group === 2 || d.group === 3) {\n              return `${d.id}`;\n            } else {\n              return \"\";\n            }\n          });\n  \n        node.on(\"mouseover\", function (event, d) {\n          border.attr(\"stroke\", (b) => b.id === d.id ? \"#6096E6\" : \"none\");\n        })\n          .on(\"mouseout\", function (event, d) {\n            border.attr(\"stroke\", \"none\");\n          });\n  \n        node.on(\"click\", function (event, d) {\n          const existingBox = document.querySelector('.option-box');\n          if (existingBox) {\n            if (parseInt(existingBox.dataset.nodeId) === parseInt(d.id)) {\n              existingBox.remove();\n              return;\n            }\n            existingBox.remove();\n          }\n          const options = d3.select(\"body\").append(\"div\")\n            .attr(\"class\", \"option-box\")\n            .attr(\"data-node-id\", d.id)\n            .style(\"position\", \"absolute\")\n            .style(\"left\", `${event.pageX + 10}px`)\n            .style(\"top\", `${event.pageY + 10}px`)\n            .style(\"display\", \"flex\")\n            .style(\"gap\", \"8px\")\n            .style(\"border\", \"1px solid #7F7F7F\")\n            .style(\"background-color\", \"#F7F7F7\")\n            .style(\"width\", \"86px\")\n            .style(\"height\", \"25px\")\n            .style(\"padding\", \"2.5px 0\")\n            .style(\"padding-left\", \"8px\")\n            .style(\"border-radius\", \"8px\")\n            .style(\"align-items\", \"center\")\n            .style(\"z-index\", 1000);\n          options.append(\"div\")\n            .text(\"+\")\n            .style(\"font-size\", \"20px\")\n            .style(\"color\", \"#679D43\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .on(\"click\", () => console.log(\"Plus clicked\", d));\n          options.append(\"div\")\n            .text(\"-\")\n            .text(\"-\")\n            .style(\"font-size\", \"20px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => console.log(\"Minus clicked\"));\n          options.append(\"div\")\n            .text(\"A\")\n            .style(\"font-size\", \"14px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => that.convertToImage(event, d));\n  \n          d3.select(\"body\").on(\"click\", function (event) {\n            if (!event.target.closest('.option-box') && !event.target.closest('circle')) {\n              d3.selectAll('.option-box').remove();\n            }\n          });\n  \n          event.stopPropagation();\n        });\n  \n        node.append(\"title\")\n          .text(d => `ID: ${d.id}, Distance: ${d.distance}`);\n  \n        svg.append(\"text\")\n          .attr(\"transform\", `translate(60, 50)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 15)\n          .text(`Recall: ${recall}`);\n  \n        const legend = svg.append(\"g\")\n          .attr(\"transform\", `translate(60, 60)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 10);\n  \n        const uniqueGroups = [...new Set(nodes.map(d => d.group))];\n        const legendItems = legend.selectAll(\"g\")\n          .data(uniqueGroups)\n          .enter().append(\"g\")\n          .attr(\"transform\", (d, i) => `translate(0,${i * 20})`);\n        legendItems.append(\"rect\")\n          .attr(\"width\", 18)\n          .attr(\"height\", 18)\n          .attr(\"fill\", d => groupColorMap[d]);\n  \n        legendItems.append(\"text\")\n          .attr(\"x\", 24)\n          .attr(\"y\", 9)\n          .attr(\"dy\", \"0.35em\")\n          .text(d => {\n                if (d === 0) {\n                  return \"start node\";\n                } else if (d === 1) {\n                  return \"normal node\";\n                } else if (d === 2) {\n                  return \"gt&search intersection\";\n                } else if (d === 3) {\n                  return \"search other\";\n                }\n              });\n  \n        function ticked() {\n          link\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y);\n          node\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n          border\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n  \n          labels\n            .attr(\"x\", d => d.x + 2)\n            .attr(\"y\", d => d.y + 0.35); // 这里设置文本的位置\n  \n          that.updateThumbnail();\n        }\n  \n        function dragstarted(event) {\n          if (!event.active) simulation.alphaTarget(0.2).restart();\n          event.subject.fx = event.subject.x;\n          event.subject.fy = event.subject.y;\n        }\n  \n        function dragged(event) {\n          event.subject.fx = event.x;\n          event.subject.fy = event.y;\n        }\n  \n        function dragended(event) {\n          if (!event.active) simulation.alphaTarget(0);\n          event.subject.fx = null;\n          event.subject.fy = null;\n        }\n  \n        function zoomed(event) {\n          container.attr(\"transform\", event.transform);\n          that.updateThumbnail();\n        }\n  \n      },\n    },\n    computed: {\n      ...mapState({\n        dataNodelink: \"dataNodeLink\",\n        retrievalSet: \"retrievalSet\",\n        datasetName: \"datasetName\",\n        modelName: \"modelName\",\n        retrievalInfo: \"retrievalInfo\",\n        isDone: \"isDone\"\n      }),\n    },\n    watch: {\n  \n      // dataNodelink(newVal, oldVal) {\n      //   console.log(\"可以实现更新\",newVal);\n      //   if (newVal !== oldVal) {\n  \n      //   }\n      // }\n  \n    }\n  };\n  </script>\n  \n  <style scoped lang=\"scss\">\n  .node-link-main {\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n    position: relative;\n  \n    .dag-svg {\n      height: 100%;\n      width: 100%;\n    }\n  \n    .thumbnail-svg {\n      position: absolute;\n      bottom: 20px;\n      left: 20px;\n      border: 1px solid #ccc;\n      background: #fff;\n    }\n  }\n  \n  .option-box {\n    border: 1px solid #F7F7F7;\n    background-color: #F7F7F7;\n    padding: 5px;\n    position: absolute;\n    z-index: 1000;\n  \n    div {\n      margin: 2px 0;\n      cursor: pointer;\n    }\n  \n    div:hover {\n      background-color: #f0f0f0;\n    }\n  }\n  \n  .option-button {\n    padding: 5px 10px;\n    border: 1px solid #000;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: #f0f0f0;\n    font-size: 14px;\n    font-family: Arial, sans-serif;\n    color: red;\n  }\n  \n  .option-button:hover {\n    background-color: #e0e0e0;\n  }\n  </style><template>\n    <div class=\"node-link-main\">\n      <svg ref=\"dag\" class=\"dag-svg\"></svg>\n      <svg ref=\"thumbnail\" class=\"thumbnail-svg\"></svg>\n    </div>\n  </template>\n  \n  <script>\n  import * as d3 from \"d3\";\n  import { mapState } from \"vuex\";\n  import api from \"@/api/data\";\n  \n  export default {\n    name: \"NodeLinkView\",\n    components: {},\n    data() {\n      return {\n        nodelinkdata: {},\n        svgWidth: 0,  // 页面的宽度\n        svgHeight: 0,   // 页面高度\n        velocityDecay: 0.6,\n        thumbnailWidth: 0, // 缩略图宽度\n        thumbnailHeight: 0, // 缩略图高度\n      };\n    },\n    mounted() {\n      this.getViewSize();\n      this.nodelinkdata = this.$store.state.dataNodeLink;\n      console.log(\"请输出 link data 来看一下连接线的 data\",this.nodelinkdata);\n      this.initGraph(this.nodelinkdata);\n    },\n    methods: {\n      getViewSize() {\n        const dag = this.$refs.dag;\n        this.svgHeight = dag.clientHeight;\n        this.svgWidth = dag.clientWidth;\n        this.thumbnailWidth = this.svgWidth / 5;  // 缩略图宽度和高度分别为整个svg 的1/5\n        this.thumbnailHeight = this.svgHeight / 5;\n        if (this.nodelinkdata.nodes) {\n          this.initGraph(this.nodelinkdata);\n          this.initThumbnail();\n        }\n      },\n      async convertToImage(event, node) {\n        const res = await api.getImageUrl({ \"datasetName\": this.$store.state.datasetName, \"nodeId\": node.id });\n        const imageUrl = res[\"data\"][\"imageUrl\"];\n        const targetElement = d3.select(event.target);\n        const targetBBox = targetElement.node().getBBox();\n        const targetWidth = targetBBox.width;\n        const targetHeight = targetBBox.height;\n        const patternId = `pattern-${node.id}`;\n        let pattern = d3.select(`#${patternId}`);\n        if (pattern.empty()) {\n          const svg = d3.select(`#node-class`);\n          let defs = svg.select(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          if (defs.empty()) {\n            defs = svg.append(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          }\n          const pattern = defs.append(\"pattern\")\n            .attr(\"id\", patternId)\n            .attr(\"patternUnits\", \"objectBoundingBox\")\n            .attr(\"width\", 1) // 宽度为 1 表示相对于目标元素的宽度\n            .attr(\"height\", 1) // 高度为 1 表示相对于目标元素的高度\n            .attr(\"patternTransform\", \"translate(1, 1)\"); // 向右和向下移动 10 个单位\n  \n          const image = pattern.append(\"image\")\n            .attr(\"xlink:href\", imageUrl)\n            .attr(\"width\", 58)\n            .attr(\"height\", 58)\n            .attr(\"preserveAspectRatio\", \"xMidYMid slice\");\n        }\n        targetElement\n          .attr(\"r\", 30)\n          .attr(\"fill\", `url(#pattern-${node.id})`)\n          .attr(\"stroke\", \"#000\") // 设置边框颜色\n          .attr(\"stroke-width\", 2); // 设置边框宽度;\n  \n      },\n      initThumbnail() {\n        const thumbnail = d3.select(this.$refs.thumbnail);\n        thumbnail\n          .attr(\"width\", this.thumbnailWidth)\n          .attr(\"height\", this.thumbnailHeight)\n          .attr(\"viewBox\", `0 0 ${this.svgWidth} ${this.svgHeight}`)\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"position: absolute; bottom: 20px; left: 20px; border: 1px solid #ccc; background: #fff;\");\n      },\n      updateThumbnail() {\n        const that = this;\n        const thumbnail = d3.select(that.$refs.thumbnail);\n        thumbnail.selectAll(\"*\").remove();\n        const container = thumbnail.append(\"g\")\n          .attr(\"transform\", `scale(${that.thumbnailWidth / that.svgWidth}, ${that.thumbnailHeight / that.svgHeight})`);\n  \n        // Clone legend and link nodes\n        const legendNode = d3.select(that.$refs.dag).select(\"g.nodes\").node().cloneNode(true);\n        const linkNode = d3.select(that.$refs.dag).select(\"g.link\").node().cloneNode(true);\n        container.append(() => legendNode);\n        container.append(() => linkNode);\n  \n      },\n  \n      initGraph(data) {\n        const that = this;\n        const width = that.svgWidth;\n        const height = that.svgHeight;\n        const recall = data[\"metric\"]['recall'];\n        const links = data.links.map(d => ({ ...d }));\n        const nodes = data.nodes.map(d => ({ ...d }));\n  \n        // 在这里获取 links value 中的最大值和最小值\n        const val = links.map(d => d.value);\n        const minVal = Math.min(...val);\n        const maxVal = Math.max(...val);\n  \n        // 定义归一化函数\n        // 定义归一化函数，确保最小值不为 0\n        const normalize = (value) => {\n          const normalizedValue = (value - minVal) / (maxVal - minVal);\n          // 将归一化值范围调整为 [a, 1]，其中 a 为略大于 0 的数值，例如 0.1\n          const a = 0.1;\n          return 10*(normalizedValue * (1 - a) + a);\n        };\n  \n        const simulation = d3.forceSimulation(nodes)\n          .force(\"link\", d3.forceLink(links).id(d => d.id))\n          // .distance(d => normalize(d.value)/100000))\n          .force(\"charge\", d3.forceManyBody().strength(-10))\n          .force(\"center\", d3.forceCenter(width / 2, height / 2).strength(0.3))\n          // .force(\"radial\", d3.forceRadial(500, width / 2, height / 2).strength(0.8))\n          // .force(\"x\", d3.forceX(width / 2).strength(0.05))\n          // .force(\"y\", d3.forceY(height / 2).strength(0.05))\n          .velocityDecay(this.velocityDecay)\n          .on(\"tick\", ticked);\n  \n        const svg = d3.select(this.$refs.dag);\n        svg.selectAll(\"*\").remove();\n  \n        svg.attr(\"viewBox\", `0 0 ${width} ${height}`)\n          .attr(\"width\", \"100%\")\n          .attr(\"height\", \"100%\")\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"max-width: 100%; height: auto;\")\n          .call(d3.zoom().scaleExtent([0.5, 8]).on(\"zoom\", zoomed));\n  \n        const colorMap = d3.scaleOrdinal()\n          .range(['#FF0000', '#A4D3EE', '#FF7F50', '#32CD32']);\n          const groupColorMap = {\n            0: \"#FF0000\",\n            1: \"#A4D3EE\",\n            2: \"#32CD32\",\n            3: \"#FF7F50\",\n          };\n  \n        const container = svg.append(\"g\");\n        const link = container.append(\"g\")\n          .attr(\"class\", \"link\")\n          .attr(\"stroke\", \"#999\")\n          .attr(\"stroke-opacity\", 0.6)\n          .selectAll(\"line\")\n          .data(links)\n          .join(\"line\")\n          .attr(\"stroke-width\", d => Math.sqrt(normalize(d.value)))\n          .attr(\"marker-end\", \"url(#arrowhead)\")\n          .attr(\"fill\", d => groupColorMap[d.group]);\n  \n        const border = container.append(\"g\")\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 20;\n            } else if (v.group === 3) {\n              return 15;\n            } else if (v.group === 2) {\n              return 15;\n            } else {\n              return 12.5;\n            }\n          })\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"none\")\n          .attr(\"stroke-width\", 2);\n  \n        const node = container.append(\"g\")\n          .attr(\"class\", \"nodes\")\n          .attr(\"id\", `node-class`)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"stroke-width\", 0.2)\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 18;\n            } else if (v.group === 3) {\n              return 13;\n            } else if (v.group === 2) {\n              return 13;\n            } else {\n              return 10.5;\n            }\n          })\n          .attr(\"fill\", d => groupColorMap[d.group])\n          .call(d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n  \n        const labels = container.append(\"g\")\n          .attr(\"class\", \"labels\")\n          .selectAll(\"text\")\n          .data(nodes)\n          .join(\"text\")\n          .attr(\"dx\", 6)\n          .attr(\"dy\", \".35em\")\n          .style(\"font-size\", \"12px\")  // 设置字体大小\n          .attr(\"stroke\", \"white\")\n          .attr(\"paint-order\", \"stroke\")\n          .text(d => {\n            if (d.group === 2 || d.group === 3) {\n              return `${d.id}`;\n            } else {\n              return \"\";\n            }\n          });\n  \n        node.on(\"mouseover\", function (event, d) {\n          border.attr(\"stroke\", (b) => b.id === d.id ? \"#6096E6\" : \"none\");\n        })\n          .on(\"mouseout\", function (event, d) {\n            border.attr(\"stroke\", \"none\");\n          });\n  \n        node.on(\"click\", function (event, d) {\n          const existingBox = document.querySelector('.option-box');\n          if (existingBox) {\n            if (parseInt(existingBox.dataset.nodeId) === parseInt(d.id)) {\n              existingBox.remove();\n              return;\n            }\n            existingBox.remove();\n          }\n          const options = d3.select(\"body\").append(\"div\")\n            .attr(\"class\", \"option-box\")\n            .attr(\"data-node-id\", d.id)\n            .style(\"position\", \"absolute\")\n            .style(\"left\", `${event.pageX + 10}px`)\n            .style(\"top\", `${event.pageY + 10}px`)\n            .style(\"display\", \"flex\")\n            .style(\"gap\", \"8px\")\n            .style(\"border\", \"1px solid #7F7F7F\")\n            .style(\"background-color\", \"#F7F7F7\")\n            .style(\"width\", \"86px\")\n            .style(\"height\", \"25px\")\n            .style(\"padding\", \"2.5px 0\")\n            .style(\"padding-left\", \"8px\")\n            .style(\"border-radius\", \"8px\")\n            .style(\"align-items\", \"center\")\n            .style(\"z-index\", 1000);\n          options.append(\"div\")\n            .text(\"+\")\n            .style(\"font-size\", \"20px\")\n            .style(\"color\", \"#679D43\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .on(\"click\", () => console.log(\"Plus clicked\", d));\n          options.append(\"div\")\n            .text(\"-\")\n            .text(\"-\")\n            .style(\"font-size\", \"20px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => console.log(\"Minus clicked\"));\n          options.append(\"div\")\n            .text(\"A\")\n            .style(\"font-size\", \"14px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => that.convertToImage(event, d));\n  \n          d3.select(\"body\").on(\"click\", function (event) {\n            if (!event.target.closest('.option-box') && !event.target.closest('circle')) {\n              d3.selectAll('.option-box').remove();\n            }\n          });\n  \n          event.stopPropagation();\n        });\n  \n        node.append(\"title\")\n          .text(d => `ID: ${d.id}, Distance: ${d.distance}`);\n  \n        svg.append(\"text\")\n          .attr(\"transform\", `translate(60, 50)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 15)\n          .text(`Recall: ${recall}`);\n  \n        const legend = svg.append(\"g\")\n          .attr(\"transform\", `translate(60, 60)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 10);\n  \n        const uniqueGroups = [...new Set(nodes.map(d => d.group))];\n        const legendItems = legend.selectAll(\"g\")\n          .data(uniqueGroups)\n          .enter().append(\"g\")\n          .attr(\"transform\", (d, i) => `translate(0,${i * 20})`);\n        legendItems.append(\"rect\")\n          .attr(\"width\", 18)\n          .attr(\"height\", 18)\n          .attr(\"fill\", d => groupColorMap[d]);\n  \n        legendItems.append(\"text\")\n          .attr(\"x\", 24)\n          .attr(\"y\", 9)\n          .attr(\"dy\", \"0.35em\")\n          .text(d => {\n                if (d === 0) {\n                  return \"start node\";\n                } else if (d === 1) {\n                  return \"normal node\";\n                } else if (d === 2) {\n                  return \"gt&search intersection\";\n                } else if (d === 3) {\n                  return \"search other\";\n                }\n              });\n  \n        function ticked() {\n          link\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y);\n          node\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n          border\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n  \n          labels\n            .attr(\"x\", d => d.x + 2)\n            .attr(\"y\", d => d.y + 0.35); // 这里设置文本的位置\n  \n          that.updateThumbnail();\n        }\n  \n        function dragstarted(event) {\n          if (!event.active) simulation.alphaTarget(0.2).restart();\n          event.subject.fx = event.subject.x;\n          event.subject.fy = event.subject.y;\n        }\n  \n        function dragged(event) {\n          event.subject.fx = event.x;\n          event.subject.fy = event.y;\n        }\n  \n        function dragended(event) {\n          if (!event.active) simulation.alphaTarget(0);\n          event.subject.fx = null;\n          event.subject.fy = null;\n        }\n  \n        function zoomed(event) {\n          container.attr(\"transform\", event.transform);\n          that.updateThumbnail();\n        }\n  \n      },\n    },\n    computed: {\n      ...mapState({\n        dataNodelink: \"dataNodeLink\",\n        retrievalSet: \"retrievalSet\",\n        datasetName: \"datasetName\",\n        modelName: \"modelName\",\n        retrievalInfo: \"retrievalInfo\",\n        isDone: \"isDone\"\n      }),\n    },\n    watch: {\n  \n      // dataNodelink(newVal, oldVal) {\n      //   console.log(\"可以实现更新\",newVal);\n      //   if (newVal !== oldVal) {\n  \n      //   }\n      // }\n  \n    }\n  };\n  </script>\n  \n  <style scoped lang=\"scss\">\n  .node-link-main {\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n    position: relative;\n  \n    .dag-svg {\n      height: 100%;\n      width: 100%;\n    }\n  \n    .thumbnail-svg {\n      position: absolute;\n      bottom: 20px;\n      left: 20px;\n      border: 1px solid #ccc;\n      background: #fff;\n    }\n  }\n  \n  .option-box {\n    border: 1px solid #F7F7F7;\n    background-color: #F7F7F7;\n    padding: 5px;\n    position: absolute;\n    z-index: 1000;\n  \n    div {\n      margin: 2px 0;\n      cursor: pointer;\n    }\n  \n    div:hover {\n      background-color: #f0f0f0;\n    }\n  }\n  \n  .option-button {\n    padding: 5px 10px;\n    border: 1px solid #000;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: #f0f0f0;\n    font-size: 14px;\n    font-family: Arial, sans-serif;\n    color: red;\n  }\n  \n  .option-button:hover {\n    background-color: #e0e0e0;\n  }\n  </style><template>\n    <div class=\"node-link-main\">\n      <svg ref=\"dag\" class=\"dag-svg\"></svg>\n      <svg ref=\"thumbnail\" class=\"thumbnail-svg\"></svg>\n    </div>\n  </template>\n  \n  <script>\n  import * as d3 from \"d3\";\n  import { mapState } from \"vuex\";\n  import api from \"@/api/data\";\n  \n  export default {\n    name: \"NodeLinkView\",\n    components: {},\n    data() {\n      return {\n        nodelinkdata: {},\n        svgWidth: 0,  // 页面的宽度\n        svgHeight: 0,   // 页面高度\n        velocityDecay: 0.6,\n        thumbnailWidth: 0, // 缩略图宽度\n        thumbnailHeight: 0, // 缩略图高度\n      };\n    },\n    mounted() {\n      this.getViewSize();\n      this.nodelinkdata = this.$store.state.dataNodeLink;\n      console.log(\"请输出 link data 来看一下连接线的 data\",this.nodelinkdata);\n      this.initGraph(this.nodelinkdata);\n    },\n    methods: {\n      getViewSize() {\n        const dag = this.$refs.dag;\n        this.svgHeight = dag.clientHeight;\n        this.svgWidth = dag.clientWidth;\n        this.thumbnailWidth = this.svgWidth / 5;  // 缩略图宽度和高度分别为整个svg 的1/5\n        this.thumbnailHeight = this.svgHeight / 5;\n        if (this.nodelinkdata.nodes) {\n          this.initGraph(this.nodelinkdata);\n          this.initThumbnail();\n        }\n      },\n      async convertToImage(event, node) {\n        const res = await api.getImageUrl({ \"datasetName\": this.$store.state.datasetName, \"nodeId\": node.id });\n        const imageUrl = res[\"data\"][\"imageUrl\"];\n        const targetElement = d3.select(event.target);\n        const targetBBox = targetElement.node().getBBox();\n        const targetWidth = targetBBox.width;\n        const targetHeight = targetBBox.height;\n        const patternId = `pattern-${node.id}`;\n        let pattern = d3.select(`#${patternId}`);\n        if (pattern.empty()) {\n          const svg = d3.select(`#node-class`);\n          let defs = svg.select(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          if (defs.empty()) {\n            defs = svg.append(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          }\n          const pattern = defs.append(\"pattern\")\n            .attr(\"id\", patternId)\n            .attr(\"patternUnits\", \"objectBoundingBox\")\n            .attr(\"width\", 1) // 宽度为 1 表示相对于目标元素的宽度\n            .attr(\"height\", 1) // 高度为 1 表示相对于目标元素的高度\n            .attr(\"patternTransform\", \"translate(1, 1)\"); // 向右和向下移动 10 个单位\n  \n          const image = pattern.append(\"image\")\n            .attr(\"xlink:href\", imageUrl)\n            .attr(\"width\", 58)\n            .attr(\"height\", 58)\n            .attr(\"preserveAspectRatio\", \"xMidYMid slice\");\n        }\n        targetElement\n          .attr(\"r\", 30)\n          .attr(\"fill\", `url(#pattern-${node.id})`)\n          .attr(\"stroke\", \"#000\") // 设置边框颜色\n          .attr(\"stroke-width\", 2); // 设置边框宽度;\n  \n      },\n      initThumbnail() {\n        const thumbnail = d3.select(this.$refs.thumbnail);\n        thumbnail\n          .attr(\"width\", this.thumbnailWidth)\n          .attr(\"height\", this.thumbnailHeight)\n          .attr(\"viewBox\", `0 0 ${this.svgWidth} ${this.svgHeight}`)\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"position: absolute; bottom: 20px; left: 20px; border: 1px solid #ccc; background: #fff;\");\n      },\n      updateThumbnail() {\n        const that = this;\n        const thumbnail = d3.select(that.$refs.thumbnail);\n        thumbnail.selectAll(\"*\").remove();\n        const container = thumbnail.append(\"g\")\n          .attr(\"transform\", `scale(${that.thumbnailWidth / that.svgWidth}, ${that.thumbnailHeight / that.svgHeight})`);\n  \n        // Clone legend and link nodes\n        const legendNode = d3.select(that.$refs.dag).select(\"g.nodes\").node().cloneNode(true);\n        const linkNode = d3.select(that.$refs.dag).select(\"g.link\").node().cloneNode(true);\n        container.append(() => legendNode);\n        container.append(() => linkNode);\n  \n      },\n  \n      initGraph(data) {\n        const that = this;\n        const width = that.svgWidth;\n        const height = that.svgHeight;\n        const recall = data[\"metric\"]['recall'];\n        const links = data.links.map(d => ({ ...d }));\n        const nodes = data.nodes.map(d => ({ ...d }));\n  \n        // 在这里获取 links value 中的最大值和最小值\n        const val = links.map(d => d.value);\n        const minVal = Math.min(...val);\n        const maxVal = Math.max(...val);\n  \n        // 定义归一化函数\n        // 定义归一化函数，确保最小值不为 0\n        const normalize = (value) => {\n          const normalizedValue = (value - minVal) / (maxVal - minVal);\n          // 将归一化值范围调整为 [a, 1]，其中 a 为略大于 0 的数值，例如 0.1\n          const a = 0.1;\n          return 10*(normalizedValue * (1 - a) + a);\n        };\n  \n        const simulation = d3.forceSimulation(nodes)\n          .force(\"link\", d3.forceLink(links).id(d => d.id))\n          // .distance(d => normalize(d.value)/100000))\n          .force(\"charge\", d3.forceManyBody().strength(-10))\n          .force(\"center\", d3.forceCenter(width / 2, height / 2).strength(0.3))\n          // .force(\"radial\", d3.forceRadial(500, width / 2, height / 2).strength(0.8))\n          // .force(\"x\", d3.forceX(width / 2).strength(0.05))\n          // .force(\"y\", d3.forceY(height / 2).strength(0.05))\n          .velocityDecay(this.velocityDecay)\n          .on(\"tick\", ticked);\n  \n        const svg = d3.select(this.$refs.dag);\n        svg.selectAll(\"*\").remove();\n  \n        svg.attr(\"viewBox\", `0 0 ${width} ${height}`)\n          .attr(\"width\", \"100%\")\n          .attr(\"height\", \"100%\")\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"max-width: 100%; height: auto;\")\n          .call(d3.zoom().scaleExtent([0.5, 8]).on(\"zoom\", zoomed));\n  \n        const colorMap = d3.scaleOrdinal()\n          .range(['#FF0000', '#A4D3EE', '#FF7F50', '#32CD32']);\n          const groupColorMap = {\n            0: \"#FF0000\",\n            1: \"#A4D3EE\",\n            2: \"#32CD32\",\n            3: \"#FF7F50\",\n          };\n  \n        const container = svg.append(\"g\");\n        const link = container.append(\"g\")\n          .attr(\"class\", \"link\")\n          .attr(\"stroke\", \"#999\")\n          .attr(\"stroke-opacity\", 0.6)\n          .selectAll(\"line\")\n          .data(links)\n          .join(\"line\")\n          .attr(\"stroke-width\", d => Math.sqrt(normalize(d.value)))\n          .attr(\"marker-end\", \"url(#arrowhead)\")\n          .attr(\"fill\", d => groupColorMap[d.group]);\n  \n        const border = container.append(\"g\")\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 20;\n            } else if (v.group === 3) {\n              return 15;\n            } else if (v.group === 2) {\n              return 15;\n            } else {\n              return 12.5;\n            }\n          })\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"none\")\n          .attr(\"stroke-width\", 2);\n  \n        const node = container.append(\"g\")\n          .attr(\"class\", \"nodes\")\n          .attr(\"id\", `node-class`)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"stroke-width\", 0.2)\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 18;\n            } else if (v.group === 3) {\n              return 13;\n            } else if (v.group === 2) {\n              return 13;\n            } else {\n              return 10.5;\n            }\n          })\n          .attr(\"fill\", d => groupColorMap[d.group])\n          .call(d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n  \n        const labels = container.append(\"g\")\n          .attr(\"class\", \"labels\")\n          .selectAll(\"text\")\n          .data(nodes)\n          .join(\"text\")\n          .attr(\"dx\", 6)\n          .attr(\"dy\", \".35em\")\n          .style(\"font-size\", \"12px\")  // 设置字体大小\n          .attr(\"stroke\", \"white\")\n          .attr(\"paint-order\", \"stroke\")\n          .text(d => {\n            if (d.group === 2 || d.group === 3) {\n              return `${d.id}`;\n            } else {\n              return \"\";\n            }\n          });\n  \n        node.on(\"mouseover\", function (event, d) {\n          border.attr(\"stroke\", (b) => b.id === d.id ? \"#6096E6\" : \"none\");\n        })\n          .on(\"mouseout\", function (event, d) {\n            border.attr(\"stroke\", \"none\");\n          });\n  \n        node.on(\"click\", function (event, d) {\n          const existingBox = document.querySelector('.option-box');\n          if (existingBox) {\n            if (parseInt(existingBox.dataset.nodeId) === parseInt(d.id)) {\n              existingBox.remove();\n              return;\n            }\n            existingBox.remove();\n          }\n          const options = d3.select(\"body\").append(\"div\")\n            .attr(\"class\", \"option-box\")\n            .attr(\"data-node-id\", d.id)\n            .style(\"position\", \"absolute\")\n            .style(\"left\", `${event.pageX + 10}px`)\n            .style(\"top\", `${event.pageY + 10}px`)\n            .style(\"display\", \"flex\")\n            .style(\"gap\", \"8px\")\n            .style(\"border\", \"1px solid #7F7F7F\")\n            .style(\"background-color\", \"#F7F7F7\")\n            .style(\"width\", \"86px\")\n            .style(\"height\", \"25px\")\n            .style(\"padding\", \"2.5px 0\")\n            .style(\"padding-left\", \"8px\")\n            .style(\"border-radius\", \"8px\")\n            .style(\"align-items\", \"center\")\n            .style(\"z-index\", 1000);\n          options.append(\"div\")\n            .text(\"+\")\n            .style(\"font-size\", \"20px\")\n            .style(\"color\", \"#679D43\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .on(\"click\", () => console.log(\"Plus clicked\", d));\n          options.append(\"div\")\n            .text(\"-\")\n            .text(\"-\")\n            .style(\"font-size\", \"20px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => console.log(\"Minus clicked\"));\n          options.append(\"div\")\n            .text(\"A\")\n            .style(\"font-size\", \"14px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => that.convertToImage(event, d));\n  \n          d3.select(\"body\").on(\"click\", function (event) {\n            if (!event.target.closest('.option-box') && !event.target.closest('circle')) {\n              d3.selectAll('.option-box').remove();\n            }\n          });\n  \n          event.stopPropagation();\n        });\n  \n        node.append(\"title\")\n          .text(d => `ID: ${d.id}, Distance: ${d.distance}`);\n  \n        svg.append(\"text\")\n          .attr(\"transform\", `translate(60, 50)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 15)\n          .text(`Recall: ${recall}`);\n  \n        const legend = svg.append(\"g\")\n          .attr(\"transform\", `translate(60, 60)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 10);\n  \n        const uniqueGroups = [...new Set(nodes.map(d => d.group))];\n        const legendItems = legend.selectAll(\"g\")\n          .data(uniqueGroups)\n          .enter().append(\"g\")\n          .attr(\"transform\", (d, i) => `translate(0,${i * 20})`);\n        legendItems.append(\"rect\")\n          .attr(\"width\", 18)\n          .attr(\"height\", 18)\n          .attr(\"fill\", d => groupColorMap[d]);\n  \n        legendItems.append(\"text\")\n          .attr(\"x\", 24)\n          .attr(\"y\", 9)\n          .attr(\"dy\", \"0.35em\")\n          .text(d => {\n                if (d === 0) {\n                  return \"start node\";\n                } else if (d === 1) {\n                  return \"normal node\";\n                } else if (d === 2) {\n                  return \"gt&search intersection\";\n                } else if (d === 3) {\n                  return \"search other\";\n                }\n              });\n  \n        function ticked() {\n          link\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y);\n          node\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n          border\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n  \n          labels\n            .attr(\"x\", d => d.x + 2)\n            .attr(\"y\", d => d.y + 0.35); // 这里设置文本的位置\n  \n          that.updateThumbnail();\n        }\n  \n        function dragstarted(event) {\n          if (!event.active) simulation.alphaTarget(0.2).restart();\n          event.subject.fx = event.subject.x;\n          event.subject.fy = event.subject.y;\n        }\n  \n        function dragged(event) {\n          event.subject.fx = event.x;\n          event.subject.fy = event.y;\n        }\n  \n        function dragended(event) {\n          if (!event.active) simulation.alphaTarget(0);\n          event.subject.fx = null;\n          event.subject.fy = null;\n        }\n  \n        function zoomed(event) {\n          container.attr(\"transform\", event.transform);\n          that.updateThumbnail();\n        }\n  \n      },\n    },\n    computed: {\n      ...mapState({\n        dataNodelink: \"dataNodeLink\",\n        retrievalSet: \"retrievalSet\",\n        datasetName: \"datasetName\",\n        modelName: \"modelName\",\n        retrievalInfo: \"retrievalInfo\",\n        isDone: \"isDone\"\n      }),\n    },\n    watch: {\n  \n      // dataNodelink(newVal, oldVal) {\n      //   console.log(\"可以实现更新\",newVal);\n      //   if (newVal !== oldVal) {\n  \n      //   }\n      // }\n  \n    }\n  };\n  </script>\n  \n  <style scoped lang=\"scss\">\n  .node-link-main {\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n    position: relative;\n  \n    .dag-svg {\n      height: 100%;\n      width: 100%;\n    }\n  \n    .thumbnail-svg {\n      position: absolute;\n      bottom: 20px;\n      left: 20px;\n      border: 1px solid #ccc;\n      background: #fff;\n    }\n  }\n  \n  .option-box {\n    border: 1px solid #F7F7F7;\n    background-color: #F7F7F7;\n    padding: 5px;\n    position: absolute;\n    z-index: 1000;\n  \n    div {\n      margin: 2px 0;\n      cursor: pointer;\n    }\n  \n    div:hover {\n      background-color: #f0f0f0;\n    }\n  }\n  \n  .option-button {\n    padding: 5px 10px;\n    border: 1px solid #000;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: #f0f0f0;\n    font-size: 14px;\n    font-family: Arial, sans-serif;\n    color: red;\n  }\n  \n  .option-button:hover {\n    background-color: #e0e0e0;\n  }\n  </style><template>\n    <div class=\"node-link-main\">\n      <svg ref=\"dag\" class=\"dag-svg\"></svg>\n      <svg ref=\"thumbnail\" class=\"thumbnail-svg\"></svg>\n    </div>\n  </template>\n  \n  <script>\n  import * as d3 from \"d3\";\n  import { mapState } from \"vuex\";\n  import api from \"@/api/data\";\n  \n  export default {\n    name: \"NodeLinkView\",\n    components: {},\n    data() {\n      return {\n        nodelinkdata: {},\n        svgWidth: 0,  // 页面的宽度\n        svgHeight: 0,   // 页面高度\n        velocityDecay: 0.6,\n        thumbnailWidth: 0, // 缩略图宽度\n        thumbnailHeight: 0, // 缩略图高度\n      };\n    },\n    mounted() {\n      this.getViewSize();\n      this.nodelinkdata = this.$store.state.dataNodeLink;\n      console.log(\"请输出 link data 来看一下连接线的 data\",this.nodelinkdata);\n      this.initGraph(this.nodelinkdata);\n    },\n    methods: {\n      getViewSize() {\n        const dag = this.$refs.dag;\n        this.svgHeight = dag.clientHeight;\n        this.svgWidth = dag.clientWidth;\n        this.thumbnailWidth = this.svgWidth / 5;  // 缩略图宽度和高度分别为整个svg 的1/5\n        this.thumbnailHeight = this.svgHeight / 5;\n        if (this.nodelinkdata.nodes) {\n          this.initGraph(this.nodelinkdata);\n          this.initThumbnail();\n        }\n      },\n      async convertToImage(event, node) {\n        const res = await api.getImageUrl({ \"datasetName\": this.$store.state.datasetName, \"nodeId\": node.id });\n        const imageUrl = res[\"data\"][\"imageUrl\"];\n        const targetElement = d3.select(event.target);\n        const targetBBox = targetElement.node().getBBox();\n        const targetWidth = targetBBox.width;\n        const targetHeight = targetBBox.height;\n        const patternId = `pattern-${node.id}`;\n        let pattern = d3.select(`#${patternId}`);\n        if (pattern.empty()) {\n          const svg = d3.select(`#node-class`);\n          let defs = svg.select(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          if (defs.empty()) {\n            defs = svg.append(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          }\n          const pattern = defs.append(\"pattern\")\n            .attr(\"id\", patternId)\n            .attr(\"patternUnits\", \"objectBoundingBox\")\n            .attr(\"width\", 1) // 宽度为 1 表示相对于目标元素的宽度\n            .attr(\"height\", 1) // 高度为 1 表示相对于目标元素的高度\n            .attr(\"patternTransform\", \"translate(1, 1)\"); // 向右和向下移动 10 个单位\n  \n          const image = pattern.append(\"image\")\n            .attr(\"xlink:href\", imageUrl)\n            .attr(\"width\", 58)\n            .attr(\"height\", 58)\n            .attr(\"preserveAspectRatio\", \"xMidYMid slice\");\n        }\n        targetElement\n          .attr(\"r\", 30)\n          .attr(\"fill\", `url(#pattern-${node.id})`)\n          .attr(\"stroke\", \"#000\") // 设置边框颜色\n          .attr(\"stroke-width\", 2); // 设置边框宽度;\n  \n      },\n      initThumbnail() {\n        const thumbnail = d3.select(this.$refs.thumbnail);\n        thumbnail\n          .attr(\"width\", this.thumbnailWidth)\n          .attr(\"height\", this.thumbnailHeight)\n          .attr(\"viewBox\", `0 0 ${this.svgWidth} ${this.svgHeight}`)\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"position: absolute; bottom: 20px; left: 20px; border: 1px solid #ccc; background: #fff;\");\n      },\n      updateThumbnail() {\n        const that = this;\n        const thumbnail = d3.select(that.$refs.thumbnail);\n        thumbnail.selectAll(\"*\").remove();\n        const container = thumbnail.append(\"g\")\n          .attr(\"transform\", `scale(${that.thumbnailWidth / that.svgWidth}, ${that.thumbnailHeight / that.svgHeight})`);\n  \n        // Clone legend and link nodes\n        const legendNode = d3.select(that.$refs.dag).select(\"g.nodes\").node().cloneNode(true);\n        const linkNode = d3.select(that.$refs.dag).select(\"g.link\").node().cloneNode(true);\n        container.append(() => legendNode);\n        container.append(() => linkNode);\n  \n      },\n  \n      initGraph(data) {\n        const that = this;\n        const width = that.svgWidth;\n        const height = that.svgHeight;\n        const recall = data[\"metric\"]['recall'];\n        const links = data.links.map(d => ({ ...d }));\n        const nodes = data.nodes.map(d => ({ ...d }));\n  \n        // 在这里获取 links value 中的最大值和最小值\n        const val = links.map(d => d.value);\n        const minVal = Math.min(...val);\n        const maxVal = Math.max(...val);\n  \n        // 定义归一化函数\n        // 定义归一化函数，确保最小值不为 0\n        const normalize = (value) => {\n          const normalizedValue = (value - minVal) / (maxVal - minVal);\n          // 将归一化值范围调整为 [a, 1]，其中 a 为略大于 0 的数值，例如 0.1\n          const a = 0.1;\n          return 10*(normalizedValue * (1 - a) + a);\n        };\n  \n        const simulation = d3.forceSimulation(nodes)\n          .force(\"link\", d3.forceLink(links).id(d => d.id))\n          // .distance(d => normalize(d.value)/100000))\n          .force(\"charge\", d3.forceManyBody().strength(-10))\n          .force(\"center\", d3.forceCenter(width / 2, height / 2).strength(0.3))\n          // .force(\"radial\", d3.forceRadial(500, width / 2, height / 2).strength(0.8))\n          // .force(\"x\", d3.forceX(width / 2).strength(0.05))\n          // .force(\"y\", d3.forceY(height / 2).strength(0.05))\n          .velocityDecay(this.velocityDecay)\n          .on(\"tick\", ticked);\n  \n        const svg = d3.select(this.$refs.dag);\n        svg.selectAll(\"*\").remove();\n  \n        svg.attr(\"viewBox\", `0 0 ${width} ${height}`)\n          .attr(\"width\", \"100%\")\n          .attr(\"height\", \"100%\")\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"max-width: 100%; height: auto;\")\n          .call(d3.zoom().scaleExtent([0.5, 8]).on(\"zoom\", zoomed));\n  \n        const colorMap = d3.scaleOrdinal()\n          .range(['#FF0000', '#A4D3EE', '#FF7F50', '#32CD32']);\n          const groupColorMap = {\n            0: \"#FF0000\",\n            1: \"#A4D3EE\",\n            2: \"#32CD32\",\n            3: \"#FF7F50\",\n          };\n  \n        const container = svg.append(\"g\");\n        const link = container.append(\"g\")\n          .attr(\"class\", \"link\")\n          .attr(\"stroke\", \"#999\")\n          .attr(\"stroke-opacity\", 0.6)\n          .selectAll(\"line\")\n          .data(links)\n          .join(\"line\")\n          .attr(\"stroke-width\", d => Math.sqrt(normalize(d.value)))\n          .attr(\"marker-end\", \"url(#arrowhead)\")\n          .attr(\"fill\", d => groupColorMap[d.group]);\n  \n        const border = container.append(\"g\")\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 20;\n            } else if (v.group === 3) {\n              return 15;\n            } else if (v.group === 2) {\n              return 15;\n            } else {\n              return 12.5;\n            }\n          })\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"none\")\n          .attr(\"stroke-width\", 2);\n  \n        const node = container.append(\"g\")\n          .attr(\"class\", \"nodes\")\n          .attr(\"id\", `node-class`)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"stroke-width\", 0.2)\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 18;\n            } else if (v.group === 3) {\n              return 13;\n            } else if (v.group === 2) {\n              return 13;\n            } else {\n              return 10.5;\n            }\n          })\n          .attr(\"fill\", d => groupColorMap[d.group])\n          .call(d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n  \n        const labels = container.append(\"g\")\n          .attr(\"class\", \"labels\")\n          .selectAll(\"text\")\n          .data(nodes)\n          .join(\"text\")\n          .attr(\"dx\", 6)\n          .attr(\"dy\", \".35em\")\n          .style(\"font-size\", \"12px\")  // 设置字体大小\n          .attr(\"stroke\", \"white\")\n          .attr(\"paint-order\", \"stroke\")\n          .text(d => {\n            if (d.group === 2 || d.group === 3) {\n              return `${d.id}`;\n            } else {\n              return \"\";\n            }\n          });\n  \n        node.on(\"mouseover\", function (event, d) {\n          border.attr(\"stroke\", (b) => b.id === d.id ? \"#6096E6\" : \"none\");\n        })\n          .on(\"mouseout\", function (event, d) {\n            border.attr(\"stroke\", \"none\");\n          });\n  \n        node.on(\"click\", function (event, d) {\n          const existingBox = document.querySelector('.option-box');\n          if (existingBox) {\n            if (parseInt(existingBox.dataset.nodeId) === parseInt(d.id)) {\n              existingBox.remove();\n              return;\n            }\n            existingBox.remove();\n          }\n          const options = d3.select(\"body\").append(\"div\")\n            .attr(\"class\", \"option-box\")\n            .attr(\"data-node-id\", d.id)\n            .style(\"position\", \"absolute\")\n            .style(\"left\", `${event.pageX + 10}px`)\n            .style(\"top\", `${event.pageY + 10}px`)\n            .style(\"display\", \"flex\")\n            .style(\"gap\", \"8px\")\n            .style(\"border\", \"1px solid #7F7F7F\")\n            .style(\"background-color\", \"#F7F7F7\")\n            .style(\"width\", \"86px\")\n            .style(\"height\", \"25px\")\n            .style(\"padding\", \"2.5px 0\")\n            .style(\"padding-left\", \"8px\")\n            .style(\"border-radius\", \"8px\")\n            .style(\"align-items\", \"center\")\n            .style(\"z-index\", 1000);\n          options.append(\"div\")\n            .text(\"+\")\n            .style(\"font-size\", \"20px\")\n            .style(\"color\", \"#679D43\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .on(\"click\", () => console.log(\"Plus clicked\", d));\n          options.append(\"div\")\n            .text(\"-\")\n            .text(\"-\")\n            .style(\"font-size\", \"20px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => console.log(\"Minus clicked\"));\n          options.append(\"div\")\n            .text(\"A\")\n            .style(\"font-size\", \"14px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => that.convertToImage(event, d));\n  \n          d3.select(\"body\").on(\"click\", function (event) {\n            if (!event.target.closest('.option-box') && !event.target.closest('circle')) {\n              d3.selectAll('.option-box').remove();\n            }\n          });\n  \n          event.stopPropagation();\n        });\n  \n        node.append(\"title\")\n          .text(d => `ID: ${d.id}, Distance: ${d.distance}`);\n  \n        svg.append(\"text\")\n          .attr(\"transform\", `translate(60, 50)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 15)\n          .text(`Recall: ${recall}`);\n  \n        const legend = svg.append(\"g\")\n          .attr(\"transform\", `translate(60, 60)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 10);\n  \n        const uniqueGroups = [...new Set(nodes.map(d => d.group))];\n        const legendItems = legend.selectAll(\"g\")\n          .data(uniqueGroups)\n          .enter().append(\"g\")\n          .attr(\"transform\", (d, i) => `translate(0,${i * 20})`);\n        legendItems.append(\"rect\")\n          .attr(\"width\", 18)\n          .attr(\"height\", 18)\n          .attr(\"fill\", d => groupColorMap[d]);\n  \n        legendItems.append(\"text\")\n          .attr(\"x\", 24)\n          .attr(\"y\", 9)\n          .attr(\"dy\", \"0.35em\")\n          .text(d => {\n                if (d === 0) {\n                  return \"start node\";\n                } else if (d === 1) {\n                  return \"normal node\";\n                } else if (d === 2) {\n                  return \"gt&search intersection\";\n                } else if (d === 3) {\n                  return \"search other\";\n                }\n              });\n  \n        function ticked() {\n          link\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y);\n          node\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n          border\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n  \n          labels\n            .attr(\"x\", d => d.x + 2)\n            .attr(\"y\", d => d.y + 0.35); // 这里设置文本的位置\n  \n          that.updateThumbnail();\n        }\n  \n        function dragstarted(event) {\n          if (!event.active) simulation.alphaTarget(0.2).restart();\n          event.subject.fx = event.subject.x;\n          event.subject.fy = event.subject.y;\n        }\n  \n        function dragged(event) {\n          event.subject.fx = event.x;\n          event.subject.fy = event.y;\n        }\n  \n        function dragended(event) {\n          if (!event.active) simulation.alphaTarget(0);\n          event.subject.fx = null;\n          event.subject.fy = null;\n        }\n  \n        function zoomed(event) {\n          container.attr(\"transform\", event.transform);\n          that.updateThumbnail();\n        }\n  \n      },\n    },\n    computed: {\n      ...mapState({\n        dataNodelink: \"dataNodeLink\",\n        retrievalSet: \"retrievalSet\",\n        datasetName: \"datasetName\",\n        modelName: \"modelName\",\n        retrievalInfo: \"retrievalInfo\",\n        isDone: \"isDone\"\n      }),\n    },\n    watch: {\n  \n      // dataNodelink(newVal, oldVal) {\n      //   console.log(\"可以实现更新\",newVal);\n      //   if (newVal !== oldVal) {\n  \n      //   }\n      // }\n  \n    }\n  };\n  </script>\n  \n  <style scoped lang=\"scss\">\n  .node-link-main {\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n    position: relative;\n  \n    .dag-svg {\n      height: 100%;\n      width: 100%;\n    }\n  \n    .thumbnail-svg {\n      position: absolute;\n      bottom: 20px;\n      left: 20px;\n      border: 1px solid #ccc;\n      background: #fff;\n    }\n  }\n  \n  .option-box {\n    border: 1px solid #F7F7F7;\n    background-color: #F7F7F7;\n    padding: 5px;\n    position: absolute;\n    z-index: 1000;\n  \n    div {\n      margin: 2px 0;\n      cursor: pointer;\n    }\n  \n    div:hover {\n      background-color: #f0f0f0;\n    }\n  }\n  \n  .option-button {\n    padding: 5px 10px;\n    border: 1px solid #000;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: #f0f0f0;\n    font-size: 14px;\n    font-family: Arial, sans-serif;\n    color: red;\n  }\n  \n  .option-button:hover {\n    background-color: #e0e0e0;\n  }\n  </style><template>\n    <div class=\"node-link-main\">\n      <svg ref=\"dag\" class=\"dag-svg\"></svg>\n      <svg ref=\"thumbnail\" class=\"thumbnail-svg\"></svg>\n    </div>\n  </template>\n  \n  <script>\n  import * as d3 from \"d3\";\n  import { mapState } from \"vuex\";\n  import api from \"@/api/data\";\n  \n  export default {\n    name: \"NodeLinkView\",\n    components: {},\n    data() {\n      return {\n        nodelinkdata: {},\n        svgWidth: 0,  // 页面的宽度\n        svgHeight: 0,   // 页面高度\n        velocityDecay: 0.6,\n        thumbnailWidth: 0, // 缩略图宽度\n        thumbnailHeight: 0, // 缩略图高度\n      };\n    },\n    mounted() {\n      this.getViewSize();\n      this.nodelinkdata = this.$store.state.dataNodeLink;\n      console.log(\"请输出 link data 来看一下连接线的 data\",this.nodelinkdata);\n      this.initGraph(this.nodelinkdata);\n    },\n    methods: {\n      getViewSize() {\n        const dag = this.$refs.dag;\n        this.svgHeight = dag.clientHeight;\n        this.svgWidth = dag.clientWidth;\n        this.thumbnailWidth = this.svgWidth / 5;  // 缩略图宽度和高度分别为整个svg 的1/5\n        this.thumbnailHeight = this.svgHeight / 5;\n        if (this.nodelinkdata.nodes) {\n          this.initGraph(this.nodelinkdata);\n          this.initThumbnail();\n        }\n      },\n      async convertToImage(event, node) {\n        const res = await api.getImageUrl({ \"datasetName\": this.$store.state.datasetName, \"nodeId\": node.id });\n        const imageUrl = res[\"data\"][\"imageUrl\"];\n        const targetElement = d3.select(event.target);\n        const targetBBox = targetElement.node().getBBox();\n        const targetWidth = targetBBox.width;\n        const targetHeight = targetBBox.height;\n        const patternId = `pattern-${node.id}`;\n        let pattern = d3.select(`#${patternId}`);\n        if (pattern.empty()) {\n          const svg = d3.select(`#node-class`);\n          let defs = svg.select(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          if (defs.empty()) {\n            defs = svg.append(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          }\n          const pattern = defs.append(\"pattern\")\n            .attr(\"id\", patternId)\n            .attr(\"patternUnits\", \"objectBoundingBox\")\n            .attr(\"width\", 1) // 宽度为 1 表示相对于目标元素的宽度\n            .attr(\"height\", 1) // 高度为 1 表示相对于目标元素的高度\n            .attr(\"patternTransform\", \"translate(1, 1)\"); // 向右和向下移动 10 个单位\n  \n          const image = pattern.append(\"image\")\n            .attr(\"xlink:href\", imageUrl)\n            .attr(\"width\", 58)\n            .attr(\"height\", 58)\n            .attr(\"preserveAspectRatio\", \"xMidYMid slice\");\n        }\n        targetElement\n          .attr(\"r\", 30)\n          .attr(\"fill\", `url(#pattern-${node.id})`)\n          .attr(\"stroke\", \"#000\") // 设置边框颜色\n          .attr(\"stroke-width\", 2); // 设置边框宽度;\n  \n      },\n      initThumbnail() {\n        const thumbnail = d3.select(this.$refs.thumbnail);\n        thumbnail\n          .attr(\"width\", this.thumbnailWidth)\n          .attr(\"height\", this.thumbnailHeight)\n          .attr(\"viewBox\", `0 0 ${this.svgWidth} ${this.svgHeight}`)\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"position: absolute; bottom: 20px; left: 20px; border: 1px solid #ccc; background: #fff;\");\n      },\n      updateThumbnail() {\n        const that = this;\n        const thumbnail = d3.select(that.$refs.thumbnail);\n        thumbnail.selectAll(\"*\").remove();\n        const container = thumbnail.append(\"g\")\n          .attr(\"transform\", `scale(${that.thumbnailWidth / that.svgWidth}, ${that.thumbnailHeight / that.svgHeight})`);\n  \n        // Clone legend and link nodes\n        const legendNode = d3.select(that.$refs.dag).select(\"g.nodes\").node().cloneNode(true);\n        const linkNode = d3.select(that.$refs.dag).select(\"g.link\").node().cloneNode(true);\n        container.append(() => legendNode);\n        container.append(() => linkNode);\n  \n      },\n  \n      initGraph(data) {\n        const that = this;\n        const width = that.svgWidth;\n        const height = that.svgHeight;\n        const recall = data[\"metric\"]['recall'];\n        const links = data.links.map(d => ({ ...d }));\n        const nodes = data.nodes.map(d => ({ ...d }));\n  \n        // 在这里获取 links value 中的最大值和最小值\n        const val = links.map(d => d.value);\n        const minVal = Math.min(...val);\n        const maxVal = Math.max(...val);\n  \n        // 定义归一化函数\n        // 定义归一化函数，确保最小值不为 0\n        const normalize = (value) => {\n          const normalizedValue = (value - minVal) / (maxVal - minVal);\n          // 将归一化值范围调整为 [a, 1]，其中 a 为略大于 0 的数值，例如 0.1\n          const a = 0.1;\n          return 10*(normalizedValue * (1 - a) + a);\n        };\n  \n        const simulation = d3.forceSimulation(nodes)\n          .force(\"link\", d3.forceLink(links).id(d => d.id))\n          // .distance(d => normalize(d.value)/100000))\n          .force(\"charge\", d3.forceManyBody().strength(-10))\n          .force(\"center\", d3.forceCenter(width / 2, height / 2).strength(0.3))\n          // .force(\"radial\", d3.forceRadial(500, width / 2, height / 2).strength(0.8))\n          // .force(\"x\", d3.forceX(width / 2).strength(0.05))\n          // .force(\"y\", d3.forceY(height / 2).strength(0.05))\n          .velocityDecay(this.velocityDecay)\n          .on(\"tick\", ticked);\n  \n        const svg = d3.select(this.$refs.dag);\n        svg.selectAll(\"*\").remove();\n  \n        svg.attr(\"viewBox\", `0 0 ${width} ${height}`)\n          .attr(\"width\", \"100%\")\n          .attr(\"height\", \"100%\")\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"max-width: 100%; height: auto;\")\n          .call(d3.zoom().scaleExtent([0.5, 8]).on(\"zoom\", zoomed));\n  \n        const colorMap = d3.scaleOrdinal()\n          .range(['#FF0000', '#A4D3EE', '#FF7F50', '#32CD32']);\n          const groupColorMap = {\n            0: \"#FF0000\",\n            1: \"#A4D3EE\",\n            2: \"#32CD32\",\n            3: \"#FF7F50\",\n          };\n  \n        const container = svg.append(\"g\");\n        const link = container.append(\"g\")\n          .attr(\"class\", \"link\")\n          .attr(\"stroke\", \"#999\")\n          .attr(\"stroke-opacity\", 0.6)\n          .selectAll(\"line\")\n          .data(links)\n          .join(\"line\")\n          .attr(\"stroke-width\", d => Math.sqrt(normalize(d.value)))\n          .attr(\"marker-end\", \"url(#arrowhead)\")\n          .attr(\"fill\", d => groupColorMap[d.group]);\n  \n        const border = container.append(\"g\")\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 20;\n            } else if (v.group === 3) {\n              return 15;\n            } else if (v.group === 2) {\n              return 15;\n            } else {\n              return 12.5;\n            }\n          })\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"none\")\n          .attr(\"stroke-width\", 2);\n  \n        const node = container.append(\"g\")\n          .attr(\"class\", \"nodes\")\n          .attr(\"id\", `node-class`)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"stroke-width\", 0.2)\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 18;\n            } else if (v.group === 3) {\n              return 13;\n            } else if (v.group === 2) {\n              return 13;\n            } else {\n              return 10.5;\n            }\n          })\n          .attr(\"fill\", d => groupColorMap[d.group])\n          .call(d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n  \n        const labels = container.append(\"g\")\n          .attr(\"class\", \"labels\")\n          .selectAll(\"text\")\n          .data(nodes)\n          .join(\"text\")\n          .attr(\"dx\", 6)\n          .attr(\"dy\", \".35em\")\n          .style(\"font-size\", \"12px\")  // 设置字体大小\n          .attr(\"stroke\", \"white\")\n          .attr(\"paint-order\", \"stroke\")\n          .text(d => {\n            if (d.group === 2 || d.group === 3) {\n              return `${d.id}`;\n            } else {\n              return \"\";\n            }\n          });\n  \n        node.on(\"mouseover\", function (event, d) {\n          border.attr(\"stroke\", (b) => b.id === d.id ? \"#6096E6\" : \"none\");\n        })\n          .on(\"mouseout\", function (event, d) {\n            border.attr(\"stroke\", \"none\");\n          });\n  \n        node.on(\"click\", function (event, d) {\n          const existingBox = document.querySelector('.option-box');\n          if (existingBox) {\n            if (parseInt(existingBox.dataset.nodeId) === parseInt(d.id)) {\n              existingBox.remove();\n              return;\n            }\n            existingBox.remove();\n          }\n          const options = d3.select(\"body\").append(\"div\")\n            .attr(\"class\", \"option-box\")\n            .attr(\"data-node-id\", d.id)\n            .style(\"position\", \"absolute\")\n            .style(\"left\", `${event.pageX + 10}px`)\n            .style(\"top\", `${event.pageY + 10}px`)\n            .style(\"display\", \"flex\")\n            .style(\"gap\", \"8px\")\n            .style(\"border\", \"1px solid #7F7F7F\")\n            .style(\"background-color\", \"#F7F7F7\")\n            .style(\"width\", \"86px\")\n            .style(\"height\", \"25px\")\n            .style(\"padding\", \"2.5px 0\")\n            .style(\"padding-left\", \"8px\")\n            .style(\"border-radius\", \"8px\")\n            .style(\"align-items\", \"center\")\n            .style(\"z-index\", 1000);\n          options.append(\"div\")\n            .text(\"+\")\n            .style(\"font-size\", \"20px\")\n            .style(\"color\", \"#679D43\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .on(\"click\", () => console.log(\"Plus clicked\", d));\n          options.append(\"div\")\n            .text(\"-\")\n            .text(\"-\")\n            .style(\"font-size\", \"20px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => console.log(\"Minus clicked\"));\n          options.append(\"div\")\n            .text(\"A\")\n            .style(\"font-size\", \"14px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => that.convertToImage(event, d));\n  \n          d3.select(\"body\").on(\"click\", function (event) {\n            if (!event.target.closest('.option-box') && !event.target.closest('circle')) {\n              d3.selectAll('.option-box').remove();\n            }\n          });\n  \n          event.stopPropagation();\n        });\n  \n        node.append(\"title\")\n          .text(d => `ID: ${d.id}, Distance: ${d.distance}`);\n  \n        svg.append(\"text\")\n          .attr(\"transform\", `translate(60, 50)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 15)\n          .text(`Recall: ${recall}`);\n  \n        const legend = svg.append(\"g\")\n          .attr(\"transform\", `translate(60, 60)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 10);\n  \n        const uniqueGroups = [...new Set(nodes.map(d => d.group))];\n        const legendItems = legend.selectAll(\"g\")\n          .data(uniqueGroups)\n          .enter().append(\"g\")\n          .attr(\"transform\", (d, i) => `translate(0,${i * 20})`);\n        legendItems.append(\"rect\")\n          .attr(\"width\", 18)\n          .attr(\"height\", 18)\n          .attr(\"fill\", d => groupColorMap[d]);\n  \n        legendItems.append(\"text\")\n          .attr(\"x\", 24)\n          .attr(\"y\", 9)\n          .attr(\"dy\", \"0.35em\")\n          .text(d => {\n                if (d === 0) {\n                  return \"start node\";\n                } else if (d === 1) {\n                  return \"normal node\";\n                } else if (d === 2) {\n                  return \"gt&search intersection\";\n                } else if (d === 3) {\n                  return \"search other\";\n                }\n              });\n  \n        function ticked() {\n          link\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y);\n          node\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n          border\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n  \n          labels\n            .attr(\"x\", d => d.x + 2)\n            .attr(\"y\", d => d.y + 0.35); // 这里设置文本的位置\n  \n          that.updateThumbnail();\n        }\n  \n        function dragstarted(event) {\n          if (!event.active) simulation.alphaTarget(0.2).restart();\n          event.subject.fx = event.subject.x;\n          event.subject.fy = event.subject.y;\n        }\n  \n        function dragged(event) {\n          event.subject.fx = event.x;\n          event.subject.fy = event.y;\n        }\n  \n        function dragended(event) {\n          if (!event.active) simulation.alphaTarget(0);\n          event.subject.fx = null;\n          event.subject.fy = null;\n        }\n  \n        function zoomed(event) {\n          container.attr(\"transform\", event.transform);\n          that.updateThumbnail();\n        }\n  \n      },\n    },\n    computed: {\n      ...mapState({\n        dataNodelink: \"dataNodeLink\",\n        retrievalSet: \"retrievalSet\",\n        datasetName: \"datasetName\",\n        modelName: \"modelName\",\n        retrievalInfo: \"retrievalInfo\",\n        isDone: \"isDone\"\n      }),\n    },\n    watch: {\n  \n      // dataNodelink(newVal, oldVal) {\n      //   console.log(\"可以实现更新\",newVal);\n      //   if (newVal !== oldVal) {\n  \n      //   }\n      // }\n  \n    }\n  };\n  </script>\n  \n  <style scoped lang=\"scss\">\n  .node-link-main {\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n    position: relative;\n  \n    .dag-svg {\n      height: 100%;\n      width: 100%;\n    }\n  \n    .thumbnail-svg {\n      position: absolute;\n      bottom: 20px;\n      left: 20px;\n      border: 1px solid #ccc;\n      background: #fff;\n    }\n  }\n  \n  .option-box {\n    border: 1px solid #F7F7F7;\n    background-color: #F7F7F7;\n    padding: 5px;\n    position: absolute;\n    z-index: 1000;\n  \n    div {\n      margin: 2px 0;\n      cursor: pointer;\n    }\n  \n    div:hover {\n      background-color: #f0f0f0;\n    }\n  }\n  \n  .option-button {\n    padding: 5px 10px;\n    border: 1px solid #000;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: #f0f0f0;\n    font-size: 14px;\n    font-family: Arial, sans-serif;\n    color: red;\n  }\n  \n  .option-button:hover {\n    background-color: #e0e0e0;\n  }\n  </style><template>\n    <div class=\"node-link-main\">\n      <svg ref=\"dag\" class=\"dag-svg\"></svg>\n      <svg ref=\"thumbnail\" class=\"thumbnail-svg\"></svg>\n    </div>\n  </template>\n  \n  <script>\n  import * as d3 from \"d3\";\n  import { mapState } from \"vuex\";\n  import api from \"@/api/data\";\n  \n  export default {\n    name: \"NodeLinkView\",\n    components: {},\n    data() {\n      return {\n        nodelinkdata: {},\n        svgWidth: 0,  // 页面的宽度\n        svgHeight: 0,   // 页面高度\n        velocityDecay: 0.6,\n        thumbnailWidth: 0, // 缩略图宽度\n        thumbnailHeight: 0, // 缩略图高度\n      };\n    },\n    mounted() {\n      this.getViewSize();\n      this.nodelinkdata = this.$store.state.dataNodeLink;\n      console.log(\"请输出 link data 来看一下连接线的 data\",this.nodelinkdata);\n      this.initGraph(this.nodelinkdata);\n    },\n    methods: {\n      getViewSize() {\n        const dag = this.$refs.dag;\n        this.svgHeight = dag.clientHeight;\n        this.svgWidth = dag.clientWidth;\n        this.thumbnailWidth = this.svgWidth / 5;  // 缩略图宽度和高度分别为整个svg 的1/5\n        this.thumbnailHeight = this.svgHeight / 5;\n        if (this.nodelinkdata.nodes) {\n          this.initGraph(this.nodelinkdata);\n          this.initThumbnail();\n        }\n      },\n      async convertToImage(event, node) {\n        const res = await api.getImageUrl({ \"datasetName\": this.$store.state.datasetName, \"nodeId\": node.id });\n        const imageUrl = res[\"data\"][\"imageUrl\"];\n        const targetElement = d3.select(event.target);\n        const targetBBox = targetElement.node().getBBox();\n        const targetWidth = targetBBox.width;\n        const targetHeight = targetBBox.height;\n        const patternId = `pattern-${node.id}`;\n        let pattern = d3.select(`#${patternId}`);\n        if (pattern.empty()) {\n          const svg = d3.select(`#node-class`);\n          let defs = svg.select(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          if (defs.empty()) {\n            defs = svg.append(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          }\n          const pattern = defs.append(\"pattern\")\n            .attr(\"id\", patternId)\n            .attr(\"patternUnits\", \"objectBoundingBox\")\n            .attr(\"width\", 1) // 宽度为 1 表示相对于目标元素的宽度\n            .attr(\"height\", 1) // 高度为 1 表示相对于目标元素的高度\n            .attr(\"patternTransform\", \"translate(1, 1)\"); // 向右和向下移动 10 个单位\n  \n          const image = pattern.append(\"image\")\n            .attr(\"xlink:href\", imageUrl)\n            .attr(\"width\", 58)\n            .attr(\"height\", 58)\n            .attr(\"preserveAspectRatio\", \"xMidYMid slice\");\n        }\n        targetElement\n          .attr(\"r\", 30)\n          .attr(\"fill\", `url(#pattern-${node.id})`)\n          .attr(\"stroke\", \"#000\") // 设置边框颜色\n          .attr(\"stroke-width\", 2); // 设置边框宽度;\n  \n      },\n      initThumbnail() {\n        const thumbnail = d3.select(this.$refs.thumbnail);\n        thumbnail\n          .attr(\"width\", this.thumbnailWidth)\n          .attr(\"height\", this.thumbnailHeight)\n          .attr(\"viewBox\", `0 0 ${this.svgWidth} ${this.svgHeight}`)\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"position: absolute; bottom: 20px; left: 20px; border: 1px solid #ccc; background: #fff;\");\n      },\n      updateThumbnail() {\n        const that = this;\n        const thumbnail = d3.select(that.$refs.thumbnail);\n        thumbnail.selectAll(\"*\").remove();\n        const container = thumbnail.append(\"g\")\n          .attr(\"transform\", `scale(${that.thumbnailWidth / that.svgWidth}, ${that.thumbnailHeight / that.svgHeight})`);\n  \n        // Clone legend and link nodes\n        const legendNode = d3.select(that.$refs.dag).select(\"g.nodes\").node().cloneNode(true);\n        const linkNode = d3.select(that.$refs.dag).select(\"g.link\").node().cloneNode(true);\n        container.append(() => legendNode);\n        container.append(() => linkNode);\n  \n      },\n  \n      initGraph(data) {\n        const that = this;\n        const width = that.svgWidth;\n        const height = that.svgHeight;\n        const recall = data[\"metric\"]['recall'];\n        const links = data.links.map(d => ({ ...d }));\n        const nodes = data.nodes.map(d => ({ ...d }));\n  \n        // 在这里获取 links value 中的最大值和最小值\n        const val = links.map(d => d.value);\n        const minVal = Math.min(...val);\n        const maxVal = Math.max(...val);\n  \n        // 定义归一化函数\n        // 定义归一化函数，确保最小值不为 0\n        const normalize = (value) => {\n          const normalizedValue = (value - minVal) / (maxVal - minVal);\n          // 将归一化值范围调整为 [a, 1]，其中 a 为略大于 0 的数值，例如 0.1\n          const a = 0.1;\n          return 10*(normalizedValue * (1 - a) + a);\n        };\n  \n        const simulation = d3.forceSimulation(nodes)\n          .force(\"link\", d3.forceLink(links).id(d => d.id))\n          // .distance(d => normalize(d.value)/100000))\n          .force(\"charge\", d3.forceManyBody().strength(-10))\n          .force(\"center\", d3.forceCenter(width / 2, height / 2).strength(0.3))\n          // .force(\"radial\", d3.forceRadial(500, width / 2, height / 2).strength(0.8))\n          // .force(\"x\", d3.forceX(width / 2).strength(0.05))\n          // .force(\"y\", d3.forceY(height / 2).strength(0.05))\n          .velocityDecay(this.velocityDecay)\n          .on(\"tick\", ticked);\n  \n        const svg = d3.select(this.$refs.dag);\n        svg.selectAll(\"*\").remove();\n  \n        svg.attr(\"viewBox\", `0 0 ${width} ${height}`)\n          .attr(\"width\", \"100%\")\n          .attr(\"height\", \"100%\")\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"max-width: 100%; height: auto;\")\n          .call(d3.zoom().scaleExtent([0.5, 8]).on(\"zoom\", zoomed));\n  \n        const colorMap = d3.scaleOrdinal()\n          .range(['#FF0000', '#A4D3EE', '#FF7F50', '#32CD32']);\n          const groupColorMap = {\n            0: \"#FF0000\",\n            1: \"#A4D3EE\",\n            2: \"#32CD32\",\n            3: \"#FF7F50\",\n          };\n  \n        const container = svg.append(\"g\");\n        const link = container.append(\"g\")\n          .attr(\"class\", \"link\")\n          .attr(\"stroke\", \"#999\")\n          .attr(\"stroke-opacity\", 0.6)\n          .selectAll(\"line\")\n          .data(links)\n          .join(\"line\")\n          .attr(\"stroke-width\", d => Math.sqrt(normalize(d.value)))\n          .attr(\"marker-end\", \"url(#arrowhead)\")\n          .attr(\"fill\", d => groupColorMap[d.group]);\n  \n        const border = container.append(\"g\")\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 20;\n            } else if (v.group === 3) {\n              return 15;\n            } else if (v.group === 2) {\n              return 15;\n            } else {\n              return 12.5;\n            }\n          })\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"none\")\n          .attr(\"stroke-width\", 2);\n  \n        const node = container.append(\"g\")\n          .attr(\"class\", \"nodes\")\n          .attr(\"id\", `node-class`)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"stroke-width\", 0.2)\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 18;\n            } else if (v.group === 3) {\n              return 13;\n            } else if (v.group === 2) {\n              return 13;\n            } else {\n              return 10.5;\n            }\n          })\n          .attr(\"fill\", d => groupColorMap[d.group])\n          .call(d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n  \n        const labels = container.append(\"g\")\n          .attr(\"class\", \"labels\")\n          .selectAll(\"text\")\n          .data(nodes)\n          .join(\"text\")\n          .attr(\"dx\", 6)\n          .attr(\"dy\", \".35em\")\n          .style(\"font-size\", \"12px\")  // 设置字体大小\n          .attr(\"stroke\", \"white\")\n          .attr(\"paint-order\", \"stroke\")\n          .text(d => {\n            if (d.group === 2 || d.group === 3) {\n              return `${d.id}`;\n            } else {\n              return \"\";\n            }\n          });\n  \n        node.on(\"mouseover\", function (event, d) {\n          border.attr(\"stroke\", (b) => b.id === d.id ? \"#6096E6\" : \"none\");\n        })\n          .on(\"mouseout\", function (event, d) {\n            border.attr(\"stroke\", \"none\");\n          });\n  \n        node.on(\"click\", function (event, d) {\n          const existingBox = document.querySelector('.option-box');\n          if (existingBox) {\n            if (parseInt(existingBox.dataset.nodeId) === parseInt(d.id)) {\n              existingBox.remove();\n              return;\n            }\n            existingBox.remove();\n          }\n          const options = d3.select(\"body\").append(\"div\")\n            .attr(\"class\", \"option-box\")\n            .attr(\"data-node-id\", d.id)\n            .style(\"position\", \"absolute\")\n            .style(\"left\", `${event.pageX + 10}px`)\n            .style(\"top\", `${event.pageY + 10}px`)\n            .style(\"display\", \"flex\")\n            .style(\"gap\", \"8px\")\n            .style(\"border\", \"1px solid #7F7F7F\")\n            .style(\"background-color\", \"#F7F7F7\")\n            .style(\"width\", \"86px\")\n            .style(\"height\", \"25px\")\n            .style(\"padding\", \"2.5px 0\")\n            .style(\"padding-left\", \"8px\")\n            .style(\"border-radius\", \"8px\")\n            .style(\"align-items\", \"center\")\n            .style(\"z-index\", 1000);\n          options.append(\"div\")\n            .text(\"+\")\n            .style(\"font-size\", \"20px\")\n            .style(\"color\", \"#679D43\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .on(\"click\", () => console.log(\"Plus clicked\", d));\n          options.append(\"div\")\n            .text(\"-\")\n            .text(\"-\")\n            .style(\"font-size\", \"20px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => console.log(\"Minus clicked\"));\n          options.append(\"div\")\n            .text(\"A\")\n            .style(\"font-size\", \"14px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => that.convertToImage(event, d));\n  \n          d3.select(\"body\").on(\"click\", function (event) {\n            if (!event.target.closest('.option-box') && !event.target.closest('circle')) {\n              d3.selectAll('.option-box').remove();\n            }\n          });\n  \n          event.stopPropagation();\n        });\n  \n        node.append(\"title\")\n          .text(d => `ID: ${d.id}, Distance: ${d.distance}`);\n  \n        svg.append(\"text\")\n          .attr(\"transform\", `translate(60, 50)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 15)\n          .text(`Recall: ${recall}`);\n  \n        const legend = svg.append(\"g\")\n          .attr(\"transform\", `translate(60, 60)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 10);\n  \n        const uniqueGroups = [...new Set(nodes.map(d => d.group))];\n        const legendItems = legend.selectAll(\"g\")\n          .data(uniqueGroups)\n          .enter().append(\"g\")\n          .attr(\"transform\", (d, i) => `translate(0,${i * 20})`);\n        legendItems.append(\"rect\")\n          .attr(\"width\", 18)\n          .attr(\"height\", 18)\n          .attr(\"fill\", d => groupColorMap[d]);\n  \n        legendItems.append(\"text\")\n          .attr(\"x\", 24)\n          .attr(\"y\", 9)\n          .attr(\"dy\", \"0.35em\")\n          .text(d => {\n                if (d === 0) {\n                  return \"start node\";\n                } else if (d === 1) {\n                  return \"normal node\";\n                } else if (d === 2) {\n                  return \"gt&search intersection\";\n                } else if (d === 3) {\n                  return \"search other\";\n                }\n              });\n  \n        function ticked() {\n          link\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y);\n          node\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n          border\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n  \n          labels\n            .attr(\"x\", d => d.x + 2)\n            .attr(\"y\", d => d.y + 0.35); // 这里设置文本的位置\n  \n          that.updateThumbnail();\n        }\n  \n        function dragstarted(event) {\n          if (!event.active) simulation.alphaTarget(0.2).restart();\n          event.subject.fx = event.subject.x;\n          event.subject.fy = event.subject.y;\n        }\n  \n        function dragged(event) {\n          event.subject.fx = event.x;\n          event.subject.fy = event.y;\n        }\n  \n        function dragended(event) {\n          if (!event.active) simulation.alphaTarget(0);\n          event.subject.fx = null;\n          event.subject.fy = null;\n        }\n  \n        function zoomed(event) {\n          container.attr(\"transform\", event.transform);\n          that.updateThumbnail();\n        }\n  \n      },\n    },\n    computed: {\n      ...mapState({\n        dataNodelink: \"dataNodeLink\",\n        retrievalSet: \"retrievalSet\",\n        datasetName: \"datasetName\",\n        modelName: \"modelName\",\n        retrievalInfo: \"retrievalInfo\",\n        isDone: \"isDone\"\n      }),\n    },\n    watch: {\n  \n      // dataNodelink(newVal, oldVal) {\n      //   console.log(\"可以实现更新\",newVal);\n      //   if (newVal !== oldVal) {\n  \n      //   }\n      // }\n  \n    }\n  };\n  </script>\n  \n  <style scoped lang=\"scss\">\n  .node-link-main {\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n    position: relative;\n  \n    .dag-svg {\n      height: 100%;\n      width: 100%;\n    }\n  \n    .thumbnail-svg {\n      position: absolute;\n      bottom: 20px;\n      left: 20px;\n      border: 1px solid #ccc;\n      background: #fff;\n    }\n  }\n  \n  .option-box {\n    border: 1px solid #F7F7F7;\n    background-color: #F7F7F7;\n    padding: 5px;\n    position: absolute;\n    z-index: 1000;\n  \n    div {\n      margin: 2px 0;\n      cursor: pointer;\n    }\n  \n    div:hover {\n      background-color: #f0f0f0;\n    }\n  }\n  \n  .option-button {\n    padding: 5px 10px;\n    border: 1px solid #000;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: #f0f0f0;\n    font-size: 14px;\n    font-family: Arial, sans-serif;\n    color: red;\n  }\n  \n  .option-button:hover {\n    background-color: #e0e0e0;\n  }\n  </style><template>\n    <div class=\"node-link-main\">\n      <svg ref=\"dag\" class=\"dag-svg\"></svg>\n      <svg ref=\"thumbnail\" class=\"thumbnail-svg\"></svg>\n    </div>\n  </template>\n  \n  <script>\n  import * as d3 from \"d3\";\n  import { mapState } from \"vuex\";\n  import api from \"@/api/data\";\n  \n  export default {\n    name: \"NodeLinkView\",\n    components: {},\n    data() {\n      return {\n        nodelinkdata: {},\n        svgWidth: 0,  // 页面的宽度\n        svgHeight: 0,   // 页面高度\n        velocityDecay: 0.6,\n        thumbnailWidth: 0, // 缩略图宽度\n        thumbnailHeight: 0, // 缩略图高度\n      };\n    },\n    mounted() {\n      this.getViewSize();\n      this.nodelinkdata = this.$store.state.dataNodeLink;\n      console.log(\"请输出 link data 来看一下连接线的 data\",this.nodelinkdata);\n      this.initGraph(this.nodelinkdata);\n    },\n    methods: {\n      getViewSize() {\n        const dag = this.$refs.dag;\n        this.svgHeight = dag.clientHeight;\n        this.svgWidth = dag.clientWidth;\n        this.thumbnailWidth = this.svgWidth / 5;  // 缩略图宽度和高度分别为整个svg 的1/5\n        this.thumbnailHeight = this.svgHeight / 5;\n        if (this.nodelinkdata.nodes) {\n          this.initGraph(this.nodelinkdata);\n          this.initThumbnail();\n        }\n      },\n      async convertToImage(event, node) {\n        const res = await api.getImageUrl({ \"datasetName\": this.$store.state.datasetName, \"nodeId\": node.id });\n        const imageUrl = res[\"data\"][\"imageUrl\"];\n        const targetElement = d3.select(event.target);\n        const targetBBox = targetElement.node().getBBox();\n        const targetWidth = targetBBox.width;\n        const targetHeight = targetBBox.height;\n        const patternId = `pattern-${node.id}`;\n        let pattern = d3.select(`#${patternId}`);\n        if (pattern.empty()) {\n          const svg = d3.select(`#node-class`);\n          let defs = svg.select(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          if (defs.empty()) {\n            defs = svg.append(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          }\n          const pattern = defs.append(\"pattern\")\n            .attr(\"id\", patternId)\n            .attr(\"patternUnits\", \"objectBoundingBox\")\n            .attr(\"width\", 1) // 宽度为 1 表示相对于目标元素的宽度\n            .attr(\"height\", 1) // 高度为 1 表示相对于目标元素的高度\n            .attr(\"patternTransform\", \"translate(1, 1)\"); // 向右和向下移动 10 个单位\n  \n          const image = pattern.append(\"image\")\n            .attr(\"xlink:href\", imageUrl)\n            .attr(\"width\", 58)\n            .attr(\"height\", 58)\n            .attr(\"preserveAspectRatio\", \"xMidYMid slice\");\n        }\n        targetElement\n          .attr(\"r\", 30)\n          .attr(\"fill\", `url(#pattern-${node.id})`)\n          .attr(\"stroke\", \"#000\") // 设置边框颜色\n          .attr(\"stroke-width\", 2); // 设置边框宽度;\n  \n      },\n      initThumbnail() {\n        const thumbnail = d3.select(this.$refs.thumbnail);\n        thumbnail\n          .attr(\"width\", this.thumbnailWidth)\n          .attr(\"height\", this.thumbnailHeight)\n          .attr(\"viewBox\", `0 0 ${this.svgWidth} ${this.svgHeight}`)\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"position: absolute; bottom: 20px; left: 20px; border: 1px solid #ccc; background: #fff;\");\n      },\n      updateThumbnail() {\n        const that = this;\n        const thumbnail = d3.select(that.$refs.thumbnail);\n        thumbnail.selectAll(\"*\").remove();\n        const container = thumbnail.append(\"g\")\n          .attr(\"transform\", `scale(${that.thumbnailWidth / that.svgWidth}, ${that.thumbnailHeight / that.svgHeight})`);\n  \n        // Clone legend and link nodes\n        const legendNode = d3.select(that.$refs.dag).select(\"g.nodes\").node().cloneNode(true);\n        const linkNode = d3.select(that.$refs.dag).select(\"g.link\").node().cloneNode(true);\n        container.append(() => legendNode);\n        container.append(() => linkNode);\n  \n      },\n  \n      initGraph(data) {\n        const that = this;\n        const width = that.svgWidth;\n        const height = that.svgHeight;\n        const recall = data[\"metric\"]['recall'];\n        const links = data.links.map(d => ({ ...d }));\n        const nodes = data.nodes.map(d => ({ ...d }));\n  \n        // 在这里获取 links value 中的最大值和最小值\n        const val = links.map(d => d.value);\n        const minVal = Math.min(...val);\n        const maxVal = Math.max(...val);\n  \n        // 定义归一化函数\n        // 定义归一化函数，确保最小值不为 0\n        const normalize = (value) => {\n          const normalizedValue = (value - minVal) / (maxVal - minVal);\n          // 将归一化值范围调整为 [a, 1]，其中 a 为略大于 0 的数值，例如 0.1\n          const a = 0.1;\n          return 10*(normalizedValue * (1 - a) + a);\n        };\n  \n        const simulation = d3.forceSimulation(nodes)\n          .force(\"link\", d3.forceLink(links).id(d => d.id))\n          // .distance(d => normalize(d.value)/100000))\n          .force(\"charge\", d3.forceManyBody().strength(-10))\n          .force(\"center\", d3.forceCenter(width / 2, height / 2).strength(0.3))\n          // .force(\"radial\", d3.forceRadial(500, width / 2, height / 2).strength(0.8))\n          // .force(\"x\", d3.forceX(width / 2).strength(0.05))\n          // .force(\"y\", d3.forceY(height / 2).strength(0.05))\n          .velocityDecay(this.velocityDecay)\n          .on(\"tick\", ticked);\n  \n        const svg = d3.select(this.$refs.dag);\n        svg.selectAll(\"*\").remove();\n  \n        svg.attr(\"viewBox\", `0 0 ${width} ${height}`)\n          .attr(\"width\", \"100%\")\n          .attr(\"height\", \"100%\")\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"max-width: 100%; height: auto;\")\n          .call(d3.zoom().scaleExtent([0.5, 8]).on(\"zoom\", zoomed));\n  \n        const colorMap = d3.scaleOrdinal()\n          .range(['#FF0000', '#A4D3EE', '#FF7F50', '#32CD32']);\n          const groupColorMap = {\n            0: \"#FF0000\",\n            1: \"#A4D3EE\",\n            2: \"#32CD32\",\n            3: \"#FF7F50\",\n          };\n  \n        const container = svg.append(\"g\");\n        const link = container.append(\"g\")\n          .attr(\"class\", \"link\")\n          .attr(\"stroke\", \"#999\")\n          .attr(\"stroke-opacity\", 0.6)\n          .selectAll(\"line\")\n          .data(links)\n          .join(\"line\")\n          .attr(\"stroke-width\", d => Math.sqrt(normalize(d.value)))\n          .attr(\"marker-end\", \"url(#arrowhead)\")\n          .attr(\"fill\", d => groupColorMap[d.group]);\n  \n        const border = container.append(\"g\")\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 20;\n            } else if (v.group === 3) {\n              return 15;\n            } else if (v.group === 2) {\n              return 15;\n            } else {\n              return 12.5;\n            }\n          })\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"none\")\n          .attr(\"stroke-width\", 2);\n  \n        const node = container.append(\"g\")\n          .attr(\"class\", \"nodes\")\n          .attr(\"id\", `node-class`)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"stroke-width\", 0.2)\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 18;\n            } else if (v.group === 3) {\n              return 13;\n            } else if (v.group === 2) {\n              return 13;\n            } else {\n              return 10.5;\n            }\n          })\n          .attr(\"fill\", d => groupColorMap[d.group])\n          .call(d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n  \n        const labels = container.append(\"g\")\n          .attr(\"class\", \"labels\")\n          .selectAll(\"text\")\n          .data(nodes)\n          .join(\"text\")\n          .attr(\"dx\", 6)\n          .attr(\"dy\", \".35em\")\n          .style(\"font-size\", \"12px\")  // 设置字体大小\n          .attr(\"stroke\", \"white\")\n          .attr(\"paint-order\", \"stroke\")\n          .text(d => {\n            if (d.group === 2 || d.group === 3) {\n              return `${d.id}`;\n            } else {\n              return \"\";\n            }\n          });\n  \n        node.on(\"mouseover\", function (event, d) {\n          border.attr(\"stroke\", (b) => b.id === d.id ? \"#6096E6\" : \"none\");\n        })\n          .on(\"mouseout\", function (event, d) {\n            border.attr(\"stroke\", \"none\");\n          });\n  \n        node.on(\"click\", function (event, d) {\n          const existingBox = document.querySelector('.option-box');\n          if (existingBox) {\n            if (parseInt(existingBox.dataset.nodeId) === parseInt(d.id)) {\n              existingBox.remove();\n              return;\n            }\n            existingBox.remove();\n          }\n          const options = d3.select(\"body\").append(\"div\")\n            .attr(\"class\", \"option-box\")\n            .attr(\"data-node-id\", d.id)\n            .style(\"position\", \"absolute\")\n            .style(\"left\", `${event.pageX + 10}px`)\n            .style(\"top\", `${event.pageY + 10}px`)\n            .style(\"display\", \"flex\")\n            .style(\"gap\", \"8px\")\n            .style(\"border\", \"1px solid #7F7F7F\")\n            .style(\"background-color\", \"#F7F7F7\")\n            .style(\"width\", \"86px\")\n            .style(\"height\", \"25px\")\n            .style(\"padding\", \"2.5px 0\")\n            .style(\"padding-left\", \"8px\")\n            .style(\"border-radius\", \"8px\")\n            .style(\"align-items\", \"center\")\n            .style(\"z-index\", 1000);\n          options.append(\"div\")\n            .text(\"+\")\n            .style(\"font-size\", \"20px\")\n            .style(\"color\", \"#679D43\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .on(\"click\", () => console.log(\"Plus clicked\", d));\n          options.append(\"div\")\n            .text(\"-\")\n            .text(\"-\")\n            .style(\"font-size\", \"20px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => console.log(\"Minus clicked\"));\n          options.append(\"div\")\n            .text(\"A\")\n            .style(\"font-size\", \"14px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => that.convertToImage(event, d));\n  \n          d3.select(\"body\").on(\"click\", function (event) {\n            if (!event.target.closest('.option-box') && !event.target.closest('circle')) {\n              d3.selectAll('.option-box').remove();\n            }\n          });\n  \n          event.stopPropagation();\n        });\n  \n        node.append(\"title\")\n          .text(d => `ID: ${d.id}, Distance: ${d.distance}`);\n  \n        svg.append(\"text\")\n          .attr(\"transform\", `translate(60, 50)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 15)\n          .text(`Recall: ${recall}`);\n  \n        const legend = svg.append(\"g\")\n          .attr(\"transform\", `translate(60, 60)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 10);\n  \n        const uniqueGroups = [...new Set(nodes.map(d => d.group))];\n        const legendItems = legend.selectAll(\"g\")\n          .data(uniqueGroups)\n          .enter().append(\"g\")\n          .attr(\"transform\", (d, i) => `translate(0,${i * 20})`);\n        legendItems.append(\"rect\")\n          .attr(\"width\", 18)\n          .attr(\"height\", 18)\n          .attr(\"fill\", d => groupColorMap[d]);\n  \n        legendItems.append(\"text\")\n          .attr(\"x\", 24)\n          .attr(\"y\", 9)\n          .attr(\"dy\", \"0.35em\")\n          .text(d => {\n                if (d === 0) {\n                  return \"start node\";\n                } else if (d === 1) {\n                  return \"normal node\";\n                } else if (d === 2) {\n                  return \"gt&search intersection\";\n                } else if (d === 3) {\n                  return \"search other\";\n                }\n              });\n  \n        function ticked() {\n          link\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y);\n          node\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n          border\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n  \n          labels\n            .attr(\"x\", d => d.x + 2)\n            .attr(\"y\", d => d.y + 0.35); // 这里设置文本的位置\n  \n          that.updateThumbnail();\n        }\n  \n        function dragstarted(event) {\n          if (!event.active) simulation.alphaTarget(0.2).restart();\n          event.subject.fx = event.subject.x;\n          event.subject.fy = event.subject.y;\n        }\n  \n        function dragged(event) {\n          event.subject.fx = event.x;\n          event.subject.fy = event.y;\n        }\n  \n        function dragended(event) {\n          if (!event.active) simulation.alphaTarget(0);\n          event.subject.fx = null;\n          event.subject.fy = null;\n        }\n  \n        function zoomed(event) {\n          container.attr(\"transform\", event.transform);\n          that.updateThumbnail();\n        }\n  \n      },\n    },\n    computed: {\n      ...mapState({\n        dataNodelink: \"dataNodeLink\",\n        retrievalSet: \"retrievalSet\",\n        datasetName: \"datasetName\",\n        modelName: \"modelName\",\n        retrievalInfo: \"retrievalInfo\",\n        isDone: \"isDone\"\n      }),\n    },\n    watch: {\n  \n      // dataNodelink(newVal, oldVal) {\n      //   console.log(\"可以实现更新\",newVal);\n      //   if (newVal !== oldVal) {\n  \n      //   }\n      // }\n  \n    }\n  };\n  </script>\n  \n  <style scoped lang=\"scss\">\n  .node-link-main {\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n    position: relative;\n  \n    .dag-svg {\n      height: 100%;\n      width: 100%;\n    }\n  \n    .thumbnail-svg {\n      position: absolute;\n      bottom: 20px;\n      left: 20px;\n      border: 1px solid #ccc;\n      background: #fff;\n    }\n  }\n  \n  .option-box {\n    border: 1px solid #F7F7F7;\n    background-color: #F7F7F7;\n    padding: 5px;\n    position: absolute;\n    z-index: 1000;\n  \n    div {\n      margin: 2px 0;\n      cursor: pointer;\n    }\n  \n    div:hover {\n      background-color: #f0f0f0;\n    }\n  }\n  \n  .option-button {\n    padding: 5px 10px;\n    border: 1px solid #000;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: #f0f0f0;\n    font-size: 14px;\n    font-family: Arial, sans-serif;\n    color: red;\n  }\n  \n  .option-button:hover {\n    background-color: #e0e0e0;\n  }\n  </style><template>\n    <div class=\"node-link-main\">\n      <svg ref=\"dag\" class=\"dag-svg\"></svg>\n      <svg ref=\"thumbnail\" class=\"thumbnail-svg\"></svg>\n    </div>\n  </template>\n  \n  <script>\n  import * as d3 from \"d3\";\n  import { mapState } from \"vuex\";\n  import api from \"@/api/data\";\n  \n  export default {\n    name: \"NodeLinkView\",\n    components: {},\n    data() {\n      return {\n        nodelinkdata: {},\n        svgWidth: 0,  // 页面的宽度\n        svgHeight: 0,   // 页面高度\n        velocityDecay: 0.6,\n        thumbnailWidth: 0, // 缩略图宽度\n        thumbnailHeight: 0, // 缩略图高度\n      };\n    },\n    mounted() {\n      this.getViewSize();\n      this.nodelinkdata = this.$store.state.dataNodeLink;\n      console.log(\"请输出 link data 来看一下连接线的 data\",this.nodelinkdata);\n      this.initGraph(this.nodelinkdata);\n    },\n    methods: {\n      getViewSize() {\n        const dag = this.$refs.dag;\n        this.svgHeight = dag.clientHeight;\n        this.svgWidth = dag.clientWidth;\n        this.thumbnailWidth = this.svgWidth / 5;  // 缩略图宽度和高度分别为整个svg 的1/5\n        this.thumbnailHeight = this.svgHeight / 5;\n        if (this.nodelinkdata.nodes) {\n          this.initGraph(this.nodelinkdata);\n          this.initThumbnail();\n        }\n      },\n      async convertToImage(event, node) {\n        const res = await api.getImageUrl({ \"datasetName\": this.$store.state.datasetName, \"nodeId\": node.id });\n        const imageUrl = res[\"data\"][\"imageUrl\"];\n        const targetElement = d3.select(event.target);\n        const targetBBox = targetElement.node().getBBox();\n        const targetWidth = targetBBox.width;\n        const targetHeight = targetBBox.height;\n        const patternId = `pattern-${node.id}`;\n        let pattern = d3.select(`#${patternId}`);\n        if (pattern.empty()) {\n          const svg = d3.select(`#node-class`);\n          let defs = svg.select(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          if (defs.empty()) {\n            defs = svg.append(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          }\n          const pattern = defs.append(\"pattern\")\n            .attr(\"id\", patternId)\n            .attr(\"patternUnits\", \"objectBoundingBox\")\n            .attr(\"width\", 1) // 宽度为 1 表示相对于目标元素的宽度\n            .attr(\"height\", 1) // 高度为 1 表示相对于目标元素的高度\n            .attr(\"patternTransform\", \"translate(1, 1)\"); // 向右和向下移动 10 个单位\n  \n          const image = pattern.append(\"image\")\n            .attr(\"xlink:href\", imageUrl)\n            .attr(\"width\", 58)\n            .attr(\"height\", 58)\n            .attr(\"preserveAspectRatio\", \"xMidYMid slice\");\n        }\n        targetElement\n          .attr(\"r\", 30)\n          .attr(\"fill\", `url(#pattern-${node.id})`)\n          .attr(\"stroke\", \"#000\") // 设置边框颜色\n          .attr(\"stroke-width\", 2); // 设置边框宽度;\n  \n      },\n      initThumbnail() {\n        const thumbnail = d3.select(this.$refs.thumbnail);\n        thumbnail\n          .attr(\"width\", this.thumbnailWidth)\n          .attr(\"height\", this.thumbnailHeight)\n          .attr(\"viewBox\", `0 0 ${this.svgWidth} ${this.svgHeight}`)\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"position: absolute; bottom: 20px; left: 20px; border: 1px solid #ccc; background: #fff;\");\n      },\n      updateThumbnail() {\n        const that = this;\n        const thumbnail = d3.select(that.$refs.thumbnail);\n        thumbnail.selectAll(\"*\").remove();\n        const container = thumbnail.append(\"g\")\n          .attr(\"transform\", `scale(${that.thumbnailWidth / that.svgWidth}, ${that.thumbnailHeight / that.svgHeight})`);\n  \n        // Clone legend and link nodes\n        const legendNode = d3.select(that.$refs.dag).select(\"g.nodes\").node().cloneNode(true);\n        const linkNode = d3.select(that.$refs.dag).select(\"g.link\").node().cloneNode(true);\n        container.append(() => legendNode);\n        container.append(() => linkNode);\n  \n      },\n  \n      initGraph(data) {\n        const that = this;\n        const width = that.svgWidth;\n        const height = that.svgHeight;\n        const recall = data[\"metric\"]['recall'];\n        const links = data.links.map(d => ({ ...d }));\n        const nodes = data.nodes.map(d => ({ ...d }));\n  \n        // 在这里获取 links value 中的最大值和最小值\n        const val = links.map(d => d.value);\n        const minVal = Math.min(...val);\n        const maxVal = Math.max(...val);\n  \n        // 定义归一化函数\n        // 定义归一化函数，确保最小值不为 0\n        const normalize = (value) => {\n          const normalizedValue = (value - minVal) / (maxVal - minVal);\n          // 将归一化值范围调整为 [a, 1]，其中 a 为略大于 0 的数值，例如 0.1\n          const a = 0.1;\n          return 10*(normalizedValue * (1 - a) + a);\n        };\n  \n        const simulation = d3.forceSimulation(nodes)\n          .force(\"link\", d3.forceLink(links).id(d => d.id))\n          // .distance(d => normalize(d.value)/100000))\n          .force(\"charge\", d3.forceManyBody().strength(-10))\n          .force(\"center\", d3.forceCenter(width / 2, height / 2).strength(0.3))\n          // .force(\"radial\", d3.forceRadial(500, width / 2, height / 2).strength(0.8))\n          // .force(\"x\", d3.forceX(width / 2).strength(0.05))\n          // .force(\"y\", d3.forceY(height / 2).strength(0.05))\n          .velocityDecay(this.velocityDecay)\n          .on(\"tick\", ticked);\n  \n        const svg = d3.select(this.$refs.dag);\n        svg.selectAll(\"*\").remove();\n  \n        svg.attr(\"viewBox\", `0 0 ${width} ${height}`)\n          .attr(\"width\", \"100%\")\n          .attr(\"height\", \"100%\")\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"max-width: 100%; height: auto;\")\n          .call(d3.zoom().scaleExtent([0.5, 8]).on(\"zoom\", zoomed));\n  \n        const colorMap = d3.scaleOrdinal()\n          .range(['#FF0000', '#A4D3EE', '#FF7F50', '#32CD32']);\n          const groupColorMap = {\n            0: \"#FF0000\",\n            1: \"#A4D3EE\",\n            2: \"#32CD32\",\n            3: \"#FF7F50\",\n          };\n  \n        const container = svg.append(\"g\");\n        const link = container.append(\"g\")\n          .attr(\"class\", \"link\")\n          .attr(\"stroke\", \"#999\")\n          .attr(\"stroke-opacity\", 0.6)\n          .selectAll(\"line\")\n          .data(links)\n          .join(\"line\")\n          .attr(\"stroke-width\", d => Math.sqrt(normalize(d.value)))\n          .attr(\"marker-end\", \"url(#arrowhead)\")\n          .attr(\"fill\", d => groupColorMap[d.group]);\n  \n        const border = container.append(\"g\")\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 20;\n            } else if (v.group === 3) {\n              return 15;\n            } else if (v.group === 2) {\n              return 15;\n            } else {\n              return 12.5;\n            }\n          })\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"none\")\n          .attr(\"stroke-width\", 2);\n  \n        const node = container.append(\"g\")\n          .attr(\"class\", \"nodes\")\n          .attr(\"id\", `node-class`)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"stroke-width\", 0.2)\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 18;\n            } else if (v.group === 3) {\n              return 13;\n            } else if (v.group === 2) {\n              return 13;\n            } else {\n              return 10.5;\n            }\n          })\n          .attr(\"fill\", d => groupColorMap[d.group])\n          .call(d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n  \n        const labels = container.append(\"g\")\n          .attr(\"class\", \"labels\")\n          .selectAll(\"text\")\n          .data(nodes)\n          .join(\"text\")\n          .attr(\"dx\", 6)\n          .attr(\"dy\", \".35em\")\n          .style(\"font-size\", \"12px\")  // 设置字体大小\n          .attr(\"stroke\", \"white\")\n          .attr(\"paint-order\", \"stroke\")\n          .text(d => {\n            if (d.group === 2 || d.group === 3) {\n              return `${d.id}`;\n            } else {\n              return \"\";\n            }\n          });\n  \n        node.on(\"mouseover\", function (event, d) {\n          border.attr(\"stroke\", (b) => b.id === d.id ? \"#6096E6\" : \"none\");\n        })\n          .on(\"mouseout\", function (event, d) {\n            border.attr(\"stroke\", \"none\");\n          });\n  \n        node.on(\"click\", function (event, d) {\n          const existingBox = document.querySelector('.option-box');\n          if (existingBox) {\n            if (parseInt(existingBox.dataset.nodeId) === parseInt(d.id)) {\n              existingBox.remove();\n              return;\n            }\n            existingBox.remove();\n          }\n          const options = d3.select(\"body\").append(\"div\")\n            .attr(\"class\", \"option-box\")\n            .attr(\"data-node-id\", d.id)\n            .style(\"position\", \"absolute\")\n            .style(\"left\", `${event.pageX + 10}px`)\n            .style(\"top\", `${event.pageY + 10}px`)\n            .style(\"display\", \"flex\")\n            .style(\"gap\", \"8px\")\n            .style(\"border\", \"1px solid #7F7F7F\")\n            .style(\"background-color\", \"#F7F7F7\")\n            .style(\"width\", \"86px\")\n            .style(\"height\", \"25px\")\n            .style(\"padding\", \"2.5px 0\")\n            .style(\"padding-left\", \"8px\")\n            .style(\"border-radius\", \"8px\")\n            .style(\"align-items\", \"center\")\n            .style(\"z-index\", 1000);\n          options.append(\"div\")\n            .text(\"+\")\n            .style(\"font-size\", \"20px\")\n            .style(\"color\", \"#679D43\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .on(\"click\", () => console.log(\"Plus clicked\", d));\n          options.append(\"div\")\n            .text(\"-\")\n            .text(\"-\")\n            .style(\"font-size\", \"20px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => console.log(\"Minus clicked\"));\n          options.append(\"div\")\n            .text(\"A\")\n            .style(\"font-size\", \"14px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => that.convertToImage(event, d));\n  \n          d3.select(\"body\").on(\"click\", function (event) {\n            if (!event.target.closest('.option-box') && !event.target.closest('circle')) {\n              d3.selectAll('.option-box').remove();\n            }\n          });\n  \n          event.stopPropagation();\n        });\n  \n        node.append(\"title\")\n          .text(d => `ID: ${d.id}, Distance: ${d.distance}`);\n  \n        svg.append(\"text\")\n          .attr(\"transform\", `translate(60, 50)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 15)\n          .text(`Recall: ${recall}`);\n  \n        const legend = svg.append(\"g\")\n          .attr(\"transform\", `translate(60, 60)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 10);\n  \n        const uniqueGroups = [...new Set(nodes.map(d => d.group))];\n        const legendItems = legend.selectAll(\"g\")\n          .data(uniqueGroups)\n          .enter().append(\"g\")\n          .attr(\"transform\", (d, i) => `translate(0,${i * 20})`);\n        legendItems.append(\"rect\")\n          .attr(\"width\", 18)\n          .attr(\"height\", 18)\n          .attr(\"fill\", d => groupColorMap[d]);\n  \n        legendItems.append(\"text\")\n          .attr(\"x\", 24)\n          .attr(\"y\", 9)\n          .attr(\"dy\", \"0.35em\")\n          .text(d => {\n                if (d === 0) {\n                  return \"start node\";\n                } else if (d === 1) {\n                  return \"normal node\";\n                } else if (d === 2) {\n                  return \"gt&search intersection\";\n                } else if (d === 3) {\n                  return \"search other\";\n                }\n              });\n  \n        function ticked() {\n          link\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y);\n          node\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n          border\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n  \n          labels\n            .attr(\"x\", d => d.x + 2)\n            .attr(\"y\", d => d.y + 0.35); // 这里设置文本的位置\n  \n          that.updateThumbnail();\n        }\n  \n        function dragstarted(event) {\n          if (!event.active) simulation.alphaTarget(0.2).restart();\n          event.subject.fx = event.subject.x;\n          event.subject.fy = event.subject.y;\n        }\n  \n        function dragged(event) {\n          event.subject.fx = event.x;\n          event.subject.fy = event.y;\n        }\n  \n        function dragended(event) {\n          if (!event.active) simulation.alphaTarget(0);\n          event.subject.fx = null;\n          event.subject.fy = null;\n        }\n  \n        function zoomed(event) {\n          container.attr(\"transform\", event.transform);\n          that.updateThumbnail();\n        }\n  \n      },\n    },\n    computed: {\n      ...mapState({\n        dataNodelink: \"dataNodeLink\",\n        retrievalSet: \"retrievalSet\",\n        datasetName: \"datasetName\",\n        modelName: \"modelName\",\n        retrievalInfo: \"retrievalInfo\",\n        isDone: \"isDone\"\n      }),\n    },\n    watch: {\n  \n      // dataNodelink(newVal, oldVal) {\n      //   console.log(\"可以实现更新\",newVal);\n      //   if (newVal !== oldVal) {\n  \n      //   }\n      // }\n  \n    }\n  };\n  </script>\n  \n  <style scoped lang=\"scss\">\n  .node-link-main {\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n    position: relative;\n  \n    .dag-svg {\n      height: 100%;\n      width: 100%;\n    }\n  \n    .thumbnail-svg {\n      position: absolute;\n      bottom: 20px;\n      left: 20px;\n      border: 1px solid #ccc;\n      background: #fff;\n    }\n  }\n  \n  .option-box {\n    border: 1px solid #F7F7F7;\n    background-color: #F7F7F7;\n    padding: 5px;\n    position: absolute;\n    z-index: 1000;\n  \n    div {\n      margin: 2px 0;\n      cursor: pointer;\n    }\n  \n    div:hover {\n      background-color: #f0f0f0;\n    }\n  }\n  \n  .option-button {\n    padding: 5px 10px;\n    border: 1px solid #000;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: #f0f0f0;\n    font-size: 14px;\n    font-family: Arial, sans-serif;\n    color: red;\n  }\n  \n  .option-button:hover {\n    background-color: #e0e0e0;\n  }\n  </style>"],"mappings":"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","ignoreList":[]}]}