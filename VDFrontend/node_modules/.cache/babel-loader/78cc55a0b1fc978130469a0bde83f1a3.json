{"remainingRequest":"/home/yansha/VDProject/VDFrontend/node_modules/babel-loader/lib/index.js!/home/yansha/VDProject/VDFrontend/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/yansha/VDProject/VDFrontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yansha/VDProject/VDFrontend/src/views/MainView/MiddleMainView/DistributionView.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/yansha/VDProject/VDFrontend/src/views/MainView/MiddleMainView/DistributionView.vue","mtime":1735302755848},{"path":"/home/yansha/VDProject/VDFrontend/babel.config.js","mtime":1730469387355},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/cache-loader/dist/cjs.js","mtime":1735202380381},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/babel-loader/lib/index.js","mtime":1735202380921},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/cache-loader/dist/cjs.js","mtime":1735202380381},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/vue-loader/lib/index.js","mtime":1735202381045}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["mapState","config","createRegl","d3","initWebGLMatrices","initWebGLBuffers","drawScatterPlot","drawGroupContour","updateWebGLBuffers","anyTrue","allTrue","redrawTopicGrid","LoaderWorker","TreeWorker","group","name","components","data","component","svg","svgFullSize","width","height","svgSize","svgPadding","top","bottom","left","right","topSvg","topicCanvases","pointCanvas","pointRegl","frontPositionBuffer","frontTextureCoordinateBuffer","frontBufferPointSize","searchPointCanvas","searchPointRegl","searchPointPositionBuffer","searchPointTextureCoordinateBuffer","searchPointResults","tooltipTop","tooltipBottom","hoverPoint","xScale","yScale","zoom","initZoomTransform","curZoomTransform","curZoomLevel","lastMouseClientPosition","hideHighlights","showContours","showGrid","showPoints","showLabel","dataURLs","promptPoints","gridData","tileData","contours","groupContour","contoursInitialized","loadedPointCount","timeTextureMap","groupNames","completedSearchQueryID","webGLMatrices","curPointWidth","topicLevelTrees","Map","lastGridTreeLevels","loaderWorker","treeWorker","footerStoreValue","embeddingName","numPoints","mounted","init","methods","dag","$refs","distributionMain","clientHeight","clientWidth","select","initWorker","initTopSvg","initCanvas","initSVGGroups","initData","then","forEach","c","classed","extent","scaleExtent","layout","zoomScale","interpolate","on","g","zoomed","zoomEnded","call","squareCanvasWidth","Math","min","zoomIdentity","json","$store","state","grid","undefined","console","log","xRange","yRange","xLength","yLength","padded","scaleLinear","domain","range","treeMessage","command","payload","groupIDs","times","postMessage","level","Object","keys","topic","tree","quadtree","x","d","y","addAll","set","parseInt","_this$pointCanvas","discomponent","append","attr","node","pos","push","umapGroup","topGroup","e","transform","scaleChanged","k","toString","onmessage","loaderWorkerMessageHandler","treeWorkerMessageHandler","points","isFirstBatch","searchMessage","newPoints","point","isLastBatch","length","error","message","url","Error","closestPoint","structuredClone","screenPointX","applyX","screenPointY","applyY","distance","max","abs","highlightRadius","scatterDotRadius","exp","curHoverRadius","HOVER_RADIUS","highlightPoint","animated","getCurZoomBox","box","invertX","invertY","computed","watch"],"sources":["src/views/MainView/MiddleMainView/DistributionView.vue"],"sourcesContent":["<template>\n    <div v-if=\"this.$store.state.isDone['DisT']\" class=\"distribution-main\" ref=\"distributionMain\">\n    </div>\n</template>\n\n\n<script>\nimport { mapState } from \"vuex\";\nimport { config } from '@/config/config';\nimport createRegl from 'regl';\nimport d3 from '../../../utils/d3-import';\nimport { initWebGLMatrices, initWebGLBuffers, drawScatterPlot, drawGroupContour, updateWebGLBuffers, anyTrue, allTrue } from '../../../components/Embedding/Embedding';\nimport { redrawTopicGrid } from '../../../components/Embedding/EmbeddingLabel';\nimport LoaderWorker from '../../../components/Embedding/workers/loader.worker';\nimport TreeWorker from '../../../components/Embedding/workers/tree.worker';\nimport { group } from \"d3\";\n\nexport default {\n    name: \"DistributionView\",\n    components: {\n\n    },\n    data() {\n        return {\n            component: null,    // HTMLElement： d3.select('.distribution-main')\n\n            svg: null,    // d3.Selection<HTMLElement, unknown, null, undefined>, unsed for drawing contour\n            svgFullSize: { width: 0, height: 0 },   // Size\n            svgSize: { width: 0, height: 0 }, // square draw \n            svgPadding: { top: 0, bottom: 0, left: 0, right: 0 }, // Padding\n\n            topSvg: null,   // d3.Selection<HTMLElement, unknown, null, undefined>, unsed for drawing hightlights\n            topicCanvases: [],  // used for drawing embedding points and others\n\n            // points\n            pointCanvas: null,\n            pointRegl: null,\n            frontPositionBuffer: null,\n            frontTextureCoordinateBuffer: null,\n            frontBufferPointSize: 0,\n\n            // search\n            searchPointCanvas: null,\n            searchPointRegl: null,\n            searchPointPositionBuffer: null,\n            searchPointTextureCoordinateBuffer: null,\n            searchPointResults: null,\n\n            // Tooltips\n            tooltipTop: null,\n            tooltipBottom: null,\n            hoverPoint: null,\n\n            xScale: null,\n            yScale: null,\n\n            // zooming\n            zoom: null, // d3.ZoomBehavior<HTMLElement, unknown>\n            initZoomTransform: null,\n            curZoomTransform: null,\n            curZoomLevel: 1,\n\n            // interaction\n            lastMouseClientPosition: null,\n            hideHighlights: false,\n\n            // user settings\n            showContours: [],\n            showGrid: true,\n            showPoints: [true],\n            showLabel: [false],\n\n            // data\n            dataURLs: null,\n            promptPoints: [],\n            gridData: null,\n            tileData: null,\n            contours: null,\n            groupContour: null,\n            contoursInitialized: false,\n            loadedPointCount: 1,\n\n            // Time\n            timeTextureMap: null,\n\n            // Group\n            groupNames: [],\n\n            // search\n            completedSearchQueryID: null,\n\n            // scatter plot\n            webGLMatrices: null,\n            curPointWidth: 1,\n\n            // display labels\n            topicLevelTrees: new Map(),\n            lastGridTreeLevels: [],\n\n\n\n            // Web workers\n            loaderWorker: null,\n            treeWorker: null,\n\n            // store\n            footerStoreValue: { xScale: null, embeddingName: null, numPoints: null }\n\n\n        };\n    },\n    mounted() {\n\n        this.init();\n\n    },\n    methods: {\n        init() {\n\n            const dag = this.$refs.distributionMain;\n            this.svgFullSize.height = dag.clientHeight;\n            this.svgFullSize.width = dag.clientWidth;\n\n            this.component = d3.select('.distribution-main');\n            this.showGrid = true;\n\n\n            this.initWorker();\n\n            this.initTopSvg();\n            // Initialize the canvases\n            this.initCanvas();\n            // \n            this.initSVGGroups();\n\n            this.initData().then(() => {\n\n                initWebGLMatrices(this); // 确保 this 指向 Vue 实例\n\n                initWebGLBuffers(this);\n                drawScatterPlot(this);\n\n                drawGroupContour(this);\n\n                this.topicCanvases.forEach(c => c.classed('hidden', !this.showGrid));\n\n                redrawTopicGrid(this, null);\n            });\n\n            // Register zoom\n            this.zoom = d3\n                .zoom()\n                .extent([\n                    [0, 0],\n                    [this.svgSize.width, this.svgSize.height]\n                ])\n                .scaleExtent([config.layout.zoomScale[0], config.layout.zoomScale[1]])\n                .interpolate(d3.interpolate)\n                .on('zoom', (g) => {\n                    (async () => {\n                        await this.zoomed(g);\n                    })();\n                })\n                .on('end', () => this.zoomEnded());\n\n            this.topSvg.call(this.zoom).on('dblclick.zoom', null);\n\n            const squareCanvasWidth = Math.min(\n                this.svgFullSize.width - this.svgPadding.left - this.svgPadding.right,\n                this.svgFullSize.height - this.svgPadding.top - this.svgPadding.bottom\n            );\n\n            this.svgSize = {\n                width: squareCanvasWidth,\n                height: squareCanvasWidth\n            };\n\n\n            this.curZoomTransform = d3.zoomIdentity;\n\n        },\n        async initData() {\n\n            const gridData = await d3.json(this.$store.state.dataURLs.grid);\n            if (gridData === undefined) {\n                console.log('Fail to load grid data');\n            }\n\n            this.gridData = gridData;\n\n            // Initialize the data scales\n            const xRange = this.gridData.xRange;\n            const yRange = this.gridData.yRange;\n\n            let xLength = xRange[1] - xRange[0];\n            let yLength = yRange[1] - yRange[0];\n\n            if (!this.gridData.padded) {\n                // Add padding for the data\n                if (xLength < yLength) {\n                    yRange[0] -= yLength / 50;\n                    yRange[1] += yLength / 50;\n                    yLength = yRange[1] - yRange[0];\n\n                    xRange[0] -= (yLength - xLength) / 2;\n                    xRange[1] += (yLength - xLength) / 2;\n                } else {\n                    // Add padding for the data\n                    xRange[0] -= xLength / 50;\n                    xRange[1] += xLength / 50;\n                    xLength = xRange[1] - xRange[0];\n\n                    yRange[0] -= (xLength - yLength) / 2;\n                    yRange[1] += (xLength - yLength) / 2;\n                }\n            }\n            this.xScale = d3\n                .scaleLinear()\n                .domain(xRange)\n                .range([0, this.svgSize.width]);\n\n            this.yScale = d3\n                .scaleLinear()\n                .domain(yRange)\n                .range([this.svgSize.height, 0]);\n\n            const treeMessage = {\n                command: 'initQuadtree',\n                payload: {\n                    xRange: xRange,\n                    yRange: yRange,\n                    groupIDs: -1,\n                    times: ['']\n                }\n            };\n\n            this.treeWorker.postMessage(treeMessage);\n\n            for (const level of Object.keys(this.gridData.topic.data)) {\n                const tree = d3\n                    .quadtree()\n                    .x(function (d) { return d[0]; })\n                    .y(function (d) { return d[1]; })\n                    .addAll(this.gridData.topic.data[level]);\n                this.topicLevelTrees.set(parseInt(level, 10), tree);\n            }\n\n        },\n        initCanvas() {\n\n            const discomponent = this.$refs.distributionMain;\n            this.pointCanvas = d3.select(discomponent)\n                .append('canvas')\n                .attr('class', 'embedding-canvas')\n                .attr('width', this.svgFullSize.width)\n                .attr('height', this.svgFullSize.height);\n\n            this.pointRegl = createRegl(this.pointCanvas?.node());\n\n            // this.searchPointCanvas = d3.select(discomponent)\n            //     .append('canvas')\n            //     .attr('class', 'search-point-canvas')\n            //     .attr('width', this.svgFullSize.width)\n            //     .attr('height', this.svgFullSize.height);\n\n            // this.searchPointRegl = createRegl(this.searchPointCanvas?.node());\n\n            this.topicCanvases = [];\n            for (const pos of ['top', 'bottom']) {\n                this.topicCanvases.push(\n                    d3\n                        .select(discomponent)\n                        .append('canvas')\n                        .attr('class', `topic-grid-canvas ${pos}`)\n                        .attr('width', `${this.svgFullSize.width}px`)\n                        .attr('height', `${this.svgFullSize.height}px`)\n                        .classed('hidden', !this.showGrid)\n                );\n            }\n\n        },\n        initSVGGroups() {\n\n            this.svg = this.component.append('svg')\n                .attr('class', \"embedding-svg\")\n                .attr('width', this.svgFullSize.width)\n                .attr('height', this.svgFullSize.height);\n\n\n            const umapGroup = this.svg\n                .append('g')\n                .attr('class', 'umap-group')\n                .attr(\n                    'transform',\n                    `translate(${this.svgPadding.left}, ${this.svgPadding.top})`\n                );\n\n            umapGroup\n                .append('g')\n                .attr('class', 'contour-group')\n                .classed('hidden', !this.showContours);\n\n        },\n        initTopSvg() {\n\n            // 创建一个 SVG 元素并设置其属性\n            this.topSvg = this.component.append('svg')\n                .attr('class', \"top-svg\")\n                .attr('width', this.svgFullSize.width)  // 设置宽度\n                .attr('height', this.svgFullSize.height) // 设置高度\n\n            const topSvg = d3.select('.top-svg')\n                .attr('width', `${this.svgFullSize.width}px`)\n                .attr('height', `${this.svgFullSize.height}px`);\n\n            const topGroup = topSvg.append('g').attr('class', 'top-group');\n\n            // topGroup\n            //     .append('rect')\n            //     .attr('class', 'mouse-track-rect')\n            //     .attr('width', this.svgFullSize.width)\n            //     .attr('height', this.svgFullSize.height);\n\n            // const topContent = topGroup.append('g').attr('class', 'top-content');\n\n            // topContent.append('g').attr('class', 'topics-bottom');\n            // topContent\n            //     .append('g')\n            //     .attr('class', 'topics');\n            // topContent.append('g').attr('class', 'topics-top');\n            // topContent.append('g').attr('class', 'highlights');\n\n        },\n        zoomed(e) {\n\n            const transform = e.transform;\n            const scaleChanged = this.curZoomTransform.k !== transform.k;\n            this.curZoomTransform = transform;\n\n            // === Task (1) ===\n            // Transform the SVG elements\n            this.svg.select('.umap-group').attr('transform', transform.toString());\n\n            // Transform the top SVG elements\n            this.topSvg\n                .select('.top-group')\n                .attr('transform', transform.toString());\n\n            // Transform the visible canvas elements\n            if (anyTrue(this.showPoints)) {\n                if (this.frontPositionBuffer && this.frontTextureCoordinateBuffer) {\n                    drawScatterPlot(this);\n                }\n            }\n\n            if (this.showGrid) {\n                redrawTopicGrid(this, null);\n            }\n\n\n\n        },\n        // Event handler for zoom ended\n        zoomEnded() {\n            console.log(\"svg zoom end !!!\")\n        },\n        initWorker() {\n            // Initialize the web worker to load data and deal with the quadtree\n            this.loaderWorker = new LoaderWorker();\n            this.loaderWorker.onmessage = (e) => {\n                this.loaderWorkerMessageHandler(e);\n            };\n\n            this.treeWorker = new TreeWorker();\n            this.treeWorker.onmessage = (e) => {\n                this.treeWorkerMessageHandler(e);\n            };\n        },\n        loaderWorkerMessageHandler(e) {\n            switch (e.data.command) {\n                case 'transferLoadData': {\n                    // Add these points to the quadtree ASAP\n                    const treeMessage = {\n                        command: 'updateQuadtree',\n                        payload: {\n                            points: e.data.payload.points\n                        }\n                    };\n                    this.treeWorker.postMessage(treeMessage);\n\n                    if (e.data.payload.isFirstBatch) {\n                        // Add the first batch points\n                        this.promptPoints = e.data.payload.points;\n\n                        initWebGLBuffers(this);\n                        if (anyTrue(this.showPoints)) {\n                            drawScatterPlot(this);\n                        }\n\n                        // Add the points to the search index\n                        const searchMessage = {\n                            command: 'addPoints',\n                            payload: {\n                                points: e.data.payload.points\n                            }\n                        };\n                        // this.searchWorker.postMessage(searchMessage);\n                    } else {\n                        // Batches after the first batch\n                        // Add the points to the prompt point list\n                        const newPoints = e.data.payload.points;\n                        for (const point of newPoints) {\n                            this.promptPoints.push(point);\n                        }\n\n                        // Add the points to the search index\n                        // const searchMessage = {\n                        //     command: 'addPoints',\n                        //     payload: {\n                        //         points: newPoints\n                        //     }\n                        // };\n                        // this.searchWorker.postMessage(searchMessage);\n\n                        // Add the new points to the WebGL buffers\n                        updateWebGLBuffers(this, newPoints);\n                        if (anyTrue(this.showPoints)) {\n                            drawScatterPlot(this);\n                        }\n\n                        if (e.data.payload.isLastBatch) {\n                            console.log('Finished loading all data.');\n                        }\n                    }\n\n                    // Update the data point count\n                    this.loadedPointCount = e.data.payload.loadedPointCount;\n\n                    // Update the footer\n                    this.footerStoreValue.numPoints = this.promptPoints.length;\n                    // this.footerStore.set(this.footerStoreValue);\n                    break;\n                }\n\n                default: {\n                    console.error('Unknown message', e.data.command);\n                    break;\n                }\n            }\n        },\n        treeWorkerMessageHandler(e) {\n            switch (e.data.command) {\n                case 'finishInitQuadtree': {\n                    // Tell the loader worker to start loading data\n                    // (need to wait to set up the quadtree to avoid racing)\n                    const message = {\n                        command: 'startLoadData',\n                        payload: { url: this.$store.state.dataURLs.point }\n                    };\n                    this.loaderWorker.postMessage(message);\n                    break;\n                }\n\n                case 'finishQuadtreeSearch': {\n                    if (this.lastMouseClientPosition === null) {\n                        throw new Error('lastMouseClientPosition is null');\n                    }\n                    // Check if the closest point is relatively close to the mouse\n                    const closestPoint = structuredClone(\n                        e.data.payload.point\n                    );\n                    const screenPointX = this.curZoomTransform.applyX(\n                        this.xScale(closestPoint.x)\n                    );\n                    const screenPointY = this.curZoomTransform.applyY(\n                        this.yScale(closestPoint.y)\n                    );\n\n                    const distance = Math.max(\n                        Math.abs(screenPointX - this.lastMouseClientPosition.x),\n                        Math.abs(screenPointY - this.lastMouseClientPosition.y)\n                    );\n\n                    const highlightRadius = Math.max(\n                        10 / this.curZoomTransform.k,\n                        (config.layout.scatterDotRadius *\n                            Math.exp(Math.log(this.curZoomTransform.k) * 0.55)) /\n                        this.curZoomTransform.k\n                    );\n\n                    // Highlight the point if it is close enough to the mouse\n                    const curHoverRadius = Math.max(\n                        HOVER_RADIUS,\n                        highlightRadius * this.curZoomTransform.k\n                    );\n\n                    if (distance <= curHoverRadius) {\n                        this.highlightPoint({ point: closestPoint, animated: false });\n                    } else {\n                        this.highlightPoint({ point: undefined, animated: false });\n                    }\n                    break;\n                }\n\n                default: {\n                    console.error('Unknown message', e.data.command);\n                    break;\n                }\n            }\n        },\n\n        getCurZoomBox() {\n            const box = {\n                x: this.curZoomTransform.invertX(0),\n                y: this.curZoomTransform.invertY(0),\n                width: Math.abs(\n                    this.curZoomTransform.invertX(this.svgFullSize.width) -\n                    this.curZoomTransform.invertX(0)\n                ),\n                height: Math.abs(\n                    this.curZoomTransform.invertY(this.svgFullSize.height) -\n                    this.curZoomTransform.invertY(0)\n                )\n            };\n            return box;\n        }\n    },\n    computed: {\n        ...mapState({\n        }),\n    },\n    watch: {\n\n    }\n};\n\n\n</script>\n\n<style lang=\"scss\">\n@use './DistributionView.scss';\n</style>"],"mappings":"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","ignoreList":[]}]}