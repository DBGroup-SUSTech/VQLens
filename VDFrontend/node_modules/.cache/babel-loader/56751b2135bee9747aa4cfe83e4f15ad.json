{"remainingRequest":"/home/yansha/VDProject/VDFrontend/node_modules/babel-loader/lib/index.js!/home/yansha/VDProject/VDFrontend/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/yansha/VDProject/VDFrontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yansha/VDProject/VDFrontend/src/views/MainView/MiddleMainView/DistributionView.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/yansha/VDProject/VDFrontend/src/views/MainView/MiddleMainView/DistributionView.vue","mtime":1735877434015},{"path":"/home/yansha/VDProject/VDFrontend/babel.config.js","mtime":1730469387355},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/cache-loader/dist/cjs.js","mtime":1735202380381},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/babel-loader/lib/index.js","mtime":1735202380921},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/cache-loader/dist/cjs.js","mtime":1735202380381},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/vue-loader/lib/index.js","mtime":1735202381045}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["mapState","config","createRegl","d3","initWebGLMatrices","initWebGLBuffers","drawScatterPlot","drawGroupContour","updateWebGLBuffers","anyTrue","allTrue","highlightPoint","displayGroupChanged","redrawTopicGrid","mouseoverLabel","LoaderWorker","TreeWorker","PointDrawer","HOVER_RADIUS","name","components","data","component","svg","svgFullSize","width","height","svgSize","svgPadding","top","bottom","left","right","topSvg","topicCanvases","pointCanvas","pointRegl","frontPositionBuffer","frontTextureCoordinateBuffer","frontBufferPointSize","searchPointCanvas","searchPointRegl","searchPointPositionBuffer","searchPointTextureCoordinateBuffer","searchPointResults","tooltipTop","tooltipBottom","hoverPoint","xScale","yScale","zoom","initZoomTransform","curZoomTransform","curZoomLevel","lastMouseClientPosition","hideHighlights","showContours","showGrid","showPoints","showLabel","dataURLs","promptPoints","gridData","tileData","contours","groupContour","contoursInitialized","loadedPointCount","timeTextureMap","groupNames","completedSearchQueryID","webGLMatrices","curPointWidth","topicLevelTrees","Map","lastGridTreeLevels","loaderWorker","treeWorker","footerStoreValue","embeddingName","numPoints","DEBUG","debug","handledFooterMessageID","mounted","init","methods","dag","$refs","distributionMain","clientHeight","clientWidth","select","initWorker","initTopSvg","initCanvas","initSVGGroups","initData","then","forEach","c","classed","extent","scaleExtent","layout","zoomScale","interpolate","on","g","zoomed","zoomEnded","call","document","querySelector","squareCanvasWidth","Math","min","zoomIdentity","json","$store","state","grid","undefined","console","log","xRange","yRange","xLength","yLength","padded","scaleLinear","domain","range","groupGrids","umapGroup","groupContours","i","length","push","append","attr","curContour","groupIDs","treeMessage","command","payload","times","postMessage","level","Object","keys","topic","tree","quadtree","x","d","y","addAll","set","parseInt","_this$pointCanvas","discomponent","node","pos","e","mousemoveHandler","point","animated","topGroup","topContent","transform","scaleChanged","k","toString","onmessage","loaderWorkerMessageHandler","treeWorkerMessageHandler","points","isFirstBatch","searchMessage","newPoints","isLastBatch","error","message","url","Error","closestPoint","structuredClone","screenPointX","applyX","screenPointY","applyY","distance","max","abs","highlightRadius","scatterDotRadius","exp","curHoverRadius","mouseoverPoint","dataX","invert","invertX","dataY","invertY","groupID","time","timeInspectMode","curTime","offsetX","offsetY","getCurZoomBox","box","computed","iconShow","watch","handler","newVal","deep"],"sources":["src/views/MainView/MiddleMainView/DistributionView.vue"],"sourcesContent":["<template>\n    <div class=\"mapview-class\">\n        <div id=\"popper-tooltip-top\" class=\"popper-tooltip hidden\" role=\"tooltip\">\n            <span class=\"popper-content\"></span>\n            <div class=\"popper-arrow\"></div>\n        </div>\n\n        <div id=\"popper-tooltip-bottom\" class=\"popper-tooltip hidden\" role=\"tooltip\">\n            <span class=\"popper-content\"></span>\n            <div class=\"popper-arrow\"></div>\n        </div>\n\n        <div v-if=\"this.$store.state.isDone['DisT']\" class=\"distribution-main\" ref=\"distributionMain\">\n        </div>\n\n    </div>\n\n</template>\n\n\n<script>\nimport { mapState } from \"vuex\";\nimport { config } from '@/config/config';\nimport createRegl from 'regl';\nimport d3 from '../../../utils/d3-import';\nimport { initWebGLMatrices, initWebGLBuffers, drawScatterPlot, drawGroupContour, updateWebGLBuffers, anyTrue, allTrue, highlightPoint, displayGroupChanged } from '../../../components/Embedding/Embedding';\nimport { redrawTopicGrid, mouseoverLabel } from '../../../components/Embedding/EmbeddingLabel';\nimport LoaderWorker from '../../../components/Embedding/workers/loader.worker.js';\nimport TreeWorker from '../../../components/Embedding/workers/tree.worker.js';\nimport * as PointDrawer from '../../../components/Embedding/EmbeddingPointWebGL'\nimport { HOVER_RADIUS } from '../../../utils/utils';\n\nexport default {\n    name: \"DistributionView\",\n    components: {\n\n    },\n    data() {\n        return {\n            component: null,    // HTMLElement： d3.select('.distribution-main')\n\n            svg: null,    // d3.Selection<HTMLElement, unknown, null, undefined>, unsed for drawing contour\n            svgFullSize: { width: 0, height: 0 },   // Size\n            svgSize: { width: 0, height: 0 }, // square draw \n            svgPadding: { top: 0, bottom: 0, left: 0, right: 0 }, // Padding\n\n            topSvg: null,   // d3.Selection<HTMLElement, unknown, null, undefined>, unsed for drawing hightlights\n            topicCanvases: [],  // used for drawing embedding points and others\n\n            // points\n            pointCanvas: null,\n            pointRegl: null,\n            frontPositionBuffer: null,\n            frontTextureCoordinateBuffer: null,\n            frontBufferPointSize: 0,\n\n            // search\n            searchPointCanvas: null,\n            searchPointRegl: null,\n            searchPointPositionBuffer: null,\n            searchPointTextureCoordinateBuffer: null,\n            searchPointResults: null,\n\n            // Tooltips\n            tooltipTop: null,\n            tooltipBottom: null,\n            hoverPoint: null,\n\n            xScale: null,\n            yScale: null,\n\n            // zooming\n            zoom: null, // d3.ZoomBehavior<HTMLElement, unknown>\n            initZoomTransform: null,\n            curZoomTransform: null,\n            curZoomLevel: 1,\n\n            // interaction\n            lastMouseClientPosition: null,\n            hideHighlights: false,\n\n            // user settings\n            showContours: [],\n            showGrid: true,\n            showPoints: [false],\n            showLabel: false,\n\n            // data\n            dataURLs: null,\n            promptPoints: [],\n            gridData: null,\n            tileData: null,\n            contours: null,\n            groupContour: null,\n            contoursInitialized: false,\n            loadedPointCount: 1,\n\n            // Time\n            timeTextureMap: null,\n\n            // Group\n            groupNames: [],\n\n            // search\n            completedSearchQueryID: null,\n\n            // scatter plot\n            webGLMatrices: null,\n            curPointWidth: 1,\n\n            // display labels\n            topicLevelTrees: new Map(),\n            lastGridTreeLevels: [],\n\n\n\n            // Web workers\n            loaderWorker: null,\n            treeWorker: null,\n\n            // store\n            footerStoreValue: { xScale: null, embeddingName: null, numPoints: null },\n\n\n            // other top\n            DEBUG: config.debug,\n\n            handledFooterMessageID: 0,\n\n\n        };\n    },\n    mounted() {\n\n        this.init();\n\n    },\n    methods: {\n        init() {\n\n            const dag = this.$refs.distributionMain;\n            this.svgFullSize.height = dag.clientHeight;\n            this.svgFullSize.width = dag.clientWidth;\n\n\n            this.component = d3.select('.distribution-main');\n            this.showGrid = true;\n\n\n            this.initWorker();\n\n            this.initTopSvg();\n            // Initialize the canvases\n            this.initCanvas();\n            // \n            this.initSVGGroups();\n\n            this.initData().then(() => {\n\n                initWebGLMatrices(this); // 确保 this 指向 Vue 实例\n\n                initWebGLBuffers(this);\n\n                drawScatterPlot(this);\n\n                displayGroupChanged(this, \"Image\")\n\n                // PointDrawer.drawGroupContour(this);\n\n                this.topicCanvases.forEach(c => c.classed('hidden', !this.showGrid));\n                this.showPoints = [true];\n                redrawTopicGrid(this, null);\n            });\n\n            // Register zoom\n            this.zoom = d3\n                .zoom()\n                .extent([\n                    [0, 0],\n                    [this.svgSize.width, this.svgSize.height]\n                ])\n                .scaleExtent([config.layout.zoomScale[0], config.layout.zoomScale[1]])\n                .interpolate(d3.interpolate)\n                .on('zoom', (g) => {\n                    (async () => {\n                        await this.zoomed(g);\n                    })();\n                })\n                .on('end', () => this.zoomEnded());\n\n            this.topSvg.call(this.zoom).on('dblclick.zoom', null);\n\n            this.tooltipTop = document.querySelector('#popper-tooltip-top');\n            this.tooltipBottom = document.querySelector('#popper-tooltip-bottom');\n\n            const squareCanvasWidth = Math.min(\n                this.svgFullSize.width - this.svgPadding.left - this.svgPadding.right,\n                this.svgFullSize.height - this.svgPadding.top - this.svgPadding.bottom\n            );\n\n            this.svgSize = {\n                width: squareCanvasWidth,\n                height: squareCanvasWidth\n            };\n\n\n            this.curZoomTransform = d3.zoomIdentity;\n\n        },\n        async initData() {\n\n            const gridData = await d3.json(this.$store.state.dataURLs.grid);\n            if (gridData === undefined) {\n                console.log('Fail to load grid data');\n            }\n\n            this.gridData = gridData;\n\n            // Initialize the data scales\n            const xRange = this.gridData.xRange;\n            const yRange = this.gridData.yRange;\n\n            let xLength = xRange[1] - xRange[0];\n            let yLength = yRange[1] - yRange[0];\n\n            if (!this.gridData.padded) {\n                // Add padding for the data\n                if (xLength < yLength) {\n                    yRange[0] -= yLength / 50;\n                    yRange[1] += yLength / 50;\n                    yLength = yRange[1] - yRange[0];\n\n                    xRange[0] -= (yLength - xLength) / 2;\n                    xRange[1] += (yLength - xLength) / 2;\n                } else {\n                    // Add padding for the data\n                    xRange[0] -= xLength / 50;\n                    xRange[1] += xLength / 50;\n                    xLength = xRange[1] - xRange[0];\n\n                    yRange[0] -= (xLength - yLength) / 2;\n                    yRange[1] += (xLength - yLength) / 2;\n                }\n            }\n            this.xScale = d3\n                .scaleLinear()\n                .domain(xRange)\n                .range([0, this.svgSize.width]);\n\n            this.yScale = d3\n                .scaleLinear()\n                .domain(yRange)\n                .range([this.svgSize.height, 0]);\n\n            // PointDrawer.drawGroupContour(this);\n\n\n            // Create group related structures if the data has groups\n            if (this.gridData.groupGrids && this.gridData.groupNames) {\n                this.groupNames = this.gridData.groupNames;\n                const umapGroup = this.svg.select('g.umap-group');\n\n                // Adjust the first contour's name\n                this.showContours = [];\n                this.showPoints = [];\n                this.groupContours = [];\n\n                for (let i = 0; i < this.groupNames.length; i++) {\n                    // Add groups to the control states\n                    // (Default is to show the first group only)\n                    this.showContours.push(i === 0);\n                    this.showPoints.push(i === 0);\n\n                    // Add contour elements for other groups\n                    const name = this.groupNames[i];\n                    umapGroup\n                        .append('g')\n                        .attr('class', `contour-group-generic contour-group-${name}`)\n                        .classed('hidden', i !== 0);\n\n                    // Drw the group contour\n                    const curContour = drawGroupContour(this, name);\n                    if (curContour !== null) {\n                        this.groupContours.push(curContour);\n                    }\n                }\n            }\n\n            // Tell the tree worker to prepare to add points to the tree\n            const groupIDs = [];\n\n            if (this.groupNames) {\n                for (let i = 0; i < this.groupNames.length; i++) {\n                    groupIDs.push(i);\n                }\n            }\n\n            const treeMessage = {\n                command: 'initQuadtree',\n                payload: {\n                    xRange: xRange,\n                    yRange: yRange,\n                    groupIDs: groupIDs,\n                    times: ['']\n                }\n            };\n\n            this.treeWorker.postMessage(treeMessage);\n\n            for (const level of Object.keys(this.gridData.topic.data)) {\n                const tree = d3\n                    .quadtree()\n                    .x(function (d) { return d[0]; })\n                    .y(function (d) { return d[1]; })\n                    .addAll(this.gridData.topic.data[level]);\n                this.topicLevelTrees.set(parseInt(level, 10), tree);\n            }\n\n\n\n\n        },\n        initCanvas() {\n\n            const discomponent = this.$refs.distributionMain;\n            this.pointCanvas = d3.select(discomponent)\n                .append('canvas')\n                .attr('class', 'embedding-canvas')\n                .attr('width', this.svgFullSize.width)\n                .attr('height', this.svgFullSize.height);\n\n            this.pointRegl = createRegl(this.pointCanvas?.node());\n\n            // this.searchPointCanvas = d3.select(discomponent)\n            //     .append('canvas')\n            //     .attr('class', 'search-point-canvas')\n            //     .attr('width', this.svgFullSize.width)\n            //     .attr('height', this.svgFullSize.height);\n\n            // this.searchPointRegl = createRegl(this.searchPointCanvas?.node());\n\n            this.topicCanvases = [];\n            for (const pos of ['top', 'bottom']) {\n                this.topicCanvases.push(\n                    d3\n                        .select(discomponent)\n                        .append('canvas')\n                        .attr('class', `topic-grid-canvas ${pos}`)\n                        .attr('width', `${this.svgFullSize.width}px`)\n                        .attr('height', `${this.svgFullSize.height}px`)\n                        .classed('hidden', !this.showGrid)\n                );\n            }\n\n        },\n        initSVGGroups() {\n\n            this.svg = this.component.append('svg')\n                .attr('class', \"embedding-svg\")\n                .attr('width', this.svgFullSize.width)\n                .attr('height', this.svgFullSize.height);\n\n\n            const umapGroup = this.svg\n                .append('g')\n                .attr('class', 'umap-group')\n                .attr(\n                    'transform',\n                    `translate(${this.svgPadding.left}, ${this.svgPadding.top})`\n                );\n\n            umapGroup\n                .append('g')\n                .attr('class', 'contour-group')\n                .classed('hidden', !this.showContours);\n\n        },\n        initTopSvg() {\n\n            // 创建一个 SVG 元素并设置其属性\n            this.topSvg = this.component.append('svg')\n                .attr('class', \"top-svg\")\n                .attr('width', `${this.svgFullSize.width}px`)\n                .attr('height', `${this.svgFullSize.height}px`) // 设置高度\n                .on('pointermove', e => this.mousemoveHandler(e))\n                .on('mouseleave', () => {\n                    highlightPoint(this, { point: undefined, animated: false });\n                    mouseoverLabel(this, null, null);\n                })\n                .attr(\n                    'transform',\n                    `translate(${this.svgPadding.left}, ${this.svgPadding.top})`\n                );\n\n\n            const topGroup = this.topSvg.append('g').attr('class', 'top-group');\n\n            topGroup\n                .append('rect')\n                .attr('class', 'mouse-track-rect')\n                .attr('width', this.svgFullSize.width)\n                .attr('height', this.svgFullSize.height);\n\n            const topContent = topGroup.append('g').attr('class', 'top-content');\n\n            topContent.append('g').attr('class', 'topics-bottom');\n            topContent\n                .append('g')\n                .attr('class', 'topics')\n                .classed('hidden', !this.showLabel);\n            topContent.append('g').attr('class', 'topics-top');\n            topContent.append('g').attr('class', 'highlights');\n\n\n\n        },\n        zoomed(e) {\n\n            const transform = e.transform;\n            const scaleChanged = this.curZoomTransform.k !== transform.k;\n            this.curZoomTransform = transform;\n\n            // === Task (1) ===\n            // Transform the SVG elements\n            this.svg.select('.umap-group').attr('transform', transform.toString());\n\n            // Transform the top SVG elements\n            this.topSvg\n                .select('.top-group')\n                .attr('transform', transform.toString());\n\n            // Transform the visible canvas elements\n            if (anyTrue(this.showPoints)) {\n                if (this.frontPositionBuffer && this.frontTextureCoordinateBuffer) {\n                    drawScatterPlot(this);\n                }\n            }\n\n            if (this.showGrid) {\n                redrawTopicGrid(this, null);\n            }\n\n\n\n        },\n        // Event handler for zoom ended\n        zoomEnded() {\n            console.log(\"svg zoom end !!!\")\n        },\n        initWorker() {\n            // Initialize the web worker to load data and deal with the quadtree\n            this.loaderWorker = new LoaderWorker();\n            console.log(\"LoaderWorker\", LoaderWorker)\n            this.loaderWorker.onmessage = (e) => {\n                this.loaderWorkerMessageHandler(e);\n            };\n\n            this.treeWorker = new TreeWorker();\n            console.log(\"treeWorker\", this.treeWorker)\n            this.treeWorker.onmessage = (e) => {\n                this.treeWorkerMessageHandler(e);\n            };\n        },\n        loaderWorkerMessageHandler(e) {\n            switch (e.data.command) {\n                case 'transferLoadData': {\n                    // Add these points to the quadtree ASAP\n                    const treeMessage = {\n                        command: 'updateQuadtree',\n                        payload: {\n                            points: e.data.payload.points\n                        }\n                    };\n                    this.treeWorker.postMessage(treeMessage);\n\n                    if (e.data.payload.isFirstBatch) {\n                        // Add the first batch points\n                        this.promptPoints = e.data.payload.points;\n\n                        initWebGLBuffers(this);\n                        if (anyTrue(this.showPoints)) {\n                            drawScatterPlot(this);\n                        }\n\n                        // Add the points to the search index\n                        const searchMessage = {\n                            command: 'addPoints',\n                            payload: {\n                                points: e.data.payload.points\n                            }\n                        };\n                        // this.searchWorker.postMessage(searchMessage);\n                    } else {\n                        // Batches after the first batch\n                        // Add the points to the prompt point list\n                        const newPoints = e.data.payload.points;\n                        for (const point of newPoints) {\n                            this.promptPoints.push(point);\n                        }\n\n                        // Add the points to the search index\n                        // const searchMessage = {\n                        //     command: 'addPoints',\n                        //     payload: {\n                        //         points: newPoints\n                        //     }\n                        // };\n                        // this.searchWorker.postMessage(searchMessage);\n\n                        // Add the new points to the WebGL buffers\n                        updateWebGLBuffers(this, newPoints);\n                        if (anyTrue(this.showPoints)) {\n                            drawScatterPlot(this);\n                        }\n\n                        if (e.data.payload.isLastBatch) {\n                            console.log('Finished loading all data.');\n                        }\n                    }\n\n                    // Update the data point count\n                    this.loadedPointCount = e.data.payload.loadedPointCount;\n\n                    // Update the footer\n                    this.footerStoreValue.numPoints = this.promptPoints.length;\n                    // this.footerStore.set(this.footerStoreValue);\n                    break;\n                }\n\n                default: {\n                    console.error('Unknown message', e.data.command);\n                    break;\n                }\n            }\n        },\n        treeWorkerMessageHandler(e) {\n            switch (e.data.command) {\n                case 'finishInitQuadtree': {\n                    // Tell the loader worker to start loading data\n                    // (need to wait to set up the quadtree to avoid racing)\n                    const message = {\n                        command: 'startLoadData',\n                        payload: { url: this.$store.state.dataURLs.point }\n                    };\n                    this.loaderWorker.postMessage(message);\n                    break;\n                }\n\n                case 'finishQuadtreeSearch': {\n                    if (this.lastMouseClientPosition === null) {\n                        throw new Error('lastMouseClientPosition is null');\n                    }\n                    // Check if the closest point is relatively close to the mouse\n                    const closestPoint = structuredClone(\n                        e.data.payload.point\n                    );\n                    const screenPointX = this.curZoomTransform.applyX(\n                        this.xScale(closestPoint.x)\n                    );\n                    const screenPointY = this.curZoomTransform.applyY(\n                        this.yScale(closestPoint.y)\n                    );\n\n                    const distance = Math.max(\n                        Math.abs(screenPointX - this.lastMouseClientPosition.x),\n                        Math.abs(screenPointY - this.lastMouseClientPosition.y)\n                    );\n\n                    const highlightRadius = Math.max(\n                        10 / this.curZoomTransform.k,\n                        (config.layout.scatterDotRadius *\n                            Math.exp(Math.log(this.curZoomTransform.k) * 0.55)) /\n                        this.curZoomTransform.k\n                    );\n\n                    // Highlight the point if it is close enough to the mouse\n                    const curHoverRadius = Math.max(\n                        HOVER_RADIUS,\n                        highlightRadius * this.curZoomTransform.k\n                    );\n\n                    if (distance <= curHoverRadius) {\n                        highlightPoint(this, { point: closestPoint, animated: false });\n                    } else {\n                        highlightPoint(this, { point: undefined, animated: false });\n                    }\n                    break;\n                }\n\n                default: {\n                    console.error('Unknown message', e.data.command);\n                    break;\n                }\n            }\n        },\n\n        mouseoverPoint(x, y) {\n            // Invert to the stage scale => invert to the data scale\n            const dataX = this.xScale.invert(this.curZoomTransform.invertX(x));\n            const dataY = this.yScale.invert(this.curZoomTransform.invertY(y));\n\n            // Let the worker to search the closest point in a radius\n            let groupID = -1;\n\n            if (this.groupNames) {\n                if (allTrue(this.showPoints)) {\n                    groupID = -1;\n                } else {\n                    // TODO: Need a better way to search slices of groups for multi groups\n                    for (let i = 0; i < this.showPoints.length; i++) {\n                        if (this.showPoints[i]) {\n                            groupID = i;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            const message = {\n                command: 'startQuadtreeSearch',\n                payload: {\n                    x: dataX,\n                    y: dataY,\n                    time: this.timeInspectMode && this.curTime ? this.curTime : '',\n                    groupID: groupID\n                }\n            };\n            this.treeWorker.postMessage(message);\n        },\n\n        mousemoveHandler(e) {\n            // Show tooltip when mouse over a data point on canvas\n            // We need to use color picking to figure out which point is hovered over\n            const x = e.offsetX;\n            const y = e.offsetY;\n            this.lastMouseClientPosition = { x: x, y: y };\n\n            // Show point highlight\n            if (anyTrue(this.showPoints) && !this.hideHighlights) {\n                this.mouseoverPoint(x, y);\n            }\n\n            // Show labels\n            if (!this.hideHighlights) {\n                mouseoverLabel(this, x, y);\n            }\n        },\n\n        getCurZoomBox() {\n            const box = {\n                x: this.curZoomTransform.invertX(0),\n                y: this.curZoomTransform.invertY(0),\n                width: Math.abs(\n                    this.curZoomTransform.invertX(this.svgFullSize.width) -\n                    this.curZoomTransform.invertX(0)\n                ),\n                height: Math.abs(\n                    this.curZoomTransform.invertY(this.svgFullSize.height) -\n                    this.curZoomTransform.invertY(0)\n                )\n            };\n            return box;\n        }\n    },\n    computed: {\n        ...mapState({\n            iconShow: \"iconShow\",\n        }),\n    },\n    watch: {\n        iconShow: {\n            handler(newVal) {\n                this.showGrid = newVal.grid;\n                this.topicCanvases.forEach(c => {\n                    c.classed('hidden', !this.showGrid);\n                });\n\n\n            },\n            deep: true,\n        }\n    }\n};\n\n\n</script>\n\n<style lang=\"scss\">\n@use './DistributionView.scss';\n</style>"],"mappings":"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","ignoreList":[]}]}