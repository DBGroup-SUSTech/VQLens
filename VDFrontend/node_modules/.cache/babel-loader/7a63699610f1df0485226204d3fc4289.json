{"remainingRequest":"/home/yansha/VDProject/VDFrontend/node_modules/babel-loader/lib/index.js!/home/yansha/VDProject/VDFrontend/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/yansha/VDProject/VDFrontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yansha/VDProject/VDFrontend/src/views/MainView/MiddleMainView/DistributionView.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/yansha/VDProject/VDFrontend/src/views/MainView/MiddleMainView/DistributionView.vue","mtime":1735823411608},{"path":"/home/yansha/VDProject/VDFrontend/babel.config.js","mtime":1730469387355},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/cache-loader/dist/cjs.js","mtime":1735202380381},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/babel-loader/lib/index.js","mtime":1735202380921},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/cache-loader/dist/cjs.js","mtime":1735202380381},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/vue-loader/lib/index.js","mtime":1735202381045}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["mapState","config","createRegl","d3","initWebGLMatrices","initWebGLBuffers","drawScatterPlot","drawGroupContour","updateWebGLBuffers","anyTrue","allTrue","highlightPoint","displayGroupChanged","redrawTopicGrid","mouseoverLabel","LoaderWorker","TreeWorker","HOVER_RADIUS","name","components","data","component","svg","svgFullSize","width","height","svgSize","svgPadding","top","bottom","left","right","topSvg","topicCanvases","pointCanvas","pointRegl","frontPositionBuffer","frontTextureCoordinateBuffer","frontBufferPointSize","searchPointCanvas","searchPointRegl","searchPointPositionBuffer","searchPointTextureCoordinateBuffer","searchPointResults","tooltipTop","tooltipBottom","hoverPoint","xScale","yScale","zoom","initZoomTransform","curZoomTransform","curZoomLevel","lastMouseClientPosition","hideHighlights","showContours","showGrid","showPoints","showLabel","dataURLs","promptPoints","gridData","tileData","contours","groupContour","contoursInitialized","loadedPointCount","timeTextureMap","groupNames","completedSearchQueryID","webGLMatrices","curPointWidth","topicLevelTrees","Map","lastGridTreeLevels","loaderWorker","treeWorker","footerStoreValue","embeddingName","numPoints","DEBUG","debug","handledFooterMessageID","mounted","init","methods","dag","$refs","distributionMain","clientHeight","clientWidth","console","log","select","initWorker","initTopSvg","initCanvas","initSVGGroups","initData","then","forEach","c","classed","extent","scaleExtent","layout","zoomScale","interpolate","on","g","zoomed","zoomEnded","call","document","querySelector","squareCanvasWidth","Math","min","zoomIdentity","json","$store","state","grid","undefined","xRange","yRange","xLength","yLength","padded","scaleLinear","domain","range","treeMessage","command","payload","groupIDs","times","postMessage","level","Object","keys","topic","tree","quadtree","x","d","y","addAll","set","parseInt","_this$pointCanvas","discomponent","append","attr","node","pos","push","umapGroup","e","mousemoveHandler","point","animated","topGroup","topContent","transform","scaleChanged","k","toString","onmessage","loaderWorkerMessageHandler","treeWorkerMessageHandler","points","isFirstBatch","searchMessage","newPoints","isLastBatch","length","error","message","url","Error","closestPoint","structuredClone","screenPointX","applyX","screenPointY","applyY","distance","max","abs","highlightRadius","scatterDotRadius","exp","curHoverRadius","mouseoverPoint","dataX","invert","invertX","dataY","invertY","groupID","i","time","timeInspectMode","curTime","offsetX","offsetY","getCurZoomBox","box","computed","iconShow","watch","handler","newVal","deep"],"sources":["src/views/MainView/MiddleMainView/DistributionView.vue"],"sourcesContent":["<template>\n    <div class=\"mapview-class\">\n        <div id=\"popper-tooltip-top\" class=\"popper-tooltip hidden\" role=\"tooltip\">\n            <span class=\"popper-content\"></span>\n            <div class=\"popper-arrow\"></div>\n        </div>\n\n        <div id=\"popper-tooltip-bottom\" class=\"popper-tooltip hidden\" role=\"tooltip\">\n            <span class=\"popper-content\"></span>\n            <div class=\"popper-arrow\"></div>\n        </div>\n\n        <div v-if=\"this.$store.state.isDone['DisT']\" class=\"distribution-main\" ref=\"distributionMain\">\n        </div>\n\n    </div>\n\n</template>\n\n\n<script>\nimport { mapState } from \"vuex\";\nimport { config } from '@/config/config';\nimport createRegl from 'regl';\nimport d3 from '../../../utils/d3-import';\nimport { initWebGLMatrices, initWebGLBuffers, drawScatterPlot, drawGroupContour, updateWebGLBuffers, anyTrue, allTrue, highlightPoint, displayGroupChanged } from '../../../components/Embedding/Embedding';\nimport { redrawTopicGrid, mouseoverLabel } from '../../../components/Embedding/EmbeddingLabel';\nimport LoaderWorker from '../../../components/Embedding/workers/loader.worker';\nimport TreeWorker from '../../../components/Embedding/workers/tree.worker';\n\nimport { HOVER_RADIUS } from '../../../utils/utils';\n\nexport default {\n    name: \"DistributionView\",\n    components: {\n\n    },\n    data() {\n        return {\n            component: null,    // HTMLElement： d3.select('.distribution-main')\n\n            svg: null,    // d3.Selection<HTMLElement, unknown, null, undefined>, unsed for drawing contour\n            svgFullSize: { width: 0, height: 0 },   // Size\n            svgSize: { width: 0, height: 0 }, // square draw \n            svgPadding: { top: 0, bottom: 0, left: 0, right: 0 }, // Padding\n\n            topSvg: null,   // d3.Selection<HTMLElement, unknown, null, undefined>, unsed for drawing hightlights\n            topicCanvases: [],  // used for drawing embedding points and others\n\n            // points\n            pointCanvas: null,\n            pointRegl: null,\n            frontPositionBuffer: null,\n            frontTextureCoordinateBuffer: null,\n            frontBufferPointSize: 0,\n\n            // search\n            searchPointCanvas: null,\n            searchPointRegl: null,\n            searchPointPositionBuffer: null,\n            searchPointTextureCoordinateBuffer: null,\n            searchPointResults: null,\n\n            // Tooltips\n            tooltipTop: null,\n            tooltipBottom: null,\n            hoverPoint: null,\n\n            xScale: null,\n            yScale: null,\n\n            // zooming\n            zoom: null, // d3.ZoomBehavior<HTMLElement, unknown>\n            initZoomTransform: null,\n            curZoomTransform: null,\n            curZoomLevel: 1,\n\n            // interaction\n            lastMouseClientPosition: null,\n            hideHighlights: false,\n\n            // user settings\n            showContours: [],\n            showGrid: null,\n            showPoints: [],\n            showLabel: false,\n\n            // data\n            dataURLs: null,\n            promptPoints: [],\n            gridData: null,\n            tileData: null,\n            contours: null,\n            groupContour: null,\n            contoursInitialized: false,\n            loadedPointCount: 1,\n\n            // Time\n            timeTextureMap: null,\n\n            // Group\n            groupNames: [],\n\n            // search\n            completedSearchQueryID: null,\n\n            // scatter plot\n            webGLMatrices: null,\n            curPointWidth: 1,\n\n            // display labels\n            topicLevelTrees: new Map(),\n            lastGridTreeLevels: [],\n\n\n\n            // Web workers\n            loaderWorker: null,\n            treeWorker: null,\n\n            // store\n            footerStoreValue: { xScale: null, embeddingName: null, numPoints: null },\n\n\n            // other top\n            DEBUG: config.debug,\n\n            handledFooterMessageID: 0,\n\n\n        };\n    },\n    mounted() {\n\n        this.init();\n\n    },\n    methods: {\n        init() {\n\n            const dag = this.$refs.distributionMain;\n            this.svgFullSize.height = dag.clientHeight;\n            this.svgFullSize.width = dag.clientWidth;\n\n            console.log(\"the svgFullsize\", this.svgFullSize)\n\n            this.component = d3.select('.distribution-main');\n            this.showGrid = true;\n\n\n            this.initWorker();\n\n            this.initTopSvg();\n            // Initialize the canvases\n            this.initCanvas();\n            // \n            this.initSVGGroups();\n\n            this.initData().then(() => {\n\n                initWebGLMatrices(this); // 确保 this 指向 Vue 实例\n\n                initWebGLBuffers(this);\n                displayGroupChanged(this, \"Image\")\n                drawScatterPlot(this);\n\n                drawGroupContour(this);\n\n                this.topicCanvases.forEach(c => c.classed('hidden', !this.showGrid));\n                this.showPoints = [true];\n                redrawTopicGrid(this, null);\n            });\n\n            // Register zoom\n            this.zoom = d3\n                .zoom()\n                .extent([\n                    [0, 0],\n                    [this.svgSize.width, this.svgSize.height]\n                ])\n                .scaleExtent([config.layout.zoomScale[0], config.layout.zoomScale[1]])\n                .interpolate(d3.interpolate)\n                .on('zoom', (g) => {\n                    (async () => {\n                        await this.zoomed(g);\n                    })();\n                })\n                .on('end', () => this.zoomEnded());\n\n            this.topSvg.call(this.zoom).on('dblclick.zoom', null);\n\n            this.tooltipTop = document.querySelector('#popper-tooltip-top');\n            this.tooltipBottom = document.querySelector('#popper-tooltip-bottom');\n\n            const squareCanvasWidth = Math.min(\n                this.svgFullSize.width - this.svgPadding.left - this.svgPadding.right,\n                this.svgFullSize.height - this.svgPadding.top - this.svgPadding.bottom\n            );\n\n            this.svgSize = {\n                width: squareCanvasWidth,\n                height: squareCanvasWidth\n            };\n\n\n            this.curZoomTransform = d3.zoomIdentity;\n\n        },\n        async initData() {\n\n            const gridData = await d3.json(this.$store.state.dataURLs.grid);\n            if (gridData === undefined) {\n                console.log('Fail to load grid data');\n            }\n\n            this.gridData = gridData;\n\n            // Initialize the data scales\n            const xRange = this.gridData.xRange;\n            const yRange = this.gridData.yRange;\n\n            let xLength = xRange[1] - xRange[0];\n            let yLength = yRange[1] - yRange[0];\n\n            if (!this.gridData.padded) {\n                // Add padding for the data\n                if (xLength < yLength) {\n                    yRange[0] -= yLength / 50;\n                    yRange[1] += yLength / 50;\n                    yLength = yRange[1] - yRange[0];\n\n                    xRange[0] -= (yLength - xLength) / 2;\n                    xRange[1] += (yLength - xLength) / 2;\n                } else {\n                    // Add padding for the data\n                    xRange[0] -= xLength / 50;\n                    xRange[1] += xLength / 50;\n                    xLength = xRange[1] - xRange[0];\n\n                    yRange[0] -= (xLength - yLength) / 2;\n                    yRange[1] += (xLength - yLength) / 2;\n                }\n            }\n            this.xScale = d3\n                .scaleLinear()\n                .domain(xRange)\n                .range([0, this.svgSize.width]);\n\n            this.yScale = d3\n                .scaleLinear()\n                .domain(yRange)\n                .range([this.svgSize.height, 0]);\n\n            const treeMessage = {\n                command: 'initQuadtree',\n                payload: {\n                    xRange: xRange,\n                    yRange: yRange,\n                    groupIDs: -1,\n                    times: ['']\n                }\n            };\n\n            this.treeWorker.postMessage(treeMessage);\n\n            for (const level of Object.keys(this.gridData.topic.data)) {\n                const tree = d3\n                    .quadtree()\n                    .x(function (d) { return d[0]; })\n                    .y(function (d) { return d[1]; })\n                    .addAll(this.gridData.topic.data[level]);\n                this.topicLevelTrees.set(parseInt(level, 10), tree);\n            }\n\n        },\n        initCanvas() {\n\n            const discomponent = this.$refs.distributionMain;\n            this.pointCanvas = d3.select(discomponent)\n                .append('canvas')\n                .attr('class', 'embedding-canvas')\n                .attr('width', this.svgFullSize.width)\n                .attr('height', this.svgFullSize.height);\n\n            this.pointRegl = createRegl(this.pointCanvas?.node());\n\n            // this.searchPointCanvas = d3.select(discomponent)\n            //     .append('canvas')\n            //     .attr('class', 'search-point-canvas')\n            //     .attr('width', this.svgFullSize.width)\n            //     .attr('height', this.svgFullSize.height);\n\n            // this.searchPointRegl = createRegl(this.searchPointCanvas?.node());\n\n            this.topicCanvases = [];\n            for (const pos of ['top', 'bottom']) {\n                this.topicCanvases.push(\n                    d3\n                        .select(discomponent)\n                        .append('canvas')\n                        .attr('class', `topic-grid-canvas ${pos}`)\n                        .attr('width', `${this.svgFullSize.width}px`)\n                        .attr('height', `${this.svgFullSize.height}px`)\n                        .classed('hidden', !this.showGrid)\n                );\n            }\n\n        },\n        initSVGGroups() {\n\n            this.svg = this.component.append('svg')\n                .attr('class', \"embedding-svg\")\n                .attr('width', this.svgFullSize.width)\n                .attr('height', this.svgFullSize.height);\n\n\n            const umapGroup = this.svg\n                .append('g')\n                .attr('class', 'umap-group')\n                .attr(\n                    'transform',\n                    `translate(${this.svgPadding.left}, ${this.svgPadding.top})`\n                );\n\n            umapGroup\n                .append('g')\n                .attr('class', 'contour-group')\n                .classed('hidden', !this.showContours);\n\n        },\n        initTopSvg() {\n\n            // 创建一个 SVG 元素并设置其属性\n            this.topSvg = this.component.append('svg')\n                .attr('class', \"top-svg\")\n                .attr('width', `${this.svgFullSize.width}px`)\n                .attr('height', `${this.svgFullSize.height}px`) // 设置高度\n                .on('pointermove', e => this.mousemoveHandler(e))\n                .on('mouseleave', () => {\n                    highlightPoint(this, { point: undefined, animated: false });\n                    mouseoverLabel(this, null, null);\n                })\n                .attr(\n                    'transform',\n                    `translate(${this.svgPadding.left}, ${this.svgPadding.top})`\n                );\n\n            console.log(\"the topSvg\", this.svgPadding)\n\n            const topGroup = this.topSvg.append('g').attr('class', 'top-group');\n\n            topGroup\n                .append('rect')\n                .attr('class', 'mouse-track-rect')\n                .attr('width', this.svgFullSize.width)\n                .attr('height', this.svgFullSize.height);\n\n            const topContent = topGroup.append('g').attr('class', 'top-content');\n\n            topContent.append('g').attr('class', 'topics-bottom');\n            topContent\n                .append('g')\n                .attr('class', 'topics')\n                .classed('hidden', !this.showLabel);\n            topContent.append('g').attr('class', 'topics-top');\n            topContent.append('g').attr('class', 'highlights');\n\n\n\n        },\n        zoomed(e) {\n\n            const transform = e.transform;\n            const scaleChanged = this.curZoomTransform.k !== transform.k;\n            this.curZoomTransform = transform;\n\n            // === Task (1) ===\n            // Transform the SVG elements\n            this.svg.select('.umap-group').attr('transform', transform.toString());\n\n            // Transform the top SVG elements\n            this.topSvg\n                .select('.top-group')\n                .attr('transform', transform.toString());\n\n            // Transform the visible canvas elements\n            if (anyTrue(this.showPoints)) {\n                if (this.frontPositionBuffer && this.frontTextureCoordinateBuffer) {\n                    drawScatterPlot(this);\n                }\n            }\n\n            if (this.showGrid) {\n                redrawTopicGrid(this, null);\n            }\n\n\n\n        },\n        // Event handler for zoom ended\n        zoomEnded() {\n            console.log(\"svg zoom end !!!\")\n        },\n        initWorker() {\n            // Initialize the web worker to load data and deal with the quadtree\n            this.loaderWorker = new LoaderWorker();\n            this.loaderWorker.onmessage = (e) => {\n                this.loaderWorkerMessageHandler(e);\n            };\n\n            this.treeWorker = new TreeWorker();\n            this.treeWorker.onmessage = (e) => {\n                this.treeWorkerMessageHandler(e);\n            };\n        },\n        loaderWorkerMessageHandler(e) {\n            switch (e.data.command) {\n                case 'transferLoadData': {\n                    // Add these points to the quadtree ASAP\n                    const treeMessage = {\n                        command: 'updateQuadtree',\n                        payload: {\n                            points: e.data.payload.points\n                        }\n                    };\n                    this.treeWorker.postMessage(treeMessage);\n\n                    if (e.data.payload.isFirstBatch) {\n                        // Add the first batch points\n                        this.promptPoints = e.data.payload.points;\n\n                        initWebGLBuffers(this);\n                        if (anyTrue(this.showPoints)) {\n                            drawScatterPlot(this);\n                        }\n\n                        // Add the points to the search index\n                        const searchMessage = {\n                            command: 'addPoints',\n                            payload: {\n                                points: e.data.payload.points\n                            }\n                        };\n                        // this.searchWorker.postMessage(searchMessage);\n                    } else {\n                        // Batches after the first batch\n                        // Add the points to the prompt point list\n                        const newPoints = e.data.payload.points;\n                        for (const point of newPoints) {\n                            this.promptPoints.push(point);\n                        }\n\n                        // Add the points to the search index\n                        // const searchMessage = {\n                        //     command: 'addPoints',\n                        //     payload: {\n                        //         points: newPoints\n                        //     }\n                        // };\n                        // this.searchWorker.postMessage(searchMessage);\n\n                        // Add the new points to the WebGL buffers\n                        updateWebGLBuffers(this, newPoints);\n                        if (anyTrue(this.showPoints)) {\n                            drawScatterPlot(this);\n                        }\n\n                        if (e.data.payload.isLastBatch) {\n                            console.log('Finished loading all data.');\n                        }\n                    }\n\n                    // Update the data point count\n                    this.loadedPointCount = e.data.payload.loadedPointCount;\n\n                    // Update the footer\n                    this.footerStoreValue.numPoints = this.promptPoints.length;\n                    // this.footerStore.set(this.footerStoreValue);\n                    break;\n                }\n\n                default: {\n                    console.error('Unknown message', e.data.command);\n                    break;\n                }\n            }\n        },\n        treeWorkerMessageHandler(e) {\n            switch (e.data.command) {\n                case 'finishInitQuadtree': {\n                    // Tell the loader worker to start loading data\n                    // (need to wait to set up the quadtree to avoid racing)\n                    const message = {\n                        command: 'startLoadData',\n                        payload: { url: this.$store.state.dataURLs.point }\n                    };\n                    this.loaderWorker.postMessage(message);\n                    break;\n                }\n\n                case 'finishQuadtreeSearch': {\n                    if (this.lastMouseClientPosition === null) {\n                        throw new Error('lastMouseClientPosition is null');\n                    }\n                    // Check if the closest point is relatively close to the mouse\n                    const closestPoint = structuredClone(\n                        e.data.payload.point\n                    );\n                    const screenPointX = this.curZoomTransform.applyX(\n                        this.xScale(closestPoint.x)\n                    );\n                    const screenPointY = this.curZoomTransform.applyY(\n                        this.yScale(closestPoint.y)\n                    );\n\n                    const distance = Math.max(\n                        Math.abs(screenPointX - this.lastMouseClientPosition.x),\n                        Math.abs(screenPointY - this.lastMouseClientPosition.y)\n                    );\n\n                    const highlightRadius = Math.max(\n                        10 / this.curZoomTransform.k,\n                        (config.layout.scatterDotRadius *\n                            Math.exp(Math.log(this.curZoomTransform.k) * 0.55)) /\n                        this.curZoomTransform.k\n                    );\n\n                    // Highlight the point if it is close enough to the mouse\n                    const curHoverRadius = Math.max(\n                        HOVER_RADIUS,\n                        highlightRadius * this.curZoomTransform.k\n                    );\n\n                    if (distance <= curHoverRadius) {\n                        highlightPoint(this, { point: closestPoint, animated: false });\n                    } else {\n                        highlightPoint(this, { point: undefined, animated: false });\n                    }\n                    break;\n                }\n\n                default: {\n                    console.error('Unknown message', e.data.command);\n                    break;\n                }\n            }\n        },\n\n        mouseoverPoint(x, y) {\n            // Invert to the stage scale => invert to the data scale\n            const dataX = this.xScale.invert(this.curZoomTransform.invertX(x));\n            const dataY = this.yScale.invert(this.curZoomTransform.invertY(y));\n\n            // Let the worker to search the closest point in a radius\n            let groupID = -1;\n\n            if (this.groupNames) {\n                if (allTrue(this.showPoints)) {\n                    groupID = -1;\n                } else {\n                    // TODO: Need a better way to search slices of groups for multi groups\n                    for (let i = 0; i < this.showPoints.length; i++) {\n                        if (this.showPoints[i]) {\n                            groupID = i;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            const message = {\n                command: 'startQuadtreeSearch',\n                payload: {\n                    x: dataX,\n                    y: dataY,\n                    time: this.timeInspectMode && this.curTime ? this.curTime : '',\n                    groupID: groupID\n                }\n            };\n            this.treeWorker.postMessage(message);\n        },\n\n        mousemoveHandler(e) {\n            // Show tooltip when mouse over a data point on canvas\n            // We need to use color picking to figure out which point is hovered over\n            const x = e.offsetX;\n            const y = e.offsetY;\n            this.lastMouseClientPosition = { x: x, y: y };\n\n            // Show point highlight\n            if (anyTrue(this.showPoints) && !this.hideHighlights) {\n                this.mouseoverPoint(x, y);\n            }\n\n            // Show labels\n            if (!this.hideHighlights) {\n                mouseoverLabel(this, x, y);\n            }\n        },\n\n        getCurZoomBox() {\n            const box = {\n                x: this.curZoomTransform.invertX(0),\n                y: this.curZoomTransform.invertY(0),\n                width: Math.abs(\n                    this.curZoomTransform.invertX(this.svgFullSize.width) -\n                    this.curZoomTransform.invertX(0)\n                ),\n                height: Math.abs(\n                    this.curZoomTransform.invertY(this.svgFullSize.height) -\n                    this.curZoomTransform.invertY(0)\n                )\n            };\n            return box;\n        }\n    },\n    computed: {\n        ...mapState({\n            iconShow: \"iconShow\",\n        }),\n    },\n    watch: {\n        iconShow: {\n            handler(newVal) {\n                this.showGrid = newVal.grid;\n                this.topicCanvases.forEach(c => {\n                    c.classed('hidden', !this.showGrid);\n                });\n\n\n            },\n            deep: true,\n        }\n    }\n};\n\n\n</script>\n\n<style lang=\"scss\">\n@use './DistributionView.scss';\n</style>"],"mappings":"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","ignoreList":[]}]}