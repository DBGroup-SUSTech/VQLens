{"remainingRequest":"/home/yansha/VDProject/VDFrontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yansha/VDProject/VDFrontend/src/views/MainView/MiddleMainView/DistributionView.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/yansha/VDProject/VDFrontend/src/views/MainView/MiddleMainView/DistributionView.vue","mtime":1735302755848},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/cache-loader/dist/cjs.js","mtime":1735202380381},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/babel-loader/lib/index.js","mtime":1735202380921},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/cache-loader/dist/cjs.js","mtime":1735202380381},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/vue-loader/lib/index.js","mtime":1735202381045}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["DistributionView.vue"],"names":[],"mappings":";AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"DistributionView.vue","sourceRoot":"src/views/MainView/MiddleMainView","sourcesContent":["<template>\n    <div v-if=\"this.$store.state.isDone['DisT']\" class=\"distribution-main\" ref=\"distributionMain\">\n    </div>\n</template>\n\n\n<script>\nimport { mapState } from \"vuex\";\nimport { config } from '@/config/config';\nimport createRegl from 'regl';\nimport d3 from '../../../utils/d3-import';\nimport { initWebGLMatrices, initWebGLBuffers, drawScatterPlot, drawGroupContour, updateWebGLBuffers, anyTrue, allTrue } from '../../../components/Embedding/Embedding';\nimport { redrawTopicGrid } from '../../../components/Embedding/EmbeddingLabel';\nimport LoaderWorker from '../../../components/Embedding/workers/loader.worker';\nimport TreeWorker from '../../../components/Embedding/workers/tree.worker';\nimport { group } from \"d3\";\n\nexport default {\n    name: \"DistributionView\",\n    components: {\n\n    },\n    data() {\n        return {\n            component: null,    // HTMLElement： d3.select('.distribution-main')\n\n            svg: null,    // d3.Selection<HTMLElement, unknown, null, undefined>, unsed for drawing contour\n            svgFullSize: { width: 0, height: 0 },   // Size\n            svgSize: { width: 0, height: 0 }, // square draw \n            svgPadding: { top: 0, bottom: 0, left: 0, right: 0 }, // Padding\n\n            topSvg: null,   // d3.Selection<HTMLElement, unknown, null, undefined>, unsed for drawing hightlights\n            topicCanvases: [],  // used for drawing embedding points and others\n\n            // points\n            pointCanvas: null,\n            pointRegl: null,\n            frontPositionBuffer: null,\n            frontTextureCoordinateBuffer: null,\n            frontBufferPointSize: 0,\n\n            // search\n            searchPointCanvas: null,\n            searchPointRegl: null,\n            searchPointPositionBuffer: null,\n            searchPointTextureCoordinateBuffer: null,\n            searchPointResults: null,\n\n            // Tooltips\n            tooltipTop: null,\n            tooltipBottom: null,\n            hoverPoint: null,\n\n            xScale: null,\n            yScale: null,\n\n            // zooming\n            zoom: null, // d3.ZoomBehavior<HTMLElement, unknown>\n            initZoomTransform: null,\n            curZoomTransform: null,\n            curZoomLevel: 1,\n\n            // interaction\n            lastMouseClientPosition: null,\n            hideHighlights: false,\n\n            // user settings\n            showContours: [],\n            showGrid: true,\n            showPoints: [true],\n            showLabel: [false],\n\n            // data\n            dataURLs: null,\n            promptPoints: [],\n            gridData: null,\n            tileData: null,\n            contours: null,\n            groupContour: null,\n            contoursInitialized: false,\n            loadedPointCount: 1,\n\n            // Time\n            timeTextureMap: null,\n\n            // Group\n            groupNames: [],\n\n            // search\n            completedSearchQueryID: null,\n\n            // scatter plot\n            webGLMatrices: null,\n            curPointWidth: 1,\n\n            // display labels\n            topicLevelTrees: new Map(),\n            lastGridTreeLevels: [],\n\n\n\n            // Web workers\n            loaderWorker: null,\n            treeWorker: null,\n\n            // store\n            footerStoreValue: { xScale: null, embeddingName: null, numPoints: null }\n\n\n        };\n    },\n    mounted() {\n\n        this.init();\n\n    },\n    methods: {\n        init() {\n\n            const dag = this.$refs.distributionMain;\n            this.svgFullSize.height = dag.clientHeight;\n            this.svgFullSize.width = dag.clientWidth;\n\n            this.component = d3.select('.distribution-main');\n            this.showGrid = true;\n\n\n            this.initWorker();\n\n            this.initTopSvg();\n            // Initialize the canvases\n            this.initCanvas();\n            // \n            this.initSVGGroups();\n\n            this.initData().then(() => {\n\n                initWebGLMatrices(this); // 确保 this 指向 Vue 实例\n\n                initWebGLBuffers(this);\n                drawScatterPlot(this);\n\n                drawGroupContour(this);\n\n                this.topicCanvases.forEach(c => c.classed('hidden', !this.showGrid));\n\n                redrawTopicGrid(this, null);\n            });\n\n            // Register zoom\n            this.zoom = d3\n                .zoom()\n                .extent([\n                    [0, 0],\n                    [this.svgSize.width, this.svgSize.height]\n                ])\n                .scaleExtent([config.layout.zoomScale[0], config.layout.zoomScale[1]])\n                .interpolate(d3.interpolate)\n                .on('zoom', (g) => {\n                    (async () => {\n                        await this.zoomed(g);\n                    })();\n                })\n                .on('end', () => this.zoomEnded());\n\n            this.topSvg.call(this.zoom).on('dblclick.zoom', null);\n\n            const squareCanvasWidth = Math.min(\n                this.svgFullSize.width - this.svgPadding.left - this.svgPadding.right,\n                this.svgFullSize.height - this.svgPadding.top - this.svgPadding.bottom\n            );\n\n            this.svgSize = {\n                width: squareCanvasWidth,\n                height: squareCanvasWidth\n            };\n\n\n            this.curZoomTransform = d3.zoomIdentity;\n\n        },\n        async initData() {\n\n            const gridData = await d3.json(this.$store.state.dataURLs.grid);\n            if (gridData === undefined) {\n                console.log('Fail to load grid data');\n            }\n\n            this.gridData = gridData;\n\n            // Initialize the data scales\n            const xRange = this.gridData.xRange;\n            const yRange = this.gridData.yRange;\n\n            let xLength = xRange[1] - xRange[0];\n            let yLength = yRange[1] - yRange[0];\n\n            if (!this.gridData.padded) {\n                // Add padding for the data\n                if (xLength < yLength) {\n                    yRange[0] -= yLength / 50;\n                    yRange[1] += yLength / 50;\n                    yLength = yRange[1] - yRange[0];\n\n                    xRange[0] -= (yLength - xLength) / 2;\n                    xRange[1] += (yLength - xLength) / 2;\n                } else {\n                    // Add padding for the data\n                    xRange[0] -= xLength / 50;\n                    xRange[1] += xLength / 50;\n                    xLength = xRange[1] - xRange[0];\n\n                    yRange[0] -= (xLength - yLength) / 2;\n                    yRange[1] += (xLength - yLength) / 2;\n                }\n            }\n            this.xScale = d3\n                .scaleLinear()\n                .domain(xRange)\n                .range([0, this.svgSize.width]);\n\n            this.yScale = d3\n                .scaleLinear()\n                .domain(yRange)\n                .range([this.svgSize.height, 0]);\n\n            const treeMessage = {\n                command: 'initQuadtree',\n                payload: {\n                    xRange: xRange,\n                    yRange: yRange,\n                    groupIDs: -1,\n                    times: ['']\n                }\n            };\n\n            this.treeWorker.postMessage(treeMessage);\n\n            for (const level of Object.keys(this.gridData.topic.data)) {\n                const tree = d3\n                    .quadtree()\n                    .x(function (d) { return d[0]; })\n                    .y(function (d) { return d[1]; })\n                    .addAll(this.gridData.topic.data[level]);\n                this.topicLevelTrees.set(parseInt(level, 10), tree);\n            }\n\n        },\n        initCanvas() {\n\n            const discomponent = this.$refs.distributionMain;\n            this.pointCanvas = d3.select(discomponent)\n                .append('canvas')\n                .attr('class', 'embedding-canvas')\n                .attr('width', this.svgFullSize.width)\n                .attr('height', this.svgFullSize.height);\n\n            this.pointRegl = createRegl(this.pointCanvas?.node());\n\n            // this.searchPointCanvas = d3.select(discomponent)\n            //     .append('canvas')\n            //     .attr('class', 'search-point-canvas')\n            //     .attr('width', this.svgFullSize.width)\n            //     .attr('height', this.svgFullSize.height);\n\n            // this.searchPointRegl = createRegl(this.searchPointCanvas?.node());\n\n            this.topicCanvases = [];\n            for (const pos of ['top', 'bottom']) {\n                this.topicCanvases.push(\n                    d3\n                        .select(discomponent)\n                        .append('canvas')\n                        .attr('class', `topic-grid-canvas ${pos}`)\n                        .attr('width', `${this.svgFullSize.width}px`)\n                        .attr('height', `${this.svgFullSize.height}px`)\n                        .classed('hidden', !this.showGrid)\n                );\n            }\n\n        },\n        initSVGGroups() {\n\n            this.svg = this.component.append('svg')\n                .attr('class', \"embedding-svg\")\n                .attr('width', this.svgFullSize.width)\n                .attr('height', this.svgFullSize.height);\n\n\n            const umapGroup = this.svg\n                .append('g')\n                .attr('class', 'umap-group')\n                .attr(\n                    'transform',\n                    `translate(${this.svgPadding.left}, ${this.svgPadding.top})`\n                );\n\n            umapGroup\n                .append('g')\n                .attr('class', 'contour-group')\n                .classed('hidden', !this.showContours);\n\n        },\n        initTopSvg() {\n\n            // 创建一个 SVG 元素并设置其属性\n            this.topSvg = this.component.append('svg')\n                .attr('class', \"top-svg\")\n                .attr('width', this.svgFullSize.width)  // 设置宽度\n                .attr('height', this.svgFullSize.height) // 设置高度\n\n            const topSvg = d3.select('.top-svg')\n                .attr('width', `${this.svgFullSize.width}px`)\n                .attr('height', `${this.svgFullSize.height}px`);\n\n            const topGroup = topSvg.append('g').attr('class', 'top-group');\n\n            // topGroup\n            //     .append('rect')\n            //     .attr('class', 'mouse-track-rect')\n            //     .attr('width', this.svgFullSize.width)\n            //     .attr('height', this.svgFullSize.height);\n\n            // const topContent = topGroup.append('g').attr('class', 'top-content');\n\n            // topContent.append('g').attr('class', 'topics-bottom');\n            // topContent\n            //     .append('g')\n            //     .attr('class', 'topics');\n            // topContent.append('g').attr('class', 'topics-top');\n            // topContent.append('g').attr('class', 'highlights');\n\n        },\n        zoomed(e) {\n\n            const transform = e.transform;\n            const scaleChanged = this.curZoomTransform.k !== transform.k;\n            this.curZoomTransform = transform;\n\n            // === Task (1) ===\n            // Transform the SVG elements\n            this.svg.select('.umap-group').attr('transform', transform.toString());\n\n            // Transform the top SVG elements\n            this.topSvg\n                .select('.top-group')\n                .attr('transform', transform.toString());\n\n            // Transform the visible canvas elements\n            if (anyTrue(this.showPoints)) {\n                if (this.frontPositionBuffer && this.frontTextureCoordinateBuffer) {\n                    drawScatterPlot(this);\n                }\n            }\n\n            if (this.showGrid) {\n                redrawTopicGrid(this, null);\n            }\n\n\n\n        },\n        // Event handler for zoom ended\n        zoomEnded() {\n            console.log(\"svg zoom end !!!\")\n        },\n        initWorker() {\n            // Initialize the web worker to load data and deal with the quadtree\n            this.loaderWorker = new LoaderWorker();\n            this.loaderWorker.onmessage = (e) => {\n                this.loaderWorkerMessageHandler(e);\n            };\n\n            this.treeWorker = new TreeWorker();\n            this.treeWorker.onmessage = (e) => {\n                this.treeWorkerMessageHandler(e);\n            };\n        },\n        loaderWorkerMessageHandler(e) {\n            switch (e.data.command) {\n                case 'transferLoadData': {\n                    // Add these points to the quadtree ASAP\n                    const treeMessage = {\n                        command: 'updateQuadtree',\n                        payload: {\n                            points: e.data.payload.points\n                        }\n                    };\n                    this.treeWorker.postMessage(treeMessage);\n\n                    if (e.data.payload.isFirstBatch) {\n                        // Add the first batch points\n                        this.promptPoints = e.data.payload.points;\n\n                        initWebGLBuffers(this);\n                        if (anyTrue(this.showPoints)) {\n                            drawScatterPlot(this);\n                        }\n\n                        // Add the points to the search index\n                        const searchMessage = {\n                            command: 'addPoints',\n                            payload: {\n                                points: e.data.payload.points\n                            }\n                        };\n                        // this.searchWorker.postMessage(searchMessage);\n                    } else {\n                        // Batches after the first batch\n                        // Add the points to the prompt point list\n                        const newPoints = e.data.payload.points;\n                        for (const point of newPoints) {\n                            this.promptPoints.push(point);\n                        }\n\n                        // Add the points to the search index\n                        // const searchMessage = {\n                        //     command: 'addPoints',\n                        //     payload: {\n                        //         points: newPoints\n                        //     }\n                        // };\n                        // this.searchWorker.postMessage(searchMessage);\n\n                        // Add the new points to the WebGL buffers\n                        updateWebGLBuffers(this, newPoints);\n                        if (anyTrue(this.showPoints)) {\n                            drawScatterPlot(this);\n                        }\n\n                        if (e.data.payload.isLastBatch) {\n                            console.log('Finished loading all data.');\n                        }\n                    }\n\n                    // Update the data point count\n                    this.loadedPointCount = e.data.payload.loadedPointCount;\n\n                    // Update the footer\n                    this.footerStoreValue.numPoints = this.promptPoints.length;\n                    // this.footerStore.set(this.footerStoreValue);\n                    break;\n                }\n\n                default: {\n                    console.error('Unknown message', e.data.command);\n                    break;\n                }\n            }\n        },\n        treeWorkerMessageHandler(e) {\n            switch (e.data.command) {\n                case 'finishInitQuadtree': {\n                    // Tell the loader worker to start loading data\n                    // (need to wait to set up the quadtree to avoid racing)\n                    const message = {\n                        command: 'startLoadData',\n                        payload: { url: this.$store.state.dataURLs.point }\n                    };\n                    this.loaderWorker.postMessage(message);\n                    break;\n                }\n\n                case 'finishQuadtreeSearch': {\n                    if (this.lastMouseClientPosition === null) {\n                        throw new Error('lastMouseClientPosition is null');\n                    }\n                    // Check if the closest point is relatively close to the mouse\n                    const closestPoint = structuredClone(\n                        e.data.payload.point\n                    );\n                    const screenPointX = this.curZoomTransform.applyX(\n                        this.xScale(closestPoint.x)\n                    );\n                    const screenPointY = this.curZoomTransform.applyY(\n                        this.yScale(closestPoint.y)\n                    );\n\n                    const distance = Math.max(\n                        Math.abs(screenPointX - this.lastMouseClientPosition.x),\n                        Math.abs(screenPointY - this.lastMouseClientPosition.y)\n                    );\n\n                    const highlightRadius = Math.max(\n                        10 / this.curZoomTransform.k,\n                        (config.layout.scatterDotRadius *\n                            Math.exp(Math.log(this.curZoomTransform.k) * 0.55)) /\n                        this.curZoomTransform.k\n                    );\n\n                    // Highlight the point if it is close enough to the mouse\n                    const curHoverRadius = Math.max(\n                        HOVER_RADIUS,\n                        highlightRadius * this.curZoomTransform.k\n                    );\n\n                    if (distance <= curHoverRadius) {\n                        this.highlightPoint({ point: closestPoint, animated: false });\n                    } else {\n                        this.highlightPoint({ point: undefined, animated: false });\n                    }\n                    break;\n                }\n\n                default: {\n                    console.error('Unknown message', e.data.command);\n                    break;\n                }\n            }\n        },\n\n        getCurZoomBox() {\n            const box = {\n                x: this.curZoomTransform.invertX(0),\n                y: this.curZoomTransform.invertY(0),\n                width: Math.abs(\n                    this.curZoomTransform.invertX(this.svgFullSize.width) -\n                    this.curZoomTransform.invertX(0)\n                ),\n                height: Math.abs(\n                    this.curZoomTransform.invertY(this.svgFullSize.height) -\n                    this.curZoomTransform.invertY(0)\n                )\n            };\n            return box;\n        }\n    },\n    computed: {\n        ...mapState({\n        }),\n    },\n    watch: {\n\n    }\n};\n\n\n</script>\n\n<style lang=\"scss\">\n@use './DistributionView.scss';\n</style>"]}]}