{"remainingRequest":"/home/yansha/VDProject/VDFrontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yansha/VDProject/VDFrontend/src/views/MainView/RightMainView/TreeView.vue?vue&type=style&index=0&id=78a8813f&scoped=true&lang=scss","dependencies":[{"path":"/home/yansha/VDProject/VDFrontend/src/views/MainView/RightMainView/TreeView.vue","mtime":1744442733412},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/css-loader/dist/cjs.js","mtime":1735202380733},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1735202381341},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/@vue/cli-service/node_modules/postcss-loader/src/index.js","mtime":1735202380937},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/sass-loader/dist/cjs.js","mtime":1735202380381},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/cache-loader/dist/cjs.js","mtime":1735202380381},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/vue-loader/lib/index.js","mtime":1735202381045}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci50cmVlLW1haW4gewogIGhlaWdodDogMTAwJTsKICB3aWR0aDogMTAwJTsKICBvdmVyZmxvdzogYXV0bzsKCiAgLnRyZWUtc3ZnIHsKICAgIHdpZHRoOiAxMDAlOwogICAgaGVpZ2h0OiAxMDAlOwogIH0KCiAgLnRodW1ibmFpbC10cmVlLXN2ZyB7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICByaWdodDogMjBweDsKICAgIHRvcDogMTIwcHg7CiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjOwogICAgYmFja2dyb3VuZDogI2ZmZjsKICB9Cn0KCi5vcHRpb24tYm94IHsKICBib3JkZXI6IDFweCBzb2xpZCAjRjdGN0Y3OwogIGJhY2tncm91bmQtY29sb3I6ICNGN0Y3Rjc7CiAgcGFkZGluZzogNXB4OwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB6LWluZGV4OiAxMDAwOwoKICBkaXYgewogICAgbWFyZ2luOiAycHggMDsKICAgIGN1cnNvcjogcG9pbnRlcjsKICB9CgogIGRpdjpob3ZlciB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMGYwOwogIH0KfQoKLm9wdGlvbi1idXR0b24gewogIHBhZGRpbmc6IDVweCAxMHB4OwogIGJvcmRlcjogMXB4IHNvbGlkICMwMDA7CiAgYm9yZGVyLXJhZGl1czogNXB4OwogIGN1cnNvcjogcG9pbnRlcjsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMGYwOwogIGZvbnQtc2l6ZTogMTRweDsKICBmb250LWZhbWlseTogQXJpYWwsIHNhbnMtc2VyaWY7CiAgY29sb3I6IHJlZDsKfQoKLm9wdGlvbi1idXR0b246aG92ZXIgewogIGJhY2tncm91bmQtY29sb3I6ICNlMGUwZTA7Cn0K"},{"version":3,"sources":["TreeView.vue"],"names":[],"mappings":";AA4aA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"TreeView.vue","sourceRoot":"src/views/MainView/RightMainView","sourcesContent":["<template>\n  <div class=\"tree-main\" ref=\"treeMain\">\n    <svg ref=\"tree\" class=\"tree-svg\"></svg>\n    <!-- <svg ref=\"thumbnailTree\" class=\"thumbnail-tree-svg\"></svg> -->\n  </div>\n</template>\n\n<script>\n\nimport * as d3 from \"d3\";\nimport { mapState } from \"vuex\";\nimport api from \"@/api/data\";\n\nexport default {\n  name: \"TreeView\",\n  components: {},\n  data() {\n    return {\n      treeData: {},\n      svgWidth: 0,\n      svgHeight: 0,\n      velocityDecay: 0.6,\n      thumbnailTreeWidth: 0, // 缩略图宽度\n      thumbnailTreeHeight: 0, // 缩略图高度\n\n\n\n      oldSelectedNode: '-1',\n\n    };\n  },\n  mounted() {\n    this.getViewSize();\n\n    this.treeData = this.$store.state.dataTree;\n    this.initGraph(this.treeData);\n\n    // this.initThumbnail();\n\n  },\n  methods: {\n    getViewSize() {\n      const tree = this.$refs.treeMain;\n      this.svgWidth = tree.clientWidth;\n      this.svgHeight = tree.clientHeight;\n\n      this.thumbnailTreeWidth = this.svgWidth / 5;\n      this.thumbnailTreeHeight = this.svgHeight / 5;\n    },\n    updateSelectedNode(selectedNode) {\n\n      // 使用选择器查找节点\n      const selectedElement = d3.select(`#nodes-${selectedNode}`);\n\n      // 检查元素是否存在\n      if (!selectedElement.empty()) {\n        if (selectedNode === this.oldSelectedNode) {\n          selectedElement\n            .attr(\"r\", 10) // 边框半径\n            .attr(\"stroke\", \"none\") // 边框颜色\n            .attr(\"stroke-width\", 3); // 边框宽度\n\n          this.oldSelectedNode = '-1';\n\n        } else {\n          selectedElement\n            .attr(\"r\", 4) // 边框半径\n            .attr(\"stroke\", \"yellow\") // 边框颜色\n            .attr(\"stroke-width\", 4); // 边框宽度\n\n          this.oldSelectedNode = selectedNode;\n\n        }\n\n      } else if (this.oldSelectedNode !== -1) {\n        d3.select(`#nodes-${this.oldSelectedNode}`)\n          .attr(\"r\", 10) // 边框半径\n          .attr(\"stroke\", \"none\") // 边框颜色\n          .attr(\"stroke-width\", 3); // 边框宽度\n\n        this.oldSelectedNode = '-1';\n\n      } else {\n        console.log(`元素 #nodes-${selectedNode} 未找到`);\n      }\n\n\n    },\n    async convertToImage(event, node) {\n\n      const res = await api.getImageUrl({ \"datasetName\": this.$store.state.datasetName, \"nodeId\": +node.data.name });\n      const imageUrl = res[\"data\"][\"imageUrl\"];\n      const patternId = `pattern-${+node.data.name}`;\n      const targetElement = d3.select(event.target);\n\n      const targetBBox = targetElement.node().getBBox();\n      const targetWidth = targetBBox.width;\n      const targetHeight = targetBBox.height;\n\n      let pattern = d3.select(`#${patternId}`);\n      if (pattern.empty()) {\n        // 如果 pattern 不存在，则创建\n        const svg = d3.select(this.$refs.tree);\n\n        // 确保 defs 存在\n        let defs = svg.select(\"defs\");\n        if (defs.empty()) {\n          defs = svg.append(\"defs\");\n        }\n\n        const pattern = defs.append(\"pattern\")\n          .attr(\"id\", patternId)\n          .attr(\"patternUnits\", \"objectBoundingBox\")\n          .attr(\"width\", 1) // 宽度为 1 表示相对于目标元素的宽度\n          .attr(\"height\", 1) // 高度为 1 表示相对于目标元素的高度\n          .attr(\"patternTransform\", \"translate(1, 1)\"); // 向右和向下移动 10 个单位\n\n        const image = pattern.append(\"image\")\n          .attr(\"xlink:href\", imageUrl)\n          .attr(\"width\", 58)\n          .attr(\"height\", 58)\n          .attr(\"preserveAspectRatio\", \"xMidYMid slice\");\n      }\n\n      // 填充目标元素\n      targetElement\n        .attr(\"r\", 30)\n        .attr(\"fill\", `url(#${patternId})`)\n        .attr(\"stroke\", \"#000\") // 设置边框颜色\n        .attr(\"stroke-width\", 2); // 设置边框宽度\n    },\n    initThumbnail() {\n      const thumbnail = d3.select(this.$refs.thumbnailTree);\n      thumbnail\n        .attr(\"width\", this.thumbnailTreeWidth)\n        .attr(\"height\", this.thumbnailTreeHeight)\n        .attr(\"viewBox\", `0 0 ${this.thumbnailTreeWidth} ${this.thumbnailTreeHeight}`)\n        .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n        .attr(\"style\", \"position: absolute; top: 120px; right: 40px; border: 1px solid #ccc; background: #fff;\");\n    },\n    updateThumbnail() {\n      const that = this;\n      const thumbnail = d3.select(this.$refs.thumbnailTree);\n      thumbnail.selectAll(\"*\").remove();\n      const container = thumbnail.append(\"g\")\n        .attr(\"transform\", `scale(${that.thumbnailTreeWidth / that.svgWidth}, ${that.thumbnailTreeHeight / that.svgHeight}) translate(0, ${that.svgHeight / 2})`);\n\n      // Clone legend and link nodes\n      const legendNode = d3.select(that.$refs.tree).select(`.nodes`).node().cloneNode(true);\n      const linkNode = d3.select(that.$refs.tree).select(`#linkTree`).node().cloneNode(true);\n\n      container.append(() => legendNode);\n      container.append(() => linkNode);\n\n    },\n    initGraph(dataObj) {\n      const that = this;\n      const width = that.svgWidth;\n      // parse data\n      const recall = dataObj[\"metric\"]['recall'];\n      const data = dataObj.treeData[\"0\"];\n      const root = d3.hierarchy(data);\n\n      const dx = 30;\n      const dy = width / (root.height + 1);\n\n      const tree = d3.tree().nodeSize([dx, dy]);\n\n      root.sort((a, b) => d3.ascending(a.data.name, b.data.name));\n      tree(root);\n\n      let x0 = Infinity;\n      let x1 = -x0;\n      root.each(d => {\n        if (d.x > x1) x1 = d.x;\n        if (d.x < x0) x0 = d.x;\n      });\n\n      // 打印结果\n      const height = Math.max(x1 - x0 + dx * 2, that.svgHeight);\n\n      d3.select(this.$refs[\"tree\"]).selectAll(\"*\").remove();\n\n      const svg = d3.select(this.$refs[\"tree\"])\n        .attr(\"viewBox\", [-dy / 2, x0 - dx, width, height])\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n        .attr(\"style\", \"max-width: 100%; height: auto; font: 10px sans-serif;\")\n        .call(d3.zoom().on(\"zoom\", (event) => {\n          container.attr(\"transform\", event.transform);\n        }));\n\n      const container = svg\n        .append(\"g\")\n        .attr(\"class\", \"container\");\n      // .attr(\"transform\", `translate(0, ${dx})`);\n      const offheight = -dy / 3;\n      const offwidth = x0 + dx / 3 * 2;\n      svg.append(\"text\")\n        .attr(\"transform\", `translate(${offheight}, ${offwidth})`)\n        .attr(\"font-family\", \"sans-serif\")\n        .attr(\"font-size\", 15)\n        .text(`Recall: ${recall}`);\n\n      const link = container.append(\"g\")\n        .attr(\"class\", \"links\")\n        .attr(\"id\", `linkTree`)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"#555\")\n        .attr(\"stroke-opacity\", 0.4)\n        .attr(\"stroke-width\", 1.5)\n        .selectAll()\n        .data(root.links())\n        .join(\"path\")\n        .attr(\"d\", d3.linkHorizontal()\n          .x(d => d.y)\n          .y(d => d.x));\n\n      const node = container.append(\"g\")\n        .attr(\"class\", \"nodes\")\n        .attr(\"stroke-linejoin\", \"round\")\n        .attr(\"stroke-width\", 3)\n        .selectAll(\"g\")\n        .data(root.descendants())\n        .join(\"g\")\n        .attr(\"transform\", d => `translate(${d.y},${d.x})`)\n        .attr(\"id\", d => `nodes-${d.data.name}`);\n\n      console.log(\"nodes\", node)\n\n      const border = container.append(\"g\")\n        .attr(\"class\", \"borders\")\n        .selectAll(\"circle\")\n        .data(root.descendants())\n        .join(\"circle\")\n        .attr(\"r\", 12)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"none\")\n        .attr(\"stroke-width\", 2)\n        .attr(\"transform\", d => `translate(${d.y},${d.x})`)\n        .style(\"pointer-events\", \"none\"); // 禁止 border 元素接收鼠标事件\n\n      border.raise();\n\n      node.on(\"mouseover\", function (event, d) {\n        // console.log(\"mouseover\", d.data.name);\n\n        // 设置 border 元素的样式\n        border.attr(\"stroke\", b => b === d ? \"#6096E6\" : \"none\");\n\n        // console.log(\"Node name on mouseover:\", d.data.name);\n      })\n        .on(\"mouseout\", function (event, d) {\n          // 移除 border 元素的样式\n          border.attr(\"stroke\", \"none\");\n        });\n\n\n      const groupColorMap = {\n        0: \"#FF0000\",\n        1: \"#A4D3EE\",\n        2: \"#32CD32\",\n        3: \"#FF7F50\",\n      };\n\n      node.append(\"circle\")\n        .attr(\"fill\", d => groupColorMap[d.data.group] || \"#A4D3EE\")\n        .attr(\"id\", `nodeTree`)\n        .attr(\"r\", 10);\n\n      node.on(\"click\", function (event, d) {\n        const existingBox = document.querySelector('.option-box');\n        if (existingBox) {\n          if (parseInt(existingBox.dataset.nodeId) === parseInt(d.id)) {\n            existingBox.remove();\n            return;\n          }\n          existingBox.remove();\n        }\n        const options = d3.select(\"body\").append(\"div\")\n          .attr(\"class\", \"option-box\")\n          .attr(\"data-node-id\", d.id)\n          .style(\"position\", \"absolute\")\n          .style(\"left\", `${event.pageX + 10}px`)\n          .style(\"top\", `${event.pageY + 10}px`)\n          .style(\"display\", \"flex\")\n          .style(\"gap\", \"8px\")\n          .style(\"border\", \"1px solid #7F7F7F\")\n          .style(\"background-color\", \"#F7F7F7\")\n          .style(\"width\", \"86px\")\n          .style(\"height\", \"25px\")\n          .style(\"padding\", \"2.5px 0\")\n          .style(\"padding-left\", \"8px\")\n          .style(\"border-radius\", \"8px\")\n          .style(\"align-items\", \"center\")\n          .style(\"z-index\", 1000);\n        options.append(\"div\")\n          .text(\"+\")\n          .style(\"font-size\", \"20px\")\n          .style(\"color\", \"#679D43\")\n          .style(\"border-radius\", \"50%\")\n          .style(\"width\", \"20px\")\n          .style(\"height\", \"20px\")\n          .style(\"text-align\", \"center\")\n          .style(\"line-height\", \"20px\")\n          .style(\"background-color\", \"#D4E2C8\")\n          .on(\"click\", () => console.log(\"Plus clicked\", d));\n        options.append(\"div\")\n          .text(\"-\")\n          .text(\"-\")\n          .style(\"font-size\", \"20px\")\n          .style(\"border-radius\", \"50%\")\n          .style(\"width\", \"20px\")\n          .style(\"height\", \"20px\")\n          .style(\"text-align\", \"center\")\n          .style(\"line-height\", \"20px\")\n          .style(\"background-color\", \"#D4E2C8\")\n          .style(\"color\", \"#679D43\")\n          .on(\"click\", () => console.log(\"Minus clicked\"));\n        options.append(\"div\")\n          .text(\"A\")\n          .style(\"font-size\", \"14px\")\n          .style(\"border-radius\", \"50%\")\n          .style(\"width\", \"20px\")\n          .style(\"height\", \"20px\")\n          .style(\"text-align\", \"center\")\n          .style(\"background-color\", \"#D4E2C8\")\n          .style(\"color\", \"#679D43\")\n          .on(\"click\", () => that.convertToImage(event, d));\n        d3.select(\"body\").on(\"click\", function (event) {\n          if (!event.target.closest('.option-box') && !event.target.closest('circle')) {\n            d3.selectAll('.option-box').remove();\n          }\n        });\n        event.stopPropagation();\n      });\n\n\n      node.append(\"text\")\n        .attr(\"dy\", \"0.31em\")\n        .attr(\"x\", d => d.children ? 6 : 6)\n        .attr(\"text-anchor\", d => d.children ? \"end\" : \"start\")\n        // .text(d => d.data.name)\n        .text(d => {\n          if (d.data.group === 2 || d.data.group === 3) {\n            return `${d.data.name}`;\n          } else {\n            return \"\";\n          }\n        })\n        .attr(\"stroke\", \"white\")\n        .attr(\"paint-order\", \"stroke\");\n\n      node.append(\"title\")\n        .text(d => `ID: ${d.data.name}, Distance: ${d.data.distance}`);\n\n      // this.updateThumbnail();\n\n      const legend = svg.append(\"g\")\n        .attr(\"transform\", `translate(${offheight}, ${offwidth + 10})`)\n        .attr(\"font-family\", \"sans-serif\")\n        .attr(\"font-size\", 10);\n\n      const uniqueGroups = [0, 1, 2, 3];\n\n\n      const legendItems = legend.selectAll(\"g\")\n        .data(uniqueGroups)\n        .enter().append(\"g\")\n        .attr(\"transform\", (d, i) => `translate(0,${i * 20})`);\n\n      legendItems.append(\"rect\")\n        .attr(\"width\", 18)\n        .attr(\"height\", 18)\n        .attr(\"fill\", d => groupColorMap[d])\n\n      legendItems.append(\"text\")\n        .attr(\"x\", 24)\n        .attr(\"y\", 9)\n        .attr(\"dy\", \"0.35em\")\n        .text(d => {\n          if (d === 0) {\n            return \"start node\";\n          } else if (d === 1) {\n            return \"normal node\";\n          } else if (d === 2) {\n            return \"gt&search intersection\";\n          } else if (d === 3) {\n            return \"search other\";\n          }\n        });\n\n    }\n\n  },\n  computed: {\n    ...mapState({\n      dataTree: \"dataTree\",\n      dataNodelink: \"dataNodeLink\",\n      retrievalSet: \"retrievalSet\",\n      datasetName: \"datasetName\",\n      modelName: \"modelName\",\n      retrievalInfo: \"retrievalInfo\",\n      selectedNode: \"selectedNode\"\n    }),\n\n  },\n  watch: {\n    selectedNode(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.updateSelectedNode(newVal);\n      }\n\n    },\n    selectedTab(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.$nextTick(() => {\n          this.getViewSize();\n          this.initGraph(this.treeData);\n          // this.initThumbnail();\n        });\n      }\n    }\n  }\n};\n</script>\n\n<style scoped lang=\"scss\">\n.tree-main {\n  height: 100%;\n  width: 100%;\n  overflow: auto;\n\n  .tree-svg {\n    width: 100%;\n    height: 100%;\n  }\n\n  .thumbnail-tree-svg {\n    position: absolute;\n    right: 20px;\n    top: 120px;\n    border: 1px solid #ccc;\n    background: #fff;\n  }\n}\n\n.option-box {\n  border: 1px solid #F7F7F7;\n  background-color: #F7F7F7;\n  padding: 5px;\n  position: absolute;\n  z-index: 1000;\n\n  div {\n    margin: 2px 0;\n    cursor: pointer;\n  }\n\n  div:hover {\n    background-color: #f0f0f0;\n  }\n}\n\n.option-button {\n  padding: 5px 10px;\n  border: 1px solid #000;\n  border-radius: 5px;\n  cursor: pointer;\n  background-color: #f0f0f0;\n  font-size: 14px;\n  font-family: Arial, sans-serif;\n  color: red;\n}\n\n.option-button:hover {\n  background-color: #e0e0e0;\n}\n</style>"]}]}