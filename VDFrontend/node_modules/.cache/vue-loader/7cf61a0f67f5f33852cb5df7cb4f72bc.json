{"remainingRequest":"/home/yansha/VDProject/VDFrontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yansha/VDProject/VDFrontend/src/views/MainView/RightMainView/ResultView.vue?vue&type=style&index=0&id=eb267484&scoped=true&lang=css","dependencies":[{"path":"/home/yansha/VDProject/VDFrontend/src/views/MainView/RightMainView/ResultView.vue","mtime":1734619211228},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/css-loader/dist/cjs.js","mtime":1735202380733},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1735202381341},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/@vue/cli-service/node_modules/postcss-loader/src/index.js","mtime":1735202380937},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/cache-loader/dist/cjs.js","mtime":1735202380381},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/vue-loader/lib/index.js","mtime":1735202381045}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5yZXN1bHQtbWFpbiB7CiAgICB3aWR0aDogMTAwJTsKICAgIGhlaWdodDogMTAwJTsKICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7Cn0KCi5yZXMtdGV4dCB7CiAgICBmb250LXNpemU6IDE1cHg7Cn0KCgoucmVzdWx0LW1haW46OnYtZGVlcCAuZWwtY29sbGFwc2UtaXRlbV9faGVhZGVyIHsKICAgIGZvbnQtc2l6ZTogMTZweDsKCn0K"},{"version":3,"sources":["ResultView.vue"],"names":[],"mappings":";AA8IA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA","file":"ResultView.vue","sourceRoot":"src/views/MainView/RightMainView","sourcesContent":["<template>\n    <div v-if=\"this.$store.state.retrievalSet['topK']\" class=\"result-main\">\n\n        <el-collapse accordion>\n            <el-collapse-item v-for=\"(item, index) in getItems\" :key=\"index\">\n                <template slot=\"title\">\n                    {{ item.title }}\n                    <!-- <i :class=\"`header-icon ${item.iconClass}`\"></i> -->\n                </template>\n                <div class=\"query-main\">\n                    <div class=\"res-text\">query info</div>\n                    <Box v-if=\"queryItems.length > 0\" :items=\"queryItems\" />\n\n                </div>\n                <div class=\"retrieval-main\">\n                    <div class=\"res-text\">retrieval info</div>\n                    <Box v-if=\"getRetrievalItems.length > 0\" :items=\"getRetrievalItems\" />\n\n                </div>\n                <!-- <div class=\"gt-main\">\n                    <div class=\"res-text\">gt info</div>\n                    <Box :items=\"getSubItems\" />\n                </div> -->\n\n\n            </el-collapse-item>\n        </el-collapse>\n\n    </div>\n\n</template>\n\n\n<script>\nimport * as d3 from \"d3\";\nimport { mapState } from \"vuex\";\nimport api from \"@/api/data\";\nimport Box from \"@/components/Box.vue\";\nimport { index } from \"d3\";\n\n\nexport default {\n    name: \"ResultView\",\n    components: {\n        Box\n\n    },\n    data() {\n        return {\n            queryItems: [],\n            retrievalItems: [],\n\n        }\n    },\n    methods: {\n        async getQueryItems() {\n\n            // 先来构建第一个 query 的结果\n            let res = await api.getQueryInfo({ \"retrievalSet\": this.$store.state.retrievalSet });\n            let imageUrl = res['data']['imageUrl']\n            let imagePath = res['data']['imagePath']\n            let title = `Q1_${this.$store.state.datasetName}_${this.$store.state.modelName}`;\n            let iconClass = \"el-icon-info\";\n            let type = 'query';\n            let contents = { imageUrl: imageUrl, imagePath: imagePath };\n\n            this.queryItems.push({\n                title: title,\n                iconClass: iconClass,\n                type: type,\n                contents: contents\n            });\n        },\n    },\n    computed: {\n        ...mapState({\n            retrievalSet: \"retrievalSet\",\n            datasetName: \"datasetName\",\n            modelName: \"modelName\",\n            retrievalInfo: \"retrievalInfo\",\n            selectedNode: \"selectedNode\"\n        }),\n        getItems() {\n\n            const datasetName = this.retrievalSet['datasetName'];\n            const modelName = this.retrievalSet['modelName'];\n            const indexType = this.retrievalSet['indexType'];\n            const metric = this.retrievalSet['metric'];\n            const topK = this.retrievalSet['topK'];\n\n            let title = `Q1_${datasetName}_${modelName}_${indexType}_${metric}_Top${topK}`;\n            let iconClass = \"el-icon-info\";\n\n            return [{ \"title\": title, \"iconClass\": iconClass }];\n        },\n        getRetrievalItems() {\n\n            // 先来构建第一个 query 的检索的结果\n\n            this.retrievalInfo.forEach((item, index) => {\n\n                let title = `Q1_${this.$store.state.datasetName}_${this.$store.state.modelName}`;\n                let iconClass = \"el-icon-info\";\n                let type = 'retrieval';\n                let imageUrl = item['imageUrl']\n                let imagePath = item['imagePath'];\n                let nodeList = item['nodeIDList']\n                let topK = index + 1;\n                let contents = { \"imageUrl\": imageUrl, \"imagePath\": imagePath };\n                let isHighlighted = false;\n\n                this.retrievalItems.push({\n                    title: title,\n                    iconClass: iconClass,\n                    type: type,\n                    topK: topK,\n                    contents: contents,\n                    nodeList: nodeList,\n                    isHighlighted: isHighlighted  // 高亮标志\n                });\n\n            });\n            return this.retrievalItems;\n        },\n\n    },\n\n    watch: {\n        retrievalSet(newVal) {\n            console.log(\"queryinfo\", newVal);\n            this.getQueryItems();\n            // this.getRetrievalItems();\n\n        }\n\n\n    },\n\n};\n</script>\n\n<style scoped>\n.result-main {\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n}\n\n.res-text {\n    font-size: 15px;\n}\n\n\n.result-main::v-deep .el-collapse-item__header {\n    font-size: 16px;\n\n}\n</style>"]}]}