{"remainingRequest":"/home/yansha/VDProject/VDFrontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yansha/VDProject/VDFrontend/src/views/MainView/RightMainView/HistoryView.vue?vue&type=style&index=2&id=4235e7a6&scoped=true&lang=scss","dependencies":[{"path":"/home/yansha/VDProject/VDFrontend/src/views/MainView/RightMainView/HistoryView.vue","mtime":1744442733412},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/css-loader/dist/cjs.js","mtime":1735202380733},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1735202381341},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/@vue/cli-service/node_modules/postcss-loader/src/index.js","mtime":1735202380937},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/sass-loader/dist/cjs.js","mtime":1735202380381},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/cache-loader/dist/cjs.js","mtime":1735202380381},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/vue-loader/lib/index.js","mtime":1735202381045}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5ub2RlLWxpbmstbWFpbiB7CiAgaGVpZ2h0OiAxMDAlOwogIHdpZHRoOiAxMDAlOwogIG92ZXJmbG93OiBoaWRkZW47CiAgcG9zaXRpb246IHJlbGF0aXZlOwoKICAuZGFnLXN2ZyB7CiAgICBoZWlnaHQ6IDEwMCU7CiAgICB3aWR0aDogMTAwJTsKICB9CgogIC50aHVtYm5haWwtc3ZnIHsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIGJvdHRvbTogMjBweDsKICAgIGxlZnQ6IDIwcHg7CiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjOwogICAgYmFja2dyb3VuZDogI2ZmZjsKICB9Cn0KCi5vcHRpb24tYm94IHsKICBib3JkZXI6IDFweCBzb2xpZCAjRjdGN0Y3OwogIGJhY2tncm91bmQtY29sb3I6ICNGN0Y3Rjc7CiAgcGFkZGluZzogNXB4OwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB6LWluZGV4OiAxMDAwOwoKICBkaXYgewogICAgbWFyZ2luOiAycHggMDsKICAgIGN1cnNvcjogcG9pbnRlcjsKICB9CgogIGRpdjpob3ZlciB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMGYwOwogIH0KfQoKLm9wdGlvbi1idXR0b24gewogIHBhZGRpbmc6IDVweCAxMHB4OwogIGJvcmRlcjogMXB4IHNvbGlkICMwMDA7CiAgYm9yZGVyLXJhZGl1czogNXB4OwogIGN1cnNvcjogcG9pbnRlcjsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMGYwOwogIGZvbnQtc2l6ZTogMTRweDsKICBmb250LWZhbWlseTogQXJpYWwsIHNhbnMtc2VyaWY7CiAgY29sb3I6IHJlZDsKfQoKLm9wdGlvbi1idXR0b246aG92ZXIgewogIGJhY2tncm91bmQtY29sb3I6ICNlMGUwZTA7Cn0K"},{"version":3,"sources":["HistoryView.vue"],"names":[],"mappings":";AAs+JA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"HistoryView.vue","sourceRoot":"src/views/MainView/RightMainView","sourcesContent":["<template>\n    <div class=\"node-link-main\">\n      <svg ref=\"dag\" class=\"dag-svg\"></svg>\n      <svg ref=\"thumbnail\" class=\"thumbnail-svg\"></svg>\n    </div>\n  </template>\n  \n  <script>\n  import * as d3 from \"d3\";\n  import { mapState } from \"vuex\";\n  import api from \"@/api/data\";\n  \n  export default {\n    name: \"NodeLinkView\",\n    components: {},\n    data() {\n      return {\n        nodelinkdata: {},\n        svgWidth: 0,  // 页面的宽度\n        svgHeight: 0,   // 页面高度\n        velocityDecay: 0.6,\n        thumbnailWidth: 0, // 缩略图宽度\n        thumbnailHeight: 0, // 缩略图高度\n      };\n    },\n    mounted() {\n      this.getViewSize();\n      this.nodelinkdata = this.$store.state.dataNodeLink;\n      console.log(\"请输出 link data 来看一下连接线的 data\",this.nodelinkdata);\n      this.initGraph(this.nodelinkdata);\n    },\n    methods: {\n      getViewSize() {\n        const dag = this.$refs.dag;\n        this.svgHeight = dag.clientHeight;\n        this.svgWidth = dag.clientWidth;\n        this.thumbnailWidth = this.svgWidth / 5;  // 缩略图宽度和高度分别为整个svg 的1/5\n        this.thumbnailHeight = this.svgHeight / 5;\n        if (this.nodelinkdata.nodes) {\n          this.initGraph(this.nodelinkdata);\n          this.initThumbnail();\n        }\n      },\n      async convertToImage(event, node) {\n        const res = await api.getImageUrl({ \"datasetName\": this.$store.state.datasetName, \"nodeId\": node.id });\n        const imageUrl = res[\"data\"][\"imageUrl\"];\n        const targetElement = d3.select(event.target);\n        const targetBBox = targetElement.node().getBBox();\n        const targetWidth = targetBBox.width;\n        const targetHeight = targetBBox.height;\n        const patternId = `pattern-${node.id}`;\n        let pattern = d3.select(`#${patternId}`);\n        if (pattern.empty()) {\n          const svg = d3.select(`#node-class`);\n          let defs = svg.select(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          if (defs.empty()) {\n            defs = svg.append(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          }\n          const pattern = defs.append(\"pattern\")\n            .attr(\"id\", patternId)\n            .attr(\"patternUnits\", \"objectBoundingBox\")\n            .attr(\"width\", 1) // 宽度为 1 表示相对于目标元素的宽度\n            .attr(\"height\", 1) // 高度为 1 表示相对于目标元素的高度\n            .attr(\"patternTransform\", \"translate(1, 1)\"); // 向右和向下移动 10 个单位\n  \n          const image = pattern.append(\"image\")\n            .attr(\"xlink:href\", imageUrl)\n            .attr(\"width\", 58)\n            .attr(\"height\", 58)\n            .attr(\"preserveAspectRatio\", \"xMidYMid slice\");\n        }\n        targetElement\n          .attr(\"r\", 30)\n          .attr(\"fill\", `url(#pattern-${node.id})`)\n          .attr(\"stroke\", \"#000\") // 设置边框颜色\n          .attr(\"stroke-width\", 2); // 设置边框宽度;\n  \n      },\n      initThumbnail() {\n        const thumbnail = d3.select(this.$refs.thumbnail);\n        thumbnail\n          .attr(\"width\", this.thumbnailWidth)\n          .attr(\"height\", this.thumbnailHeight)\n          .attr(\"viewBox\", `0 0 ${this.svgWidth} ${this.svgHeight}`)\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"position: absolute; bottom: 20px; left: 20px; border: 1px solid #ccc; background: #fff;\");\n      },\n      updateThumbnail() {\n        const that = this;\n        const thumbnail = d3.select(that.$refs.thumbnail);\n        thumbnail.selectAll(\"*\").remove();\n        const container = thumbnail.append(\"g\")\n          .attr(\"transform\", `scale(${that.thumbnailWidth / that.svgWidth}, ${that.thumbnailHeight / that.svgHeight})`);\n  \n        // Clone legend and link nodes\n        const legendNode = d3.select(that.$refs.dag).select(\"g.nodes\").node().cloneNode(true);\n        const linkNode = d3.select(that.$refs.dag).select(\"g.link\").node().cloneNode(true);\n        container.append(() => legendNode);\n        container.append(() => linkNode);\n  \n      },\n  \n      initGraph(data) {\n        const that = this;\n        const width = that.svgWidth;\n        const height = that.svgHeight;\n        const recall = data[\"metric\"]['recall'];\n        const links = data.links.map(d => ({ ...d }));\n        const nodes = data.nodes.map(d => ({ ...d }));\n  \n        // 在这里获取 links value 中的最大值和最小值\n        const val = links.map(d => d.value);\n        const minVal = Math.min(...val);\n        const maxVal = Math.max(...val);\n  \n        // 定义归一化函数\n        // 定义归一化函数，确保最小值不为 0\n        const normalize = (value) => {\n          const normalizedValue = (value - minVal) / (maxVal - minVal);\n          // 将归一化值范围调整为 [a, 1]，其中 a 为略大于 0 的数值，例如 0.1\n          const a = 0.1;\n          return 10*(normalizedValue * (1 - a) + a);\n        };\n  \n        const simulation = d3.forceSimulation(nodes)\n          .force(\"link\", d3.forceLink(links).id(d => d.id))\n          // .distance(d => normalize(d.value)/100000))\n          .force(\"charge\", d3.forceManyBody().strength(-10))\n          .force(\"center\", d3.forceCenter(width / 2, height / 2).strength(0.3))\n          // .force(\"radial\", d3.forceRadial(500, width / 2, height / 2).strength(0.8))\n          // .force(\"x\", d3.forceX(width / 2).strength(0.05))\n          // .force(\"y\", d3.forceY(height / 2).strength(0.05))\n          .velocityDecay(this.velocityDecay)\n          .on(\"tick\", ticked);\n  \n        const svg = d3.select(this.$refs.dag);\n        svg.selectAll(\"*\").remove();\n  \n        svg.attr(\"viewBox\", `0 0 ${width} ${height}`)\n          .attr(\"width\", \"100%\")\n          .attr(\"height\", \"100%\")\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"max-width: 100%; height: auto;\")\n          .call(d3.zoom().scaleExtent([0.5, 8]).on(\"zoom\", zoomed));\n  \n        const colorMap = d3.scaleOrdinal()\n          .range(['#FF0000', '#A4D3EE', '#FF7F50', '#32CD32']);\n          const groupColorMap = {\n            0: \"#FF0000\",\n            1: \"#A4D3EE\",\n            2: \"#32CD32\",\n            3: \"#FF7F50\",\n          };\n  \n        const container = svg.append(\"g\");\n        const link = container.append(\"g\")\n          .attr(\"class\", \"link\")\n          .attr(\"stroke\", \"#999\")\n          .attr(\"stroke-opacity\", 0.6)\n          .selectAll(\"line\")\n          .data(links)\n          .join(\"line\")\n          .attr(\"stroke-width\", d => Math.sqrt(normalize(d.value)))\n          .attr(\"marker-end\", \"url(#arrowhead)\")\n          .attr(\"fill\", d => groupColorMap[d.group]);\n  \n        const border = container.append(\"g\")\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 20;\n            } else if (v.group === 3) {\n              return 15;\n            } else if (v.group === 2) {\n              return 15;\n            } else {\n              return 12.5;\n            }\n          })\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"none\")\n          .attr(\"stroke-width\", 2);\n  \n        const node = container.append(\"g\")\n          .attr(\"class\", \"nodes\")\n          .attr(\"id\", `node-class`)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"stroke-width\", 0.2)\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 18;\n            } else if (v.group === 3) {\n              return 13;\n            } else if (v.group === 2) {\n              return 13;\n            } else {\n              return 10.5;\n            }\n          })\n          .attr(\"fill\", d => groupColorMap[d.group])\n          .call(d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n  \n        const labels = container.append(\"g\")\n          .attr(\"class\", \"labels\")\n          .selectAll(\"text\")\n          .data(nodes)\n          .join(\"text\")\n          .attr(\"dx\", 6)\n          .attr(\"dy\", \".35em\")\n          .style(\"font-size\", \"12px\")  // 设置字体大小\n          .attr(\"stroke\", \"white\")\n          .attr(\"paint-order\", \"stroke\")\n          .text(d => {\n            if (d.group === 2 || d.group === 3) {\n              return `${d.id}`;\n            } else {\n              return \"\";\n            }\n          });\n  \n        node.on(\"mouseover\", function (event, d) {\n          border.attr(\"stroke\", (b) => b.id === d.id ? \"#6096E6\" : \"none\");\n        })\n          .on(\"mouseout\", function (event, d) {\n            border.attr(\"stroke\", \"none\");\n          });\n  \n        node.on(\"click\", function (event, d) {\n          const existingBox = document.querySelector('.option-box');\n          if (existingBox) {\n            if (parseInt(existingBox.dataset.nodeId) === parseInt(d.id)) {\n              existingBox.remove();\n              return;\n            }\n            existingBox.remove();\n          }\n          const options = d3.select(\"body\").append(\"div\")\n            .attr(\"class\", \"option-box\")\n            .attr(\"data-node-id\", d.id)\n            .style(\"position\", \"absolute\")\n            .style(\"left\", `${event.pageX + 10}px`)\n            .style(\"top\", `${event.pageY + 10}px`)\n            .style(\"display\", \"flex\")\n            .style(\"gap\", \"8px\")\n            .style(\"border\", \"1px solid #7F7F7F\")\n            .style(\"background-color\", \"#F7F7F7\")\n            .style(\"width\", \"86px\")\n            .style(\"height\", \"25px\")\n            .style(\"padding\", \"2.5px 0\")\n            .style(\"padding-left\", \"8px\")\n            .style(\"border-radius\", \"8px\")\n            .style(\"align-items\", \"center\")\n            .style(\"z-index\", 1000);\n          options.append(\"div\")\n            .text(\"+\")\n            .style(\"font-size\", \"20px\")\n            .style(\"color\", \"#679D43\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .on(\"click\", () => console.log(\"Plus clicked\", d));\n          options.append(\"div\")\n            .text(\"-\")\n            .text(\"-\")\n            .style(\"font-size\", \"20px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => console.log(\"Minus clicked\"));\n          options.append(\"div\")\n            .text(\"A\")\n            .style(\"font-size\", \"14px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => that.convertToImage(event, d));\n  \n          d3.select(\"body\").on(\"click\", function (event) {\n            if (!event.target.closest('.option-box') && !event.target.closest('circle')) {\n              d3.selectAll('.option-box').remove();\n            }\n          });\n  \n          event.stopPropagation();\n        });\n  \n        node.append(\"title\")\n          .text(d => `ID: ${d.id}, Distance: ${d.distance}`);\n  \n        svg.append(\"text\")\n          .attr(\"transform\", `translate(60, 50)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 15)\n          .text(`Recall: ${recall}`);\n  \n        const legend = svg.append(\"g\")\n          .attr(\"transform\", `translate(60, 60)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 10);\n  \n        const uniqueGroups = [...new Set(nodes.map(d => d.group))];\n        const legendItems = legend.selectAll(\"g\")\n          .data(uniqueGroups)\n          .enter().append(\"g\")\n          .attr(\"transform\", (d, i) => `translate(0,${i * 20})`);\n        legendItems.append(\"rect\")\n          .attr(\"width\", 18)\n          .attr(\"height\", 18)\n          .attr(\"fill\", d => groupColorMap[d]);\n  \n        legendItems.append(\"text\")\n          .attr(\"x\", 24)\n          .attr(\"y\", 9)\n          .attr(\"dy\", \"0.35em\")\n          .text(d => {\n                if (d === 0) {\n                  return \"start node\";\n                } else if (d === 1) {\n                  return \"normal node\";\n                } else if (d === 2) {\n                  return \"gt&search intersection\";\n                } else if (d === 3) {\n                  return \"search other\";\n                }\n              });\n  \n        function ticked() {\n          link\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y);\n          node\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n          border\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n  \n          labels\n            .attr(\"x\", d => d.x + 2)\n            .attr(\"y\", d => d.y + 0.35); // 这里设置文本的位置\n  \n          that.updateThumbnail();\n        }\n  \n        function dragstarted(event) {\n          if (!event.active) simulation.alphaTarget(0.2).restart();\n          event.subject.fx = event.subject.x;\n          event.subject.fy = event.subject.y;\n        }\n  \n        function dragged(event) {\n          event.subject.fx = event.x;\n          event.subject.fy = event.y;\n        }\n  \n        function dragended(event) {\n          if (!event.active) simulation.alphaTarget(0);\n          event.subject.fx = null;\n          event.subject.fy = null;\n        }\n  \n        function zoomed(event) {\n          container.attr(\"transform\", event.transform);\n          that.updateThumbnail();\n        }\n  \n      },\n    },\n    computed: {\n      ...mapState({\n        dataNodelink: \"dataNodeLink\",\n        retrievalSet: \"retrievalSet\",\n        datasetName: \"datasetName\",\n        modelName: \"modelName\",\n        retrievalInfo: \"retrievalInfo\",\n        isDone: \"isDone\"\n      }),\n    },\n    watch: {\n  \n      // dataNodelink(newVal, oldVal) {\n      //   console.log(\"可以实现更新\",newVal);\n      //   if (newVal !== oldVal) {\n  \n      //   }\n      // }\n  \n    }\n  };\n  </script>\n  \n  <style scoped lang=\"scss\">\n  .node-link-main {\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n    position: relative;\n  \n    .dag-svg {\n      height: 100%;\n      width: 100%;\n    }\n  \n    .thumbnail-svg {\n      position: absolute;\n      bottom: 20px;\n      left: 20px;\n      border: 1px solid #ccc;\n      background: #fff;\n    }\n  }\n  \n  .option-box {\n    border: 1px solid #F7F7F7;\n    background-color: #F7F7F7;\n    padding: 5px;\n    position: absolute;\n    z-index: 1000;\n  \n    div {\n      margin: 2px 0;\n      cursor: pointer;\n    }\n  \n    div:hover {\n      background-color: #f0f0f0;\n    }\n  }\n  \n  .option-button {\n    padding: 5px 10px;\n    border: 1px solid #000;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: #f0f0f0;\n    font-size: 14px;\n    font-family: Arial, sans-serif;\n    color: red;\n  }\n  \n  .option-button:hover {\n    background-color: #e0e0e0;\n  }\n  </style><template>\n    <div class=\"node-link-main\">\n      <svg ref=\"dag\" class=\"dag-svg\"></svg>\n      <svg ref=\"thumbnail\" class=\"thumbnail-svg\"></svg>\n    </div>\n  </template>\n  \n  <script>\n  import * as d3 from \"d3\";\n  import { mapState } from \"vuex\";\n  import api from \"@/api/data\";\n  \n  export default {\n    name: \"NodeLinkView\",\n    components: {},\n    data() {\n      return {\n        nodelinkdata: {},\n        svgWidth: 0,  // 页面的宽度\n        svgHeight: 0,   // 页面高度\n        velocityDecay: 0.6,\n        thumbnailWidth: 0, // 缩略图宽度\n        thumbnailHeight: 0, // 缩略图高度\n      };\n    },\n    mounted() {\n      this.getViewSize();\n      this.nodelinkdata = this.$store.state.dataNodeLink;\n      console.log(\"请输出 link data 来看一下连接线的 data\",this.nodelinkdata);\n      this.initGraph(this.nodelinkdata);\n    },\n    methods: {\n      getViewSize() {\n        const dag = this.$refs.dag;\n        this.svgHeight = dag.clientHeight;\n        this.svgWidth = dag.clientWidth;\n        this.thumbnailWidth = this.svgWidth / 5;  // 缩略图宽度和高度分别为整个svg 的1/5\n        this.thumbnailHeight = this.svgHeight / 5;\n        if (this.nodelinkdata.nodes) {\n          this.initGraph(this.nodelinkdata);\n          this.initThumbnail();\n        }\n      },\n      async convertToImage(event, node) {\n        const res = await api.getImageUrl({ \"datasetName\": this.$store.state.datasetName, \"nodeId\": node.id });\n        const imageUrl = res[\"data\"][\"imageUrl\"];\n        const targetElement = d3.select(event.target);\n        const targetBBox = targetElement.node().getBBox();\n        const targetWidth = targetBBox.width;\n        const targetHeight = targetBBox.height;\n        const patternId = `pattern-${node.id}`;\n        let pattern = d3.select(`#${patternId}`);\n        if (pattern.empty()) {\n          const svg = d3.select(`#node-class`);\n          let defs = svg.select(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          if (defs.empty()) {\n            defs = svg.append(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          }\n          const pattern = defs.append(\"pattern\")\n            .attr(\"id\", patternId)\n            .attr(\"patternUnits\", \"objectBoundingBox\")\n            .attr(\"width\", 1) // 宽度为 1 表示相对于目标元素的宽度\n            .attr(\"height\", 1) // 高度为 1 表示相对于目标元素的高度\n            .attr(\"patternTransform\", \"translate(1, 1)\"); // 向右和向下移动 10 个单位\n  \n          const image = pattern.append(\"image\")\n            .attr(\"xlink:href\", imageUrl)\n            .attr(\"width\", 58)\n            .attr(\"height\", 58)\n            .attr(\"preserveAspectRatio\", \"xMidYMid slice\");\n        }\n        targetElement\n          .attr(\"r\", 30)\n          .attr(\"fill\", `url(#pattern-${node.id})`)\n          .attr(\"stroke\", \"#000\") // 设置边框颜色\n          .attr(\"stroke-width\", 2); // 设置边框宽度;\n  \n      },\n      initThumbnail() {\n        const thumbnail = d3.select(this.$refs.thumbnail);\n        thumbnail\n          .attr(\"width\", this.thumbnailWidth)\n          .attr(\"height\", this.thumbnailHeight)\n          .attr(\"viewBox\", `0 0 ${this.svgWidth} ${this.svgHeight}`)\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"position: absolute; bottom: 20px; left: 20px; border: 1px solid #ccc; background: #fff;\");\n      },\n      updateThumbnail() {\n        const that = this;\n        const thumbnail = d3.select(that.$refs.thumbnail);\n        thumbnail.selectAll(\"*\").remove();\n        const container = thumbnail.append(\"g\")\n          .attr(\"transform\", `scale(${that.thumbnailWidth / that.svgWidth}, ${that.thumbnailHeight / that.svgHeight})`);\n  \n        // Clone legend and link nodes\n        const legendNode = d3.select(that.$refs.dag).select(\"g.nodes\").node().cloneNode(true);\n        const linkNode = d3.select(that.$refs.dag).select(\"g.link\").node().cloneNode(true);\n        container.append(() => legendNode);\n        container.append(() => linkNode);\n  \n      },\n  \n      initGraph(data) {\n        const that = this;\n        const width = that.svgWidth;\n        const height = that.svgHeight;\n        const recall = data[\"metric\"]['recall'];\n        const links = data.links.map(d => ({ ...d }));\n        const nodes = data.nodes.map(d => ({ ...d }));\n  \n        // 在这里获取 links value 中的最大值和最小值\n        const val = links.map(d => d.value);\n        const minVal = Math.min(...val);\n        const maxVal = Math.max(...val);\n  \n        // 定义归一化函数\n        // 定义归一化函数，确保最小值不为 0\n        const normalize = (value) => {\n          const normalizedValue = (value - minVal) / (maxVal - minVal);\n          // 将归一化值范围调整为 [a, 1]，其中 a 为略大于 0 的数值，例如 0.1\n          const a = 0.1;\n          return 10*(normalizedValue * (1 - a) + a);\n        };\n  \n        const simulation = d3.forceSimulation(nodes)\n          .force(\"link\", d3.forceLink(links).id(d => d.id))\n          // .distance(d => normalize(d.value)/100000))\n          .force(\"charge\", d3.forceManyBody().strength(-10))\n          .force(\"center\", d3.forceCenter(width / 2, height / 2).strength(0.3))\n          // .force(\"radial\", d3.forceRadial(500, width / 2, height / 2).strength(0.8))\n          // .force(\"x\", d3.forceX(width / 2).strength(0.05))\n          // .force(\"y\", d3.forceY(height / 2).strength(0.05))\n          .velocityDecay(this.velocityDecay)\n          .on(\"tick\", ticked);\n  \n        const svg = d3.select(this.$refs.dag);\n        svg.selectAll(\"*\").remove();\n  \n        svg.attr(\"viewBox\", `0 0 ${width} ${height}`)\n          .attr(\"width\", \"100%\")\n          .attr(\"height\", \"100%\")\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"max-width: 100%; height: auto;\")\n          .call(d3.zoom().scaleExtent([0.5, 8]).on(\"zoom\", zoomed));\n  \n        const colorMap = d3.scaleOrdinal()\n          .range(['#FF0000', '#A4D3EE', '#FF7F50', '#32CD32']);\n          const groupColorMap = {\n            0: \"#FF0000\",\n            1: \"#A4D3EE\",\n            2: \"#32CD32\",\n            3: \"#FF7F50\",\n          };\n  \n        const container = svg.append(\"g\");\n        const link = container.append(\"g\")\n          .attr(\"class\", \"link\")\n          .attr(\"stroke\", \"#999\")\n          .attr(\"stroke-opacity\", 0.6)\n          .selectAll(\"line\")\n          .data(links)\n          .join(\"line\")\n          .attr(\"stroke-width\", d => Math.sqrt(normalize(d.value)))\n          .attr(\"marker-end\", \"url(#arrowhead)\")\n          .attr(\"fill\", d => groupColorMap[d.group]);\n  \n        const border = container.append(\"g\")\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 20;\n            } else if (v.group === 3) {\n              return 15;\n            } else if (v.group === 2) {\n              return 15;\n            } else {\n              return 12.5;\n            }\n          })\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"none\")\n          .attr(\"stroke-width\", 2);\n  \n        const node = container.append(\"g\")\n          .attr(\"class\", \"nodes\")\n          .attr(\"id\", `node-class`)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"stroke-width\", 0.2)\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 18;\n            } else if (v.group === 3) {\n              return 13;\n            } else if (v.group === 2) {\n              return 13;\n            } else {\n              return 10.5;\n            }\n          })\n          .attr(\"fill\", d => groupColorMap[d.group])\n          .call(d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n  \n        const labels = container.append(\"g\")\n          .attr(\"class\", \"labels\")\n          .selectAll(\"text\")\n          .data(nodes)\n          .join(\"text\")\n          .attr(\"dx\", 6)\n          .attr(\"dy\", \".35em\")\n          .style(\"font-size\", \"12px\")  // 设置字体大小\n          .attr(\"stroke\", \"white\")\n          .attr(\"paint-order\", \"stroke\")\n          .text(d => {\n            if (d.group === 2 || d.group === 3) {\n              return `${d.id}`;\n            } else {\n              return \"\";\n            }\n          });\n  \n        node.on(\"mouseover\", function (event, d) {\n          border.attr(\"stroke\", (b) => b.id === d.id ? \"#6096E6\" : \"none\");\n        })\n          .on(\"mouseout\", function (event, d) {\n            border.attr(\"stroke\", \"none\");\n          });\n  \n        node.on(\"click\", function (event, d) {\n          const existingBox = document.querySelector('.option-box');\n          if (existingBox) {\n            if (parseInt(existingBox.dataset.nodeId) === parseInt(d.id)) {\n              existingBox.remove();\n              return;\n            }\n            existingBox.remove();\n          }\n          const options = d3.select(\"body\").append(\"div\")\n            .attr(\"class\", \"option-box\")\n            .attr(\"data-node-id\", d.id)\n            .style(\"position\", \"absolute\")\n            .style(\"left\", `${event.pageX + 10}px`)\n            .style(\"top\", `${event.pageY + 10}px`)\n            .style(\"display\", \"flex\")\n            .style(\"gap\", \"8px\")\n            .style(\"border\", \"1px solid #7F7F7F\")\n            .style(\"background-color\", \"#F7F7F7\")\n            .style(\"width\", \"86px\")\n            .style(\"height\", \"25px\")\n            .style(\"padding\", \"2.5px 0\")\n            .style(\"padding-left\", \"8px\")\n            .style(\"border-radius\", \"8px\")\n            .style(\"align-items\", \"center\")\n            .style(\"z-index\", 1000);\n          options.append(\"div\")\n            .text(\"+\")\n            .style(\"font-size\", \"20px\")\n            .style(\"color\", \"#679D43\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .on(\"click\", () => console.log(\"Plus clicked\", d));\n          options.append(\"div\")\n            .text(\"-\")\n            .text(\"-\")\n            .style(\"font-size\", \"20px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => console.log(\"Minus clicked\"));\n          options.append(\"div\")\n            .text(\"A\")\n            .style(\"font-size\", \"14px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => that.convertToImage(event, d));\n  \n          d3.select(\"body\").on(\"click\", function (event) {\n            if (!event.target.closest('.option-box') && !event.target.closest('circle')) {\n              d3.selectAll('.option-box').remove();\n            }\n          });\n  \n          event.stopPropagation();\n        });\n  \n        node.append(\"title\")\n          .text(d => `ID: ${d.id}, Distance: ${d.distance}`);\n  \n        svg.append(\"text\")\n          .attr(\"transform\", `translate(60, 50)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 15)\n          .text(`Recall: ${recall}`);\n  \n        const legend = svg.append(\"g\")\n          .attr(\"transform\", `translate(60, 60)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 10);\n  \n        const uniqueGroups = [...new Set(nodes.map(d => d.group))];\n        const legendItems = legend.selectAll(\"g\")\n          .data(uniqueGroups)\n          .enter().append(\"g\")\n          .attr(\"transform\", (d, i) => `translate(0,${i * 20})`);\n        legendItems.append(\"rect\")\n          .attr(\"width\", 18)\n          .attr(\"height\", 18)\n          .attr(\"fill\", d => groupColorMap[d]);\n  \n        legendItems.append(\"text\")\n          .attr(\"x\", 24)\n          .attr(\"y\", 9)\n          .attr(\"dy\", \"0.35em\")\n          .text(d => {\n                if (d === 0) {\n                  return \"start node\";\n                } else if (d === 1) {\n                  return \"normal node\";\n                } else if (d === 2) {\n                  return \"gt&search intersection\";\n                } else if (d === 3) {\n                  return \"search other\";\n                }\n              });\n  \n        function ticked() {\n          link\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y);\n          node\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n          border\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n  \n          labels\n            .attr(\"x\", d => d.x + 2)\n            .attr(\"y\", d => d.y + 0.35); // 这里设置文本的位置\n  \n          that.updateThumbnail();\n        }\n  \n        function dragstarted(event) {\n          if (!event.active) simulation.alphaTarget(0.2).restart();\n          event.subject.fx = event.subject.x;\n          event.subject.fy = event.subject.y;\n        }\n  \n        function dragged(event) {\n          event.subject.fx = event.x;\n          event.subject.fy = event.y;\n        }\n  \n        function dragended(event) {\n          if (!event.active) simulation.alphaTarget(0);\n          event.subject.fx = null;\n          event.subject.fy = null;\n        }\n  \n        function zoomed(event) {\n          container.attr(\"transform\", event.transform);\n          that.updateThumbnail();\n        }\n  \n      },\n    },\n    computed: {\n      ...mapState({\n        dataNodelink: \"dataNodeLink\",\n        retrievalSet: \"retrievalSet\",\n        datasetName: \"datasetName\",\n        modelName: \"modelName\",\n        retrievalInfo: \"retrievalInfo\",\n        isDone: \"isDone\"\n      }),\n    },\n    watch: {\n  \n      // dataNodelink(newVal, oldVal) {\n      //   console.log(\"可以实现更新\",newVal);\n      //   if (newVal !== oldVal) {\n  \n      //   }\n      // }\n  \n    }\n  };\n  </script>\n  \n  <style scoped lang=\"scss\">\n  .node-link-main {\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n    position: relative;\n  \n    .dag-svg {\n      height: 100%;\n      width: 100%;\n    }\n  \n    .thumbnail-svg {\n      position: absolute;\n      bottom: 20px;\n      left: 20px;\n      border: 1px solid #ccc;\n      background: #fff;\n    }\n  }\n  \n  .option-box {\n    border: 1px solid #F7F7F7;\n    background-color: #F7F7F7;\n    padding: 5px;\n    position: absolute;\n    z-index: 1000;\n  \n    div {\n      margin: 2px 0;\n      cursor: pointer;\n    }\n  \n    div:hover {\n      background-color: #f0f0f0;\n    }\n  }\n  \n  .option-button {\n    padding: 5px 10px;\n    border: 1px solid #000;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: #f0f0f0;\n    font-size: 14px;\n    font-family: Arial, sans-serif;\n    color: red;\n  }\n  \n  .option-button:hover {\n    background-color: #e0e0e0;\n  }\n  </style><template>\n    <div class=\"node-link-main\">\n      <svg ref=\"dag\" class=\"dag-svg\"></svg>\n      <svg ref=\"thumbnail\" class=\"thumbnail-svg\"></svg>\n    </div>\n  </template>\n  \n  <script>\n  import * as d3 from \"d3\";\n  import { mapState } from \"vuex\";\n  import api from \"@/api/data\";\n  \n  export default {\n    name: \"NodeLinkView\",\n    components: {},\n    data() {\n      return {\n        nodelinkdata: {},\n        svgWidth: 0,  // 页面的宽度\n        svgHeight: 0,   // 页面高度\n        velocityDecay: 0.6,\n        thumbnailWidth: 0, // 缩略图宽度\n        thumbnailHeight: 0, // 缩略图高度\n      };\n    },\n    mounted() {\n      this.getViewSize();\n      this.nodelinkdata = this.$store.state.dataNodeLink;\n      console.log(\"请输出 link data 来看一下连接线的 data\",this.nodelinkdata);\n      this.initGraph(this.nodelinkdata);\n    },\n    methods: {\n      getViewSize() {\n        const dag = this.$refs.dag;\n        this.svgHeight = dag.clientHeight;\n        this.svgWidth = dag.clientWidth;\n        this.thumbnailWidth = this.svgWidth / 5;  // 缩略图宽度和高度分别为整个svg 的1/5\n        this.thumbnailHeight = this.svgHeight / 5;\n        if (this.nodelinkdata.nodes) {\n          this.initGraph(this.nodelinkdata);\n          this.initThumbnail();\n        }\n      },\n      async convertToImage(event, node) {\n        const res = await api.getImageUrl({ \"datasetName\": this.$store.state.datasetName, \"nodeId\": node.id });\n        const imageUrl = res[\"data\"][\"imageUrl\"];\n        const targetElement = d3.select(event.target);\n        const targetBBox = targetElement.node().getBBox();\n        const targetWidth = targetBBox.width;\n        const targetHeight = targetBBox.height;\n        const patternId = `pattern-${node.id}`;\n        let pattern = d3.select(`#${patternId}`);\n        if (pattern.empty()) {\n          const svg = d3.select(`#node-class`);\n          let defs = svg.select(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          if (defs.empty()) {\n            defs = svg.append(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          }\n          const pattern = defs.append(\"pattern\")\n            .attr(\"id\", patternId)\n            .attr(\"patternUnits\", \"objectBoundingBox\")\n            .attr(\"width\", 1) // 宽度为 1 表示相对于目标元素的宽度\n            .attr(\"height\", 1) // 高度为 1 表示相对于目标元素的高度\n            .attr(\"patternTransform\", \"translate(1, 1)\"); // 向右和向下移动 10 个单位\n  \n          const image = pattern.append(\"image\")\n            .attr(\"xlink:href\", imageUrl)\n            .attr(\"width\", 58)\n            .attr(\"height\", 58)\n            .attr(\"preserveAspectRatio\", \"xMidYMid slice\");\n        }\n        targetElement\n          .attr(\"r\", 30)\n          .attr(\"fill\", `url(#pattern-${node.id})`)\n          .attr(\"stroke\", \"#000\") // 设置边框颜色\n          .attr(\"stroke-width\", 2); // 设置边框宽度;\n  \n      },\n      initThumbnail() {\n        const thumbnail = d3.select(this.$refs.thumbnail);\n        thumbnail\n          .attr(\"width\", this.thumbnailWidth)\n          .attr(\"height\", this.thumbnailHeight)\n          .attr(\"viewBox\", `0 0 ${this.svgWidth} ${this.svgHeight}`)\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"position: absolute; bottom: 20px; left: 20px; border: 1px solid #ccc; background: #fff;\");\n      },\n      updateThumbnail() {\n        const that = this;\n        const thumbnail = d3.select(that.$refs.thumbnail);\n        thumbnail.selectAll(\"*\").remove();\n        const container = thumbnail.append(\"g\")\n          .attr(\"transform\", `scale(${that.thumbnailWidth / that.svgWidth}, ${that.thumbnailHeight / that.svgHeight})`);\n  \n        // Clone legend and link nodes\n        const legendNode = d3.select(that.$refs.dag).select(\"g.nodes\").node().cloneNode(true);\n        const linkNode = d3.select(that.$refs.dag).select(\"g.link\").node().cloneNode(true);\n        container.append(() => legendNode);\n        container.append(() => linkNode);\n  \n      },\n  \n      initGraph(data) {\n        const that = this;\n        const width = that.svgWidth;\n        const height = that.svgHeight;\n        const recall = data[\"metric\"]['recall'];\n        const links = data.links.map(d => ({ ...d }));\n        const nodes = data.nodes.map(d => ({ ...d }));\n  \n        // 在这里获取 links value 中的最大值和最小值\n        const val = links.map(d => d.value);\n        const minVal = Math.min(...val);\n        const maxVal = Math.max(...val);\n  \n        // 定义归一化函数\n        // 定义归一化函数，确保最小值不为 0\n        const normalize = (value) => {\n          const normalizedValue = (value - minVal) / (maxVal - minVal);\n          // 将归一化值范围调整为 [a, 1]，其中 a 为略大于 0 的数值，例如 0.1\n          const a = 0.1;\n          return 10*(normalizedValue * (1 - a) + a);\n        };\n  \n        const simulation = d3.forceSimulation(nodes)\n          .force(\"link\", d3.forceLink(links).id(d => d.id))\n          // .distance(d => normalize(d.value)/100000))\n          .force(\"charge\", d3.forceManyBody().strength(-10))\n          .force(\"center\", d3.forceCenter(width / 2, height / 2).strength(0.3))\n          // .force(\"radial\", d3.forceRadial(500, width / 2, height / 2).strength(0.8))\n          // .force(\"x\", d3.forceX(width / 2).strength(0.05))\n          // .force(\"y\", d3.forceY(height / 2).strength(0.05))\n          .velocityDecay(this.velocityDecay)\n          .on(\"tick\", ticked);\n  \n        const svg = d3.select(this.$refs.dag);\n        svg.selectAll(\"*\").remove();\n  \n        svg.attr(\"viewBox\", `0 0 ${width} ${height}`)\n          .attr(\"width\", \"100%\")\n          .attr(\"height\", \"100%\")\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"max-width: 100%; height: auto;\")\n          .call(d3.zoom().scaleExtent([0.5, 8]).on(\"zoom\", zoomed));\n  \n        const colorMap = d3.scaleOrdinal()\n          .range(['#FF0000', '#A4D3EE', '#FF7F50', '#32CD32']);\n          const groupColorMap = {\n            0: \"#FF0000\",\n            1: \"#A4D3EE\",\n            2: \"#32CD32\",\n            3: \"#FF7F50\",\n          };\n  \n        const container = svg.append(\"g\");\n        const link = container.append(\"g\")\n          .attr(\"class\", \"link\")\n          .attr(\"stroke\", \"#999\")\n          .attr(\"stroke-opacity\", 0.6)\n          .selectAll(\"line\")\n          .data(links)\n          .join(\"line\")\n          .attr(\"stroke-width\", d => Math.sqrt(normalize(d.value)))\n          .attr(\"marker-end\", \"url(#arrowhead)\")\n          .attr(\"fill\", d => groupColorMap[d.group]);\n  \n        const border = container.append(\"g\")\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 20;\n            } else if (v.group === 3) {\n              return 15;\n            } else if (v.group === 2) {\n              return 15;\n            } else {\n              return 12.5;\n            }\n          })\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"none\")\n          .attr(\"stroke-width\", 2);\n  \n        const node = container.append(\"g\")\n          .attr(\"class\", \"nodes\")\n          .attr(\"id\", `node-class`)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"stroke-width\", 0.2)\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 18;\n            } else if (v.group === 3) {\n              return 13;\n            } else if (v.group === 2) {\n              return 13;\n            } else {\n              return 10.5;\n            }\n          })\n          .attr(\"fill\", d => groupColorMap[d.group])\n          .call(d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n  \n        const labels = container.append(\"g\")\n          .attr(\"class\", \"labels\")\n          .selectAll(\"text\")\n          .data(nodes)\n          .join(\"text\")\n          .attr(\"dx\", 6)\n          .attr(\"dy\", \".35em\")\n          .style(\"font-size\", \"12px\")  // 设置字体大小\n          .attr(\"stroke\", \"white\")\n          .attr(\"paint-order\", \"stroke\")\n          .text(d => {\n            if (d.group === 2 || d.group === 3) {\n              return `${d.id}`;\n            } else {\n              return \"\";\n            }\n          });\n  \n        node.on(\"mouseover\", function (event, d) {\n          border.attr(\"stroke\", (b) => b.id === d.id ? \"#6096E6\" : \"none\");\n        })\n          .on(\"mouseout\", function (event, d) {\n            border.attr(\"stroke\", \"none\");\n          });\n  \n        node.on(\"click\", function (event, d) {\n          const existingBox = document.querySelector('.option-box');\n          if (existingBox) {\n            if (parseInt(existingBox.dataset.nodeId) === parseInt(d.id)) {\n              existingBox.remove();\n              return;\n            }\n            existingBox.remove();\n          }\n          const options = d3.select(\"body\").append(\"div\")\n            .attr(\"class\", \"option-box\")\n            .attr(\"data-node-id\", d.id)\n            .style(\"position\", \"absolute\")\n            .style(\"left\", `${event.pageX + 10}px`)\n            .style(\"top\", `${event.pageY + 10}px`)\n            .style(\"display\", \"flex\")\n            .style(\"gap\", \"8px\")\n            .style(\"border\", \"1px solid #7F7F7F\")\n            .style(\"background-color\", \"#F7F7F7\")\n            .style(\"width\", \"86px\")\n            .style(\"height\", \"25px\")\n            .style(\"padding\", \"2.5px 0\")\n            .style(\"padding-left\", \"8px\")\n            .style(\"border-radius\", \"8px\")\n            .style(\"align-items\", \"center\")\n            .style(\"z-index\", 1000);\n          options.append(\"div\")\n            .text(\"+\")\n            .style(\"font-size\", \"20px\")\n            .style(\"color\", \"#679D43\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .on(\"click\", () => console.log(\"Plus clicked\", d));\n          options.append(\"div\")\n            .text(\"-\")\n            .text(\"-\")\n            .style(\"font-size\", \"20px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => console.log(\"Minus clicked\"));\n          options.append(\"div\")\n            .text(\"A\")\n            .style(\"font-size\", \"14px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => that.convertToImage(event, d));\n  \n          d3.select(\"body\").on(\"click\", function (event) {\n            if (!event.target.closest('.option-box') && !event.target.closest('circle')) {\n              d3.selectAll('.option-box').remove();\n            }\n          });\n  \n          event.stopPropagation();\n        });\n  \n        node.append(\"title\")\n          .text(d => `ID: ${d.id}, Distance: ${d.distance}`);\n  \n        svg.append(\"text\")\n          .attr(\"transform\", `translate(60, 50)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 15)\n          .text(`Recall: ${recall}`);\n  \n        const legend = svg.append(\"g\")\n          .attr(\"transform\", `translate(60, 60)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 10);\n  \n        const uniqueGroups = [...new Set(nodes.map(d => d.group))];\n        const legendItems = legend.selectAll(\"g\")\n          .data(uniqueGroups)\n          .enter().append(\"g\")\n          .attr(\"transform\", (d, i) => `translate(0,${i * 20})`);\n        legendItems.append(\"rect\")\n          .attr(\"width\", 18)\n          .attr(\"height\", 18)\n          .attr(\"fill\", d => groupColorMap[d]);\n  \n        legendItems.append(\"text\")\n          .attr(\"x\", 24)\n          .attr(\"y\", 9)\n          .attr(\"dy\", \"0.35em\")\n          .text(d => {\n                if (d === 0) {\n                  return \"start node\";\n                } else if (d === 1) {\n                  return \"normal node\";\n                } else if (d === 2) {\n                  return \"gt&search intersection\";\n                } else if (d === 3) {\n                  return \"search other\";\n                }\n              });\n  \n        function ticked() {\n          link\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y);\n          node\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n          border\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n  \n          labels\n            .attr(\"x\", d => d.x + 2)\n            .attr(\"y\", d => d.y + 0.35); // 这里设置文本的位置\n  \n          that.updateThumbnail();\n        }\n  \n        function dragstarted(event) {\n          if (!event.active) simulation.alphaTarget(0.2).restart();\n          event.subject.fx = event.subject.x;\n          event.subject.fy = event.subject.y;\n        }\n  \n        function dragged(event) {\n          event.subject.fx = event.x;\n          event.subject.fy = event.y;\n        }\n  \n        function dragended(event) {\n          if (!event.active) simulation.alphaTarget(0);\n          event.subject.fx = null;\n          event.subject.fy = null;\n        }\n  \n        function zoomed(event) {\n          container.attr(\"transform\", event.transform);\n          that.updateThumbnail();\n        }\n  \n      },\n    },\n    computed: {\n      ...mapState({\n        dataNodelink: \"dataNodeLink\",\n        retrievalSet: \"retrievalSet\",\n        datasetName: \"datasetName\",\n        modelName: \"modelName\",\n        retrievalInfo: \"retrievalInfo\",\n        isDone: \"isDone\"\n      }),\n    },\n    watch: {\n  \n      // dataNodelink(newVal, oldVal) {\n      //   console.log(\"可以实现更新\",newVal);\n      //   if (newVal !== oldVal) {\n  \n      //   }\n      // }\n  \n    }\n  };\n  </script>\n  \n  <style scoped lang=\"scss\">\n  .node-link-main {\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n    position: relative;\n  \n    .dag-svg {\n      height: 100%;\n      width: 100%;\n    }\n  \n    .thumbnail-svg {\n      position: absolute;\n      bottom: 20px;\n      left: 20px;\n      border: 1px solid #ccc;\n      background: #fff;\n    }\n  }\n  \n  .option-box {\n    border: 1px solid #F7F7F7;\n    background-color: #F7F7F7;\n    padding: 5px;\n    position: absolute;\n    z-index: 1000;\n  \n    div {\n      margin: 2px 0;\n      cursor: pointer;\n    }\n  \n    div:hover {\n      background-color: #f0f0f0;\n    }\n  }\n  \n  .option-button {\n    padding: 5px 10px;\n    border: 1px solid #000;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: #f0f0f0;\n    font-size: 14px;\n    font-family: Arial, sans-serif;\n    color: red;\n  }\n  \n  .option-button:hover {\n    background-color: #e0e0e0;\n  }\n  </style><template>\n    <div class=\"node-link-main\">\n      <svg ref=\"dag\" class=\"dag-svg\"></svg>\n      <svg ref=\"thumbnail\" class=\"thumbnail-svg\"></svg>\n    </div>\n  </template>\n  \n  <script>\n  import * as d3 from \"d3\";\n  import { mapState } from \"vuex\";\n  import api from \"@/api/data\";\n  \n  export default {\n    name: \"NodeLinkView\",\n    components: {},\n    data() {\n      return {\n        nodelinkdata: {},\n        svgWidth: 0,  // 页面的宽度\n        svgHeight: 0,   // 页面高度\n        velocityDecay: 0.6,\n        thumbnailWidth: 0, // 缩略图宽度\n        thumbnailHeight: 0, // 缩略图高度\n      };\n    },\n    mounted() {\n      this.getViewSize();\n      this.nodelinkdata = this.$store.state.dataNodeLink;\n      console.log(\"请输出 link data 来看一下连接线的 data\",this.nodelinkdata);\n      this.initGraph(this.nodelinkdata);\n    },\n    methods: {\n      getViewSize() {\n        const dag = this.$refs.dag;\n        this.svgHeight = dag.clientHeight;\n        this.svgWidth = dag.clientWidth;\n        this.thumbnailWidth = this.svgWidth / 5;  // 缩略图宽度和高度分别为整个svg 的1/5\n        this.thumbnailHeight = this.svgHeight / 5;\n        if (this.nodelinkdata.nodes) {\n          this.initGraph(this.nodelinkdata);\n          this.initThumbnail();\n        }\n      },\n      async convertToImage(event, node) {\n        const res = await api.getImageUrl({ \"datasetName\": this.$store.state.datasetName, \"nodeId\": node.id });\n        const imageUrl = res[\"data\"][\"imageUrl\"];\n        const targetElement = d3.select(event.target);\n        const targetBBox = targetElement.node().getBBox();\n        const targetWidth = targetBBox.width;\n        const targetHeight = targetBBox.height;\n        const patternId = `pattern-${node.id}`;\n        let pattern = d3.select(`#${patternId}`);\n        if (pattern.empty()) {\n          const svg = d3.select(`#node-class`);\n          let defs = svg.select(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          if (defs.empty()) {\n            defs = svg.append(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          }\n          const pattern = defs.append(\"pattern\")\n            .attr(\"id\", patternId)\n            .attr(\"patternUnits\", \"objectBoundingBox\")\n            .attr(\"width\", 1) // 宽度为 1 表示相对于目标元素的宽度\n            .attr(\"height\", 1) // 高度为 1 表示相对于目标元素的高度\n            .attr(\"patternTransform\", \"translate(1, 1)\"); // 向右和向下移动 10 个单位\n  \n          const image = pattern.append(\"image\")\n            .attr(\"xlink:href\", imageUrl)\n            .attr(\"width\", 58)\n            .attr(\"height\", 58)\n            .attr(\"preserveAspectRatio\", \"xMidYMid slice\");\n        }\n        targetElement\n          .attr(\"r\", 30)\n          .attr(\"fill\", `url(#pattern-${node.id})`)\n          .attr(\"stroke\", \"#000\") // 设置边框颜色\n          .attr(\"stroke-width\", 2); // 设置边框宽度;\n  \n      },\n      initThumbnail() {\n        const thumbnail = d3.select(this.$refs.thumbnail);\n        thumbnail\n          .attr(\"width\", this.thumbnailWidth)\n          .attr(\"height\", this.thumbnailHeight)\n          .attr(\"viewBox\", `0 0 ${this.svgWidth} ${this.svgHeight}`)\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"position: absolute; bottom: 20px; left: 20px; border: 1px solid #ccc; background: #fff;\");\n      },\n      updateThumbnail() {\n        const that = this;\n        const thumbnail = d3.select(that.$refs.thumbnail);\n        thumbnail.selectAll(\"*\").remove();\n        const container = thumbnail.append(\"g\")\n          .attr(\"transform\", `scale(${that.thumbnailWidth / that.svgWidth}, ${that.thumbnailHeight / that.svgHeight})`);\n  \n        // Clone legend and link nodes\n        const legendNode = d3.select(that.$refs.dag).select(\"g.nodes\").node().cloneNode(true);\n        const linkNode = d3.select(that.$refs.dag).select(\"g.link\").node().cloneNode(true);\n        container.append(() => legendNode);\n        container.append(() => linkNode);\n  \n      },\n  \n      initGraph(data) {\n        const that = this;\n        const width = that.svgWidth;\n        const height = that.svgHeight;\n        const recall = data[\"metric\"]['recall'];\n        const links = data.links.map(d => ({ ...d }));\n        const nodes = data.nodes.map(d => ({ ...d }));\n  \n        // 在这里获取 links value 中的最大值和最小值\n        const val = links.map(d => d.value);\n        const minVal = Math.min(...val);\n        const maxVal = Math.max(...val);\n  \n        // 定义归一化函数\n        // 定义归一化函数，确保最小值不为 0\n        const normalize = (value) => {\n          const normalizedValue = (value - minVal) / (maxVal - minVal);\n          // 将归一化值范围调整为 [a, 1]，其中 a 为略大于 0 的数值，例如 0.1\n          const a = 0.1;\n          return 10*(normalizedValue * (1 - a) + a);\n        };\n  \n        const simulation = d3.forceSimulation(nodes)\n          .force(\"link\", d3.forceLink(links).id(d => d.id))\n          // .distance(d => normalize(d.value)/100000))\n          .force(\"charge\", d3.forceManyBody().strength(-10))\n          .force(\"center\", d3.forceCenter(width / 2, height / 2).strength(0.3))\n          // .force(\"radial\", d3.forceRadial(500, width / 2, height / 2).strength(0.8))\n          // .force(\"x\", d3.forceX(width / 2).strength(0.05))\n          // .force(\"y\", d3.forceY(height / 2).strength(0.05))\n          .velocityDecay(this.velocityDecay)\n          .on(\"tick\", ticked);\n  \n        const svg = d3.select(this.$refs.dag);\n        svg.selectAll(\"*\").remove();\n  \n        svg.attr(\"viewBox\", `0 0 ${width} ${height}`)\n          .attr(\"width\", \"100%\")\n          .attr(\"height\", \"100%\")\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"max-width: 100%; height: auto;\")\n          .call(d3.zoom().scaleExtent([0.5, 8]).on(\"zoom\", zoomed));\n  \n        const colorMap = d3.scaleOrdinal()\n          .range(['#FF0000', '#A4D3EE', '#FF7F50', '#32CD32']);\n          const groupColorMap = {\n            0: \"#FF0000\",\n            1: \"#A4D3EE\",\n            2: \"#32CD32\",\n            3: \"#FF7F50\",\n          };\n  \n        const container = svg.append(\"g\");\n        const link = container.append(\"g\")\n          .attr(\"class\", \"link\")\n          .attr(\"stroke\", \"#999\")\n          .attr(\"stroke-opacity\", 0.6)\n          .selectAll(\"line\")\n          .data(links)\n          .join(\"line\")\n          .attr(\"stroke-width\", d => Math.sqrt(normalize(d.value)))\n          .attr(\"marker-end\", \"url(#arrowhead)\")\n          .attr(\"fill\", d => groupColorMap[d.group]);\n  \n        const border = container.append(\"g\")\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 20;\n            } else if (v.group === 3) {\n              return 15;\n            } else if (v.group === 2) {\n              return 15;\n            } else {\n              return 12.5;\n            }\n          })\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"none\")\n          .attr(\"stroke-width\", 2);\n  \n        const node = container.append(\"g\")\n          .attr(\"class\", \"nodes\")\n          .attr(\"id\", `node-class`)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"stroke-width\", 0.2)\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 18;\n            } else if (v.group === 3) {\n              return 13;\n            } else if (v.group === 2) {\n              return 13;\n            } else {\n              return 10.5;\n            }\n          })\n          .attr(\"fill\", d => groupColorMap[d.group])\n          .call(d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n  \n        const labels = container.append(\"g\")\n          .attr(\"class\", \"labels\")\n          .selectAll(\"text\")\n          .data(nodes)\n          .join(\"text\")\n          .attr(\"dx\", 6)\n          .attr(\"dy\", \".35em\")\n          .style(\"font-size\", \"12px\")  // 设置字体大小\n          .attr(\"stroke\", \"white\")\n          .attr(\"paint-order\", \"stroke\")\n          .text(d => {\n            if (d.group === 2 || d.group === 3) {\n              return `${d.id}`;\n            } else {\n              return \"\";\n            }\n          });\n  \n        node.on(\"mouseover\", function (event, d) {\n          border.attr(\"stroke\", (b) => b.id === d.id ? \"#6096E6\" : \"none\");\n        })\n          .on(\"mouseout\", function (event, d) {\n            border.attr(\"stroke\", \"none\");\n          });\n  \n        node.on(\"click\", function (event, d) {\n          const existingBox = document.querySelector('.option-box');\n          if (existingBox) {\n            if (parseInt(existingBox.dataset.nodeId) === parseInt(d.id)) {\n              existingBox.remove();\n              return;\n            }\n            existingBox.remove();\n          }\n          const options = d3.select(\"body\").append(\"div\")\n            .attr(\"class\", \"option-box\")\n            .attr(\"data-node-id\", d.id)\n            .style(\"position\", \"absolute\")\n            .style(\"left\", `${event.pageX + 10}px`)\n            .style(\"top\", `${event.pageY + 10}px`)\n            .style(\"display\", \"flex\")\n            .style(\"gap\", \"8px\")\n            .style(\"border\", \"1px solid #7F7F7F\")\n            .style(\"background-color\", \"#F7F7F7\")\n            .style(\"width\", \"86px\")\n            .style(\"height\", \"25px\")\n            .style(\"padding\", \"2.5px 0\")\n            .style(\"padding-left\", \"8px\")\n            .style(\"border-radius\", \"8px\")\n            .style(\"align-items\", \"center\")\n            .style(\"z-index\", 1000);\n          options.append(\"div\")\n            .text(\"+\")\n            .style(\"font-size\", \"20px\")\n            .style(\"color\", \"#679D43\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .on(\"click\", () => console.log(\"Plus clicked\", d));\n          options.append(\"div\")\n            .text(\"-\")\n            .text(\"-\")\n            .style(\"font-size\", \"20px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => console.log(\"Minus clicked\"));\n          options.append(\"div\")\n            .text(\"A\")\n            .style(\"font-size\", \"14px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => that.convertToImage(event, d));\n  \n          d3.select(\"body\").on(\"click\", function (event) {\n            if (!event.target.closest('.option-box') && !event.target.closest('circle')) {\n              d3.selectAll('.option-box').remove();\n            }\n          });\n  \n          event.stopPropagation();\n        });\n  \n        node.append(\"title\")\n          .text(d => `ID: ${d.id}, Distance: ${d.distance}`);\n  \n        svg.append(\"text\")\n          .attr(\"transform\", `translate(60, 50)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 15)\n          .text(`Recall: ${recall}`);\n  \n        const legend = svg.append(\"g\")\n          .attr(\"transform\", `translate(60, 60)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 10);\n  \n        const uniqueGroups = [...new Set(nodes.map(d => d.group))];\n        const legendItems = legend.selectAll(\"g\")\n          .data(uniqueGroups)\n          .enter().append(\"g\")\n          .attr(\"transform\", (d, i) => `translate(0,${i * 20})`);\n        legendItems.append(\"rect\")\n          .attr(\"width\", 18)\n          .attr(\"height\", 18)\n          .attr(\"fill\", d => groupColorMap[d]);\n  \n        legendItems.append(\"text\")\n          .attr(\"x\", 24)\n          .attr(\"y\", 9)\n          .attr(\"dy\", \"0.35em\")\n          .text(d => {\n                if (d === 0) {\n                  return \"start node\";\n                } else if (d === 1) {\n                  return \"normal node\";\n                } else if (d === 2) {\n                  return \"gt&search intersection\";\n                } else if (d === 3) {\n                  return \"search other\";\n                }\n              });\n  \n        function ticked() {\n          link\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y);\n          node\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n          border\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n  \n          labels\n            .attr(\"x\", d => d.x + 2)\n            .attr(\"y\", d => d.y + 0.35); // 这里设置文本的位置\n  \n          that.updateThumbnail();\n        }\n  \n        function dragstarted(event) {\n          if (!event.active) simulation.alphaTarget(0.2).restart();\n          event.subject.fx = event.subject.x;\n          event.subject.fy = event.subject.y;\n        }\n  \n        function dragged(event) {\n          event.subject.fx = event.x;\n          event.subject.fy = event.y;\n        }\n  \n        function dragended(event) {\n          if (!event.active) simulation.alphaTarget(0);\n          event.subject.fx = null;\n          event.subject.fy = null;\n        }\n  \n        function zoomed(event) {\n          container.attr(\"transform\", event.transform);\n          that.updateThumbnail();\n        }\n  \n      },\n    },\n    computed: {\n      ...mapState({\n        dataNodelink: \"dataNodeLink\",\n        retrievalSet: \"retrievalSet\",\n        datasetName: \"datasetName\",\n        modelName: \"modelName\",\n        retrievalInfo: \"retrievalInfo\",\n        isDone: \"isDone\"\n      }),\n    },\n    watch: {\n  \n      // dataNodelink(newVal, oldVal) {\n      //   console.log(\"可以实现更新\",newVal);\n      //   if (newVal !== oldVal) {\n  \n      //   }\n      // }\n  \n    }\n  };\n  </script>\n  \n  <style scoped lang=\"scss\">\n  .node-link-main {\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n    position: relative;\n  \n    .dag-svg {\n      height: 100%;\n      width: 100%;\n    }\n  \n    .thumbnail-svg {\n      position: absolute;\n      bottom: 20px;\n      left: 20px;\n      border: 1px solid #ccc;\n      background: #fff;\n    }\n  }\n  \n  .option-box {\n    border: 1px solid #F7F7F7;\n    background-color: #F7F7F7;\n    padding: 5px;\n    position: absolute;\n    z-index: 1000;\n  \n    div {\n      margin: 2px 0;\n      cursor: pointer;\n    }\n  \n    div:hover {\n      background-color: #f0f0f0;\n    }\n  }\n  \n  .option-button {\n    padding: 5px 10px;\n    border: 1px solid #000;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: #f0f0f0;\n    font-size: 14px;\n    font-family: Arial, sans-serif;\n    color: red;\n  }\n  \n  .option-button:hover {\n    background-color: #e0e0e0;\n  }\n  </style><template>\n    <div class=\"node-link-main\">\n      <svg ref=\"dag\" class=\"dag-svg\"></svg>\n      <svg ref=\"thumbnail\" class=\"thumbnail-svg\"></svg>\n    </div>\n  </template>\n  \n  <script>\n  import * as d3 from \"d3\";\n  import { mapState } from \"vuex\";\n  import api from \"@/api/data\";\n  \n  export default {\n    name: \"NodeLinkView\",\n    components: {},\n    data() {\n      return {\n        nodelinkdata: {},\n        svgWidth: 0,  // 页面的宽度\n        svgHeight: 0,   // 页面高度\n        velocityDecay: 0.6,\n        thumbnailWidth: 0, // 缩略图宽度\n        thumbnailHeight: 0, // 缩略图高度\n      };\n    },\n    mounted() {\n      this.getViewSize();\n      this.nodelinkdata = this.$store.state.dataNodeLink;\n      console.log(\"请输出 link data 来看一下连接线的 data\",this.nodelinkdata);\n      this.initGraph(this.nodelinkdata);\n    },\n    methods: {\n      getViewSize() {\n        const dag = this.$refs.dag;\n        this.svgHeight = dag.clientHeight;\n        this.svgWidth = dag.clientWidth;\n        this.thumbnailWidth = this.svgWidth / 5;  // 缩略图宽度和高度分别为整个svg 的1/5\n        this.thumbnailHeight = this.svgHeight / 5;\n        if (this.nodelinkdata.nodes) {\n          this.initGraph(this.nodelinkdata);\n          this.initThumbnail();\n        }\n      },\n      async convertToImage(event, node) {\n        const res = await api.getImageUrl({ \"datasetName\": this.$store.state.datasetName, \"nodeId\": node.id });\n        const imageUrl = res[\"data\"][\"imageUrl\"];\n        const targetElement = d3.select(event.target);\n        const targetBBox = targetElement.node().getBBox();\n        const targetWidth = targetBBox.width;\n        const targetHeight = targetBBox.height;\n        const patternId = `pattern-${node.id}`;\n        let pattern = d3.select(`#${patternId}`);\n        if (pattern.empty()) {\n          const svg = d3.select(`#node-class`);\n          let defs = svg.select(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          if (defs.empty()) {\n            defs = svg.append(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          }\n          const pattern = defs.append(\"pattern\")\n            .attr(\"id\", patternId)\n            .attr(\"patternUnits\", \"objectBoundingBox\")\n            .attr(\"width\", 1) // 宽度为 1 表示相对于目标元素的宽度\n            .attr(\"height\", 1) // 高度为 1 表示相对于目标元素的高度\n            .attr(\"patternTransform\", \"translate(1, 1)\"); // 向右和向下移动 10 个单位\n  \n          const image = pattern.append(\"image\")\n            .attr(\"xlink:href\", imageUrl)\n            .attr(\"width\", 58)\n            .attr(\"height\", 58)\n            .attr(\"preserveAspectRatio\", \"xMidYMid slice\");\n        }\n        targetElement\n          .attr(\"r\", 30)\n          .attr(\"fill\", `url(#pattern-${node.id})`)\n          .attr(\"stroke\", \"#000\") // 设置边框颜色\n          .attr(\"stroke-width\", 2); // 设置边框宽度;\n  \n      },\n      initThumbnail() {\n        const thumbnail = d3.select(this.$refs.thumbnail);\n        thumbnail\n          .attr(\"width\", this.thumbnailWidth)\n          .attr(\"height\", this.thumbnailHeight)\n          .attr(\"viewBox\", `0 0 ${this.svgWidth} ${this.svgHeight}`)\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"position: absolute; bottom: 20px; left: 20px; border: 1px solid #ccc; background: #fff;\");\n      },\n      updateThumbnail() {\n        const that = this;\n        const thumbnail = d3.select(that.$refs.thumbnail);\n        thumbnail.selectAll(\"*\").remove();\n        const container = thumbnail.append(\"g\")\n          .attr(\"transform\", `scale(${that.thumbnailWidth / that.svgWidth}, ${that.thumbnailHeight / that.svgHeight})`);\n  \n        // Clone legend and link nodes\n        const legendNode = d3.select(that.$refs.dag).select(\"g.nodes\").node().cloneNode(true);\n        const linkNode = d3.select(that.$refs.dag).select(\"g.link\").node().cloneNode(true);\n        container.append(() => legendNode);\n        container.append(() => linkNode);\n  \n      },\n  \n      initGraph(data) {\n        const that = this;\n        const width = that.svgWidth;\n        const height = that.svgHeight;\n        const recall = data[\"metric\"]['recall'];\n        const links = data.links.map(d => ({ ...d }));\n        const nodes = data.nodes.map(d => ({ ...d }));\n  \n        // 在这里获取 links value 中的最大值和最小值\n        const val = links.map(d => d.value);\n        const minVal = Math.min(...val);\n        const maxVal = Math.max(...val);\n  \n        // 定义归一化函数\n        // 定义归一化函数，确保最小值不为 0\n        const normalize = (value) => {\n          const normalizedValue = (value - minVal) / (maxVal - minVal);\n          // 将归一化值范围调整为 [a, 1]，其中 a 为略大于 0 的数值，例如 0.1\n          const a = 0.1;\n          return 10*(normalizedValue * (1 - a) + a);\n        };\n  \n        const simulation = d3.forceSimulation(nodes)\n          .force(\"link\", d3.forceLink(links).id(d => d.id))\n          // .distance(d => normalize(d.value)/100000))\n          .force(\"charge\", d3.forceManyBody().strength(-10))\n          .force(\"center\", d3.forceCenter(width / 2, height / 2).strength(0.3))\n          // .force(\"radial\", d3.forceRadial(500, width / 2, height / 2).strength(0.8))\n          // .force(\"x\", d3.forceX(width / 2).strength(0.05))\n          // .force(\"y\", d3.forceY(height / 2).strength(0.05))\n          .velocityDecay(this.velocityDecay)\n          .on(\"tick\", ticked);\n  \n        const svg = d3.select(this.$refs.dag);\n        svg.selectAll(\"*\").remove();\n  \n        svg.attr(\"viewBox\", `0 0 ${width} ${height}`)\n          .attr(\"width\", \"100%\")\n          .attr(\"height\", \"100%\")\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"max-width: 100%; height: auto;\")\n          .call(d3.zoom().scaleExtent([0.5, 8]).on(\"zoom\", zoomed));\n  \n        const colorMap = d3.scaleOrdinal()\n          .range(['#FF0000', '#A4D3EE', '#FF7F50', '#32CD32']);\n          const groupColorMap = {\n            0: \"#FF0000\",\n            1: \"#A4D3EE\",\n            2: \"#32CD32\",\n            3: \"#FF7F50\",\n          };\n  \n        const container = svg.append(\"g\");\n        const link = container.append(\"g\")\n          .attr(\"class\", \"link\")\n          .attr(\"stroke\", \"#999\")\n          .attr(\"stroke-opacity\", 0.6)\n          .selectAll(\"line\")\n          .data(links)\n          .join(\"line\")\n          .attr(\"stroke-width\", d => Math.sqrt(normalize(d.value)))\n          .attr(\"marker-end\", \"url(#arrowhead)\")\n          .attr(\"fill\", d => groupColorMap[d.group]);\n  \n        const border = container.append(\"g\")\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 20;\n            } else if (v.group === 3) {\n              return 15;\n            } else if (v.group === 2) {\n              return 15;\n            } else {\n              return 12.5;\n            }\n          })\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"none\")\n          .attr(\"stroke-width\", 2);\n  \n        const node = container.append(\"g\")\n          .attr(\"class\", \"nodes\")\n          .attr(\"id\", `node-class`)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"stroke-width\", 0.2)\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 18;\n            } else if (v.group === 3) {\n              return 13;\n            } else if (v.group === 2) {\n              return 13;\n            } else {\n              return 10.5;\n            }\n          })\n          .attr(\"fill\", d => groupColorMap[d.group])\n          .call(d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n  \n        const labels = container.append(\"g\")\n          .attr(\"class\", \"labels\")\n          .selectAll(\"text\")\n          .data(nodes)\n          .join(\"text\")\n          .attr(\"dx\", 6)\n          .attr(\"dy\", \".35em\")\n          .style(\"font-size\", \"12px\")  // 设置字体大小\n          .attr(\"stroke\", \"white\")\n          .attr(\"paint-order\", \"stroke\")\n          .text(d => {\n            if (d.group === 2 || d.group === 3) {\n              return `${d.id}`;\n            } else {\n              return \"\";\n            }\n          });\n  \n        node.on(\"mouseover\", function (event, d) {\n          border.attr(\"stroke\", (b) => b.id === d.id ? \"#6096E6\" : \"none\");\n        })\n          .on(\"mouseout\", function (event, d) {\n            border.attr(\"stroke\", \"none\");\n          });\n  \n        node.on(\"click\", function (event, d) {\n          const existingBox = document.querySelector('.option-box');\n          if (existingBox) {\n            if (parseInt(existingBox.dataset.nodeId) === parseInt(d.id)) {\n              existingBox.remove();\n              return;\n            }\n            existingBox.remove();\n          }\n          const options = d3.select(\"body\").append(\"div\")\n            .attr(\"class\", \"option-box\")\n            .attr(\"data-node-id\", d.id)\n            .style(\"position\", \"absolute\")\n            .style(\"left\", `${event.pageX + 10}px`)\n            .style(\"top\", `${event.pageY + 10}px`)\n            .style(\"display\", \"flex\")\n            .style(\"gap\", \"8px\")\n            .style(\"border\", \"1px solid #7F7F7F\")\n            .style(\"background-color\", \"#F7F7F7\")\n            .style(\"width\", \"86px\")\n            .style(\"height\", \"25px\")\n            .style(\"padding\", \"2.5px 0\")\n            .style(\"padding-left\", \"8px\")\n            .style(\"border-radius\", \"8px\")\n            .style(\"align-items\", \"center\")\n            .style(\"z-index\", 1000);\n          options.append(\"div\")\n            .text(\"+\")\n            .style(\"font-size\", \"20px\")\n            .style(\"color\", \"#679D43\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .on(\"click\", () => console.log(\"Plus clicked\", d));\n          options.append(\"div\")\n            .text(\"-\")\n            .text(\"-\")\n            .style(\"font-size\", \"20px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => console.log(\"Minus clicked\"));\n          options.append(\"div\")\n            .text(\"A\")\n            .style(\"font-size\", \"14px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => that.convertToImage(event, d));\n  \n          d3.select(\"body\").on(\"click\", function (event) {\n            if (!event.target.closest('.option-box') && !event.target.closest('circle')) {\n              d3.selectAll('.option-box').remove();\n            }\n          });\n  \n          event.stopPropagation();\n        });\n  \n        node.append(\"title\")\n          .text(d => `ID: ${d.id}, Distance: ${d.distance}`);\n  \n        svg.append(\"text\")\n          .attr(\"transform\", `translate(60, 50)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 15)\n          .text(`Recall: ${recall}`);\n  \n        const legend = svg.append(\"g\")\n          .attr(\"transform\", `translate(60, 60)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 10);\n  \n        const uniqueGroups = [...new Set(nodes.map(d => d.group))];\n        const legendItems = legend.selectAll(\"g\")\n          .data(uniqueGroups)\n          .enter().append(\"g\")\n          .attr(\"transform\", (d, i) => `translate(0,${i * 20})`);\n        legendItems.append(\"rect\")\n          .attr(\"width\", 18)\n          .attr(\"height\", 18)\n          .attr(\"fill\", d => groupColorMap[d]);\n  \n        legendItems.append(\"text\")\n          .attr(\"x\", 24)\n          .attr(\"y\", 9)\n          .attr(\"dy\", \"0.35em\")\n          .text(d => {\n                if (d === 0) {\n                  return \"start node\";\n                } else if (d === 1) {\n                  return \"normal node\";\n                } else if (d === 2) {\n                  return \"gt&search intersection\";\n                } else if (d === 3) {\n                  return \"search other\";\n                }\n              });\n  \n        function ticked() {\n          link\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y);\n          node\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n          border\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n  \n          labels\n            .attr(\"x\", d => d.x + 2)\n            .attr(\"y\", d => d.y + 0.35); // 这里设置文本的位置\n  \n          that.updateThumbnail();\n        }\n  \n        function dragstarted(event) {\n          if (!event.active) simulation.alphaTarget(0.2).restart();\n          event.subject.fx = event.subject.x;\n          event.subject.fy = event.subject.y;\n        }\n  \n        function dragged(event) {\n          event.subject.fx = event.x;\n          event.subject.fy = event.y;\n        }\n  \n        function dragended(event) {\n          if (!event.active) simulation.alphaTarget(0);\n          event.subject.fx = null;\n          event.subject.fy = null;\n        }\n  \n        function zoomed(event) {\n          container.attr(\"transform\", event.transform);\n          that.updateThumbnail();\n        }\n  \n      },\n    },\n    computed: {\n      ...mapState({\n        dataNodelink: \"dataNodeLink\",\n        retrievalSet: \"retrievalSet\",\n        datasetName: \"datasetName\",\n        modelName: \"modelName\",\n        retrievalInfo: \"retrievalInfo\",\n        isDone: \"isDone\"\n      }),\n    },\n    watch: {\n  \n      // dataNodelink(newVal, oldVal) {\n      //   console.log(\"可以实现更新\",newVal);\n      //   if (newVal !== oldVal) {\n  \n      //   }\n      // }\n  \n    }\n  };\n  </script>\n  \n  <style scoped lang=\"scss\">\n  .node-link-main {\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n    position: relative;\n  \n    .dag-svg {\n      height: 100%;\n      width: 100%;\n    }\n  \n    .thumbnail-svg {\n      position: absolute;\n      bottom: 20px;\n      left: 20px;\n      border: 1px solid #ccc;\n      background: #fff;\n    }\n  }\n  \n  .option-box {\n    border: 1px solid #F7F7F7;\n    background-color: #F7F7F7;\n    padding: 5px;\n    position: absolute;\n    z-index: 1000;\n  \n    div {\n      margin: 2px 0;\n      cursor: pointer;\n    }\n  \n    div:hover {\n      background-color: #f0f0f0;\n    }\n  }\n  \n  .option-button {\n    padding: 5px 10px;\n    border: 1px solid #000;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: #f0f0f0;\n    font-size: 14px;\n    font-family: Arial, sans-serif;\n    color: red;\n  }\n  \n  .option-button:hover {\n    background-color: #e0e0e0;\n  }\n  </style><template>\n    <div class=\"node-link-main\">\n      <svg ref=\"dag\" class=\"dag-svg\"></svg>\n      <svg ref=\"thumbnail\" class=\"thumbnail-svg\"></svg>\n    </div>\n  </template>\n  \n  <script>\n  import * as d3 from \"d3\";\n  import { mapState } from \"vuex\";\n  import api from \"@/api/data\";\n  \n  export default {\n    name: \"NodeLinkView\",\n    components: {},\n    data() {\n      return {\n        nodelinkdata: {},\n        svgWidth: 0,  // 页面的宽度\n        svgHeight: 0,   // 页面高度\n        velocityDecay: 0.6,\n        thumbnailWidth: 0, // 缩略图宽度\n        thumbnailHeight: 0, // 缩略图高度\n      };\n    },\n    mounted() {\n      this.getViewSize();\n      this.nodelinkdata = this.$store.state.dataNodeLink;\n      console.log(\"请输出 link data 来看一下连接线的 data\",this.nodelinkdata);\n      this.initGraph(this.nodelinkdata);\n    },\n    methods: {\n      getViewSize() {\n        const dag = this.$refs.dag;\n        this.svgHeight = dag.clientHeight;\n        this.svgWidth = dag.clientWidth;\n        this.thumbnailWidth = this.svgWidth / 5;  // 缩略图宽度和高度分别为整个svg 的1/5\n        this.thumbnailHeight = this.svgHeight / 5;\n        if (this.nodelinkdata.nodes) {\n          this.initGraph(this.nodelinkdata);\n          this.initThumbnail();\n        }\n      },\n      async convertToImage(event, node) {\n        const res = await api.getImageUrl({ \"datasetName\": this.$store.state.datasetName, \"nodeId\": node.id });\n        const imageUrl = res[\"data\"][\"imageUrl\"];\n        const targetElement = d3.select(event.target);\n        const targetBBox = targetElement.node().getBBox();\n        const targetWidth = targetBBox.width;\n        const targetHeight = targetBBox.height;\n        const patternId = `pattern-${node.id}`;\n        let pattern = d3.select(`#${patternId}`);\n        if (pattern.empty()) {\n          const svg = d3.select(`#node-class`);\n          let defs = svg.select(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          if (defs.empty()) {\n            defs = svg.append(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          }\n          const pattern = defs.append(\"pattern\")\n            .attr(\"id\", patternId)\n            .attr(\"patternUnits\", \"objectBoundingBox\")\n            .attr(\"width\", 1) // 宽度为 1 表示相对于目标元素的宽度\n            .attr(\"height\", 1) // 高度为 1 表示相对于目标元素的高度\n            .attr(\"patternTransform\", \"translate(1, 1)\"); // 向右和向下移动 10 个单位\n  \n          const image = pattern.append(\"image\")\n            .attr(\"xlink:href\", imageUrl)\n            .attr(\"width\", 58)\n            .attr(\"height\", 58)\n            .attr(\"preserveAspectRatio\", \"xMidYMid slice\");\n        }\n        targetElement\n          .attr(\"r\", 30)\n          .attr(\"fill\", `url(#pattern-${node.id})`)\n          .attr(\"stroke\", \"#000\") // 设置边框颜色\n          .attr(\"stroke-width\", 2); // 设置边框宽度;\n  \n      },\n      initThumbnail() {\n        const thumbnail = d3.select(this.$refs.thumbnail);\n        thumbnail\n          .attr(\"width\", this.thumbnailWidth)\n          .attr(\"height\", this.thumbnailHeight)\n          .attr(\"viewBox\", `0 0 ${this.svgWidth} ${this.svgHeight}`)\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"position: absolute; bottom: 20px; left: 20px; border: 1px solid #ccc; background: #fff;\");\n      },\n      updateThumbnail() {\n        const that = this;\n        const thumbnail = d3.select(that.$refs.thumbnail);\n        thumbnail.selectAll(\"*\").remove();\n        const container = thumbnail.append(\"g\")\n          .attr(\"transform\", `scale(${that.thumbnailWidth / that.svgWidth}, ${that.thumbnailHeight / that.svgHeight})`);\n  \n        // Clone legend and link nodes\n        const legendNode = d3.select(that.$refs.dag).select(\"g.nodes\").node().cloneNode(true);\n        const linkNode = d3.select(that.$refs.dag).select(\"g.link\").node().cloneNode(true);\n        container.append(() => legendNode);\n        container.append(() => linkNode);\n  \n      },\n  \n      initGraph(data) {\n        const that = this;\n        const width = that.svgWidth;\n        const height = that.svgHeight;\n        const recall = data[\"metric\"]['recall'];\n        const links = data.links.map(d => ({ ...d }));\n        const nodes = data.nodes.map(d => ({ ...d }));\n  \n        // 在这里获取 links value 中的最大值和最小值\n        const val = links.map(d => d.value);\n        const minVal = Math.min(...val);\n        const maxVal = Math.max(...val);\n  \n        // 定义归一化函数\n        // 定义归一化函数，确保最小值不为 0\n        const normalize = (value) => {\n          const normalizedValue = (value - minVal) / (maxVal - minVal);\n          // 将归一化值范围调整为 [a, 1]，其中 a 为略大于 0 的数值，例如 0.1\n          const a = 0.1;\n          return 10*(normalizedValue * (1 - a) + a);\n        };\n  \n        const simulation = d3.forceSimulation(nodes)\n          .force(\"link\", d3.forceLink(links).id(d => d.id))\n          // .distance(d => normalize(d.value)/100000))\n          .force(\"charge\", d3.forceManyBody().strength(-10))\n          .force(\"center\", d3.forceCenter(width / 2, height / 2).strength(0.3))\n          // .force(\"radial\", d3.forceRadial(500, width / 2, height / 2).strength(0.8))\n          // .force(\"x\", d3.forceX(width / 2).strength(0.05))\n          // .force(\"y\", d3.forceY(height / 2).strength(0.05))\n          .velocityDecay(this.velocityDecay)\n          .on(\"tick\", ticked);\n  \n        const svg = d3.select(this.$refs.dag);\n        svg.selectAll(\"*\").remove();\n  \n        svg.attr(\"viewBox\", `0 0 ${width} ${height}`)\n          .attr(\"width\", \"100%\")\n          .attr(\"height\", \"100%\")\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"max-width: 100%; height: auto;\")\n          .call(d3.zoom().scaleExtent([0.5, 8]).on(\"zoom\", zoomed));\n  \n        const colorMap = d3.scaleOrdinal()\n          .range(['#FF0000', '#A4D3EE', '#FF7F50', '#32CD32']);\n          const groupColorMap = {\n            0: \"#FF0000\",\n            1: \"#A4D3EE\",\n            2: \"#32CD32\",\n            3: \"#FF7F50\",\n          };\n  \n        const container = svg.append(\"g\");\n        const link = container.append(\"g\")\n          .attr(\"class\", \"link\")\n          .attr(\"stroke\", \"#999\")\n          .attr(\"stroke-opacity\", 0.6)\n          .selectAll(\"line\")\n          .data(links)\n          .join(\"line\")\n          .attr(\"stroke-width\", d => Math.sqrt(normalize(d.value)))\n          .attr(\"marker-end\", \"url(#arrowhead)\")\n          .attr(\"fill\", d => groupColorMap[d.group]);\n  \n        const border = container.append(\"g\")\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 20;\n            } else if (v.group === 3) {\n              return 15;\n            } else if (v.group === 2) {\n              return 15;\n            } else {\n              return 12.5;\n            }\n          })\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"none\")\n          .attr(\"stroke-width\", 2);\n  \n        const node = container.append(\"g\")\n          .attr(\"class\", \"nodes\")\n          .attr(\"id\", `node-class`)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"stroke-width\", 0.2)\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 18;\n            } else if (v.group === 3) {\n              return 13;\n            } else if (v.group === 2) {\n              return 13;\n            } else {\n              return 10.5;\n            }\n          })\n          .attr(\"fill\", d => groupColorMap[d.group])\n          .call(d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n  \n        const labels = container.append(\"g\")\n          .attr(\"class\", \"labels\")\n          .selectAll(\"text\")\n          .data(nodes)\n          .join(\"text\")\n          .attr(\"dx\", 6)\n          .attr(\"dy\", \".35em\")\n          .style(\"font-size\", \"12px\")  // 设置字体大小\n          .attr(\"stroke\", \"white\")\n          .attr(\"paint-order\", \"stroke\")\n          .text(d => {\n            if (d.group === 2 || d.group === 3) {\n              return `${d.id}`;\n            } else {\n              return \"\";\n            }\n          });\n  \n        node.on(\"mouseover\", function (event, d) {\n          border.attr(\"stroke\", (b) => b.id === d.id ? \"#6096E6\" : \"none\");\n        })\n          .on(\"mouseout\", function (event, d) {\n            border.attr(\"stroke\", \"none\");\n          });\n  \n        node.on(\"click\", function (event, d) {\n          const existingBox = document.querySelector('.option-box');\n          if (existingBox) {\n            if (parseInt(existingBox.dataset.nodeId) === parseInt(d.id)) {\n              existingBox.remove();\n              return;\n            }\n            existingBox.remove();\n          }\n          const options = d3.select(\"body\").append(\"div\")\n            .attr(\"class\", \"option-box\")\n            .attr(\"data-node-id\", d.id)\n            .style(\"position\", \"absolute\")\n            .style(\"left\", `${event.pageX + 10}px`)\n            .style(\"top\", `${event.pageY + 10}px`)\n            .style(\"display\", \"flex\")\n            .style(\"gap\", \"8px\")\n            .style(\"border\", \"1px solid #7F7F7F\")\n            .style(\"background-color\", \"#F7F7F7\")\n            .style(\"width\", \"86px\")\n            .style(\"height\", \"25px\")\n            .style(\"padding\", \"2.5px 0\")\n            .style(\"padding-left\", \"8px\")\n            .style(\"border-radius\", \"8px\")\n            .style(\"align-items\", \"center\")\n            .style(\"z-index\", 1000);\n          options.append(\"div\")\n            .text(\"+\")\n            .style(\"font-size\", \"20px\")\n            .style(\"color\", \"#679D43\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .on(\"click\", () => console.log(\"Plus clicked\", d));\n          options.append(\"div\")\n            .text(\"-\")\n            .text(\"-\")\n            .style(\"font-size\", \"20px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => console.log(\"Minus clicked\"));\n          options.append(\"div\")\n            .text(\"A\")\n            .style(\"font-size\", \"14px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => that.convertToImage(event, d));\n  \n          d3.select(\"body\").on(\"click\", function (event) {\n            if (!event.target.closest('.option-box') && !event.target.closest('circle')) {\n              d3.selectAll('.option-box').remove();\n            }\n          });\n  \n          event.stopPropagation();\n        });\n  \n        node.append(\"title\")\n          .text(d => `ID: ${d.id}, Distance: ${d.distance}`);\n  \n        svg.append(\"text\")\n          .attr(\"transform\", `translate(60, 50)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 15)\n          .text(`Recall: ${recall}`);\n  \n        const legend = svg.append(\"g\")\n          .attr(\"transform\", `translate(60, 60)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 10);\n  \n        const uniqueGroups = [...new Set(nodes.map(d => d.group))];\n        const legendItems = legend.selectAll(\"g\")\n          .data(uniqueGroups)\n          .enter().append(\"g\")\n          .attr(\"transform\", (d, i) => `translate(0,${i * 20})`);\n        legendItems.append(\"rect\")\n          .attr(\"width\", 18)\n          .attr(\"height\", 18)\n          .attr(\"fill\", d => groupColorMap[d]);\n  \n        legendItems.append(\"text\")\n          .attr(\"x\", 24)\n          .attr(\"y\", 9)\n          .attr(\"dy\", \"0.35em\")\n          .text(d => {\n                if (d === 0) {\n                  return \"start node\";\n                } else if (d === 1) {\n                  return \"normal node\";\n                } else if (d === 2) {\n                  return \"gt&search intersection\";\n                } else if (d === 3) {\n                  return \"search other\";\n                }\n              });\n  \n        function ticked() {\n          link\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y);\n          node\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n          border\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n  \n          labels\n            .attr(\"x\", d => d.x + 2)\n            .attr(\"y\", d => d.y + 0.35); // 这里设置文本的位置\n  \n          that.updateThumbnail();\n        }\n  \n        function dragstarted(event) {\n          if (!event.active) simulation.alphaTarget(0.2).restart();\n          event.subject.fx = event.subject.x;\n          event.subject.fy = event.subject.y;\n        }\n  \n        function dragged(event) {\n          event.subject.fx = event.x;\n          event.subject.fy = event.y;\n        }\n  \n        function dragended(event) {\n          if (!event.active) simulation.alphaTarget(0);\n          event.subject.fx = null;\n          event.subject.fy = null;\n        }\n  \n        function zoomed(event) {\n          container.attr(\"transform\", event.transform);\n          that.updateThumbnail();\n        }\n  \n      },\n    },\n    computed: {\n      ...mapState({\n        dataNodelink: \"dataNodeLink\",\n        retrievalSet: \"retrievalSet\",\n        datasetName: \"datasetName\",\n        modelName: \"modelName\",\n        retrievalInfo: \"retrievalInfo\",\n        isDone: \"isDone\"\n      }),\n    },\n    watch: {\n  \n      // dataNodelink(newVal, oldVal) {\n      //   console.log(\"可以实现更新\",newVal);\n      //   if (newVal !== oldVal) {\n  \n      //   }\n      // }\n  \n    }\n  };\n  </script>\n  \n  <style scoped lang=\"scss\">\n  .node-link-main {\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n    position: relative;\n  \n    .dag-svg {\n      height: 100%;\n      width: 100%;\n    }\n  \n    .thumbnail-svg {\n      position: absolute;\n      bottom: 20px;\n      left: 20px;\n      border: 1px solid #ccc;\n      background: #fff;\n    }\n  }\n  \n  .option-box {\n    border: 1px solid #F7F7F7;\n    background-color: #F7F7F7;\n    padding: 5px;\n    position: absolute;\n    z-index: 1000;\n  \n    div {\n      margin: 2px 0;\n      cursor: pointer;\n    }\n  \n    div:hover {\n      background-color: #f0f0f0;\n    }\n  }\n  \n  .option-button {\n    padding: 5px 10px;\n    border: 1px solid #000;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: #f0f0f0;\n    font-size: 14px;\n    font-family: Arial, sans-serif;\n    color: red;\n  }\n  \n  .option-button:hover {\n    background-color: #e0e0e0;\n  }\n  </style><template>\n    <div class=\"node-link-main\">\n      <svg ref=\"dag\" class=\"dag-svg\"></svg>\n      <svg ref=\"thumbnail\" class=\"thumbnail-svg\"></svg>\n    </div>\n  </template>\n  \n  <script>\n  import * as d3 from \"d3\";\n  import { mapState } from \"vuex\";\n  import api from \"@/api/data\";\n  \n  export default {\n    name: \"NodeLinkView\",\n    components: {},\n    data() {\n      return {\n        nodelinkdata: {},\n        svgWidth: 0,  // 页面的宽度\n        svgHeight: 0,   // 页面高度\n        velocityDecay: 0.6,\n        thumbnailWidth: 0, // 缩略图宽度\n        thumbnailHeight: 0, // 缩略图高度\n      };\n    },\n    mounted() {\n      this.getViewSize();\n      this.nodelinkdata = this.$store.state.dataNodeLink;\n      console.log(\"请输出 link data 来看一下连接线的 data\",this.nodelinkdata);\n      this.initGraph(this.nodelinkdata);\n    },\n    methods: {\n      getViewSize() {\n        const dag = this.$refs.dag;\n        this.svgHeight = dag.clientHeight;\n        this.svgWidth = dag.clientWidth;\n        this.thumbnailWidth = this.svgWidth / 5;  // 缩略图宽度和高度分别为整个svg 的1/5\n        this.thumbnailHeight = this.svgHeight / 5;\n        if (this.nodelinkdata.nodes) {\n          this.initGraph(this.nodelinkdata);\n          this.initThumbnail();\n        }\n      },\n      async convertToImage(event, node) {\n        const res = await api.getImageUrl({ \"datasetName\": this.$store.state.datasetName, \"nodeId\": node.id });\n        const imageUrl = res[\"data\"][\"imageUrl\"];\n        const targetElement = d3.select(event.target);\n        const targetBBox = targetElement.node().getBBox();\n        const targetWidth = targetBBox.width;\n        const targetHeight = targetBBox.height;\n        const patternId = `pattern-${node.id}`;\n        let pattern = d3.select(`#${patternId}`);\n        if (pattern.empty()) {\n          const svg = d3.select(`#node-class`);\n          let defs = svg.select(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          if (defs.empty()) {\n            defs = svg.append(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          }\n          const pattern = defs.append(\"pattern\")\n            .attr(\"id\", patternId)\n            .attr(\"patternUnits\", \"objectBoundingBox\")\n            .attr(\"width\", 1) // 宽度为 1 表示相对于目标元素的宽度\n            .attr(\"height\", 1) // 高度为 1 表示相对于目标元素的高度\n            .attr(\"patternTransform\", \"translate(1, 1)\"); // 向右和向下移动 10 个单位\n  \n          const image = pattern.append(\"image\")\n            .attr(\"xlink:href\", imageUrl)\n            .attr(\"width\", 58)\n            .attr(\"height\", 58)\n            .attr(\"preserveAspectRatio\", \"xMidYMid slice\");\n        }\n        targetElement\n          .attr(\"r\", 30)\n          .attr(\"fill\", `url(#pattern-${node.id})`)\n          .attr(\"stroke\", \"#000\") // 设置边框颜色\n          .attr(\"stroke-width\", 2); // 设置边框宽度;\n  \n      },\n      initThumbnail() {\n        const thumbnail = d3.select(this.$refs.thumbnail);\n        thumbnail\n          .attr(\"width\", this.thumbnailWidth)\n          .attr(\"height\", this.thumbnailHeight)\n          .attr(\"viewBox\", `0 0 ${this.svgWidth} ${this.svgHeight}`)\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"position: absolute; bottom: 20px; left: 20px; border: 1px solid #ccc; background: #fff;\");\n      },\n      updateThumbnail() {\n        const that = this;\n        const thumbnail = d3.select(that.$refs.thumbnail);\n        thumbnail.selectAll(\"*\").remove();\n        const container = thumbnail.append(\"g\")\n          .attr(\"transform\", `scale(${that.thumbnailWidth / that.svgWidth}, ${that.thumbnailHeight / that.svgHeight})`);\n  \n        // Clone legend and link nodes\n        const legendNode = d3.select(that.$refs.dag).select(\"g.nodes\").node().cloneNode(true);\n        const linkNode = d3.select(that.$refs.dag).select(\"g.link\").node().cloneNode(true);\n        container.append(() => legendNode);\n        container.append(() => linkNode);\n  \n      },\n  \n      initGraph(data) {\n        const that = this;\n        const width = that.svgWidth;\n        const height = that.svgHeight;\n        const recall = data[\"metric\"]['recall'];\n        const links = data.links.map(d => ({ ...d }));\n        const nodes = data.nodes.map(d => ({ ...d }));\n  \n        // 在这里获取 links value 中的最大值和最小值\n        const val = links.map(d => d.value);\n        const minVal = Math.min(...val);\n        const maxVal = Math.max(...val);\n  \n        // 定义归一化函数\n        // 定义归一化函数，确保最小值不为 0\n        const normalize = (value) => {\n          const normalizedValue = (value - minVal) / (maxVal - minVal);\n          // 将归一化值范围调整为 [a, 1]，其中 a 为略大于 0 的数值，例如 0.1\n          const a = 0.1;\n          return 10*(normalizedValue * (1 - a) + a);\n        };\n  \n        const simulation = d3.forceSimulation(nodes)\n          .force(\"link\", d3.forceLink(links).id(d => d.id))\n          // .distance(d => normalize(d.value)/100000))\n          .force(\"charge\", d3.forceManyBody().strength(-10))\n          .force(\"center\", d3.forceCenter(width / 2, height / 2).strength(0.3))\n          // .force(\"radial\", d3.forceRadial(500, width / 2, height / 2).strength(0.8))\n          // .force(\"x\", d3.forceX(width / 2).strength(0.05))\n          // .force(\"y\", d3.forceY(height / 2).strength(0.05))\n          .velocityDecay(this.velocityDecay)\n          .on(\"tick\", ticked);\n  \n        const svg = d3.select(this.$refs.dag);\n        svg.selectAll(\"*\").remove();\n  \n        svg.attr(\"viewBox\", `0 0 ${width} ${height}`)\n          .attr(\"width\", \"100%\")\n          .attr(\"height\", \"100%\")\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"max-width: 100%; height: auto;\")\n          .call(d3.zoom().scaleExtent([0.5, 8]).on(\"zoom\", zoomed));\n  \n        const colorMap = d3.scaleOrdinal()\n          .range(['#FF0000', '#A4D3EE', '#FF7F50', '#32CD32']);\n          const groupColorMap = {\n            0: \"#FF0000\",\n            1: \"#A4D3EE\",\n            2: \"#32CD32\",\n            3: \"#FF7F50\",\n          };\n  \n        const container = svg.append(\"g\");\n        const link = container.append(\"g\")\n          .attr(\"class\", \"link\")\n          .attr(\"stroke\", \"#999\")\n          .attr(\"stroke-opacity\", 0.6)\n          .selectAll(\"line\")\n          .data(links)\n          .join(\"line\")\n          .attr(\"stroke-width\", d => Math.sqrt(normalize(d.value)))\n          .attr(\"marker-end\", \"url(#arrowhead)\")\n          .attr(\"fill\", d => groupColorMap[d.group]);\n  \n        const border = container.append(\"g\")\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 20;\n            } else if (v.group === 3) {\n              return 15;\n            } else if (v.group === 2) {\n              return 15;\n            } else {\n              return 12.5;\n            }\n          })\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"none\")\n          .attr(\"stroke-width\", 2);\n  \n        const node = container.append(\"g\")\n          .attr(\"class\", \"nodes\")\n          .attr(\"id\", `node-class`)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"stroke-width\", 0.2)\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 18;\n            } else if (v.group === 3) {\n              return 13;\n            } else if (v.group === 2) {\n              return 13;\n            } else {\n              return 10.5;\n            }\n          })\n          .attr(\"fill\", d => groupColorMap[d.group])\n          .call(d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n  \n        const labels = container.append(\"g\")\n          .attr(\"class\", \"labels\")\n          .selectAll(\"text\")\n          .data(nodes)\n          .join(\"text\")\n          .attr(\"dx\", 6)\n          .attr(\"dy\", \".35em\")\n          .style(\"font-size\", \"12px\")  // 设置字体大小\n          .attr(\"stroke\", \"white\")\n          .attr(\"paint-order\", \"stroke\")\n          .text(d => {\n            if (d.group === 2 || d.group === 3) {\n              return `${d.id}`;\n            } else {\n              return \"\";\n            }\n          });\n  \n        node.on(\"mouseover\", function (event, d) {\n          border.attr(\"stroke\", (b) => b.id === d.id ? \"#6096E6\" : \"none\");\n        })\n          .on(\"mouseout\", function (event, d) {\n            border.attr(\"stroke\", \"none\");\n          });\n  \n        node.on(\"click\", function (event, d) {\n          const existingBox = document.querySelector('.option-box');\n          if (existingBox) {\n            if (parseInt(existingBox.dataset.nodeId) === parseInt(d.id)) {\n              existingBox.remove();\n              return;\n            }\n            existingBox.remove();\n          }\n          const options = d3.select(\"body\").append(\"div\")\n            .attr(\"class\", \"option-box\")\n            .attr(\"data-node-id\", d.id)\n            .style(\"position\", \"absolute\")\n            .style(\"left\", `${event.pageX + 10}px`)\n            .style(\"top\", `${event.pageY + 10}px`)\n            .style(\"display\", \"flex\")\n            .style(\"gap\", \"8px\")\n            .style(\"border\", \"1px solid #7F7F7F\")\n            .style(\"background-color\", \"#F7F7F7\")\n            .style(\"width\", \"86px\")\n            .style(\"height\", \"25px\")\n            .style(\"padding\", \"2.5px 0\")\n            .style(\"padding-left\", \"8px\")\n            .style(\"border-radius\", \"8px\")\n            .style(\"align-items\", \"center\")\n            .style(\"z-index\", 1000);\n          options.append(\"div\")\n            .text(\"+\")\n            .style(\"font-size\", \"20px\")\n            .style(\"color\", \"#679D43\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .on(\"click\", () => console.log(\"Plus clicked\", d));\n          options.append(\"div\")\n            .text(\"-\")\n            .text(\"-\")\n            .style(\"font-size\", \"20px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => console.log(\"Minus clicked\"));\n          options.append(\"div\")\n            .text(\"A\")\n            .style(\"font-size\", \"14px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => that.convertToImage(event, d));\n  \n          d3.select(\"body\").on(\"click\", function (event) {\n            if (!event.target.closest('.option-box') && !event.target.closest('circle')) {\n              d3.selectAll('.option-box').remove();\n            }\n          });\n  \n          event.stopPropagation();\n        });\n  \n        node.append(\"title\")\n          .text(d => `ID: ${d.id}, Distance: ${d.distance}`);\n  \n        svg.append(\"text\")\n          .attr(\"transform\", `translate(60, 50)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 15)\n          .text(`Recall: ${recall}`);\n  \n        const legend = svg.append(\"g\")\n          .attr(\"transform\", `translate(60, 60)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 10);\n  \n        const uniqueGroups = [...new Set(nodes.map(d => d.group))];\n        const legendItems = legend.selectAll(\"g\")\n          .data(uniqueGroups)\n          .enter().append(\"g\")\n          .attr(\"transform\", (d, i) => `translate(0,${i * 20})`);\n        legendItems.append(\"rect\")\n          .attr(\"width\", 18)\n          .attr(\"height\", 18)\n          .attr(\"fill\", d => groupColorMap[d]);\n  \n        legendItems.append(\"text\")\n          .attr(\"x\", 24)\n          .attr(\"y\", 9)\n          .attr(\"dy\", \"0.35em\")\n          .text(d => {\n                if (d === 0) {\n                  return \"start node\";\n                } else if (d === 1) {\n                  return \"normal node\";\n                } else if (d === 2) {\n                  return \"gt&search intersection\";\n                } else if (d === 3) {\n                  return \"search other\";\n                }\n              });\n  \n        function ticked() {\n          link\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y);\n          node\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n          border\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n  \n          labels\n            .attr(\"x\", d => d.x + 2)\n            .attr(\"y\", d => d.y + 0.35); // 这里设置文本的位置\n  \n          that.updateThumbnail();\n        }\n  \n        function dragstarted(event) {\n          if (!event.active) simulation.alphaTarget(0.2).restart();\n          event.subject.fx = event.subject.x;\n          event.subject.fy = event.subject.y;\n        }\n  \n        function dragged(event) {\n          event.subject.fx = event.x;\n          event.subject.fy = event.y;\n        }\n  \n        function dragended(event) {\n          if (!event.active) simulation.alphaTarget(0);\n          event.subject.fx = null;\n          event.subject.fy = null;\n        }\n  \n        function zoomed(event) {\n          container.attr(\"transform\", event.transform);\n          that.updateThumbnail();\n        }\n  \n      },\n    },\n    computed: {\n      ...mapState({\n        dataNodelink: \"dataNodeLink\",\n        retrievalSet: \"retrievalSet\",\n        datasetName: \"datasetName\",\n        modelName: \"modelName\",\n        retrievalInfo: \"retrievalInfo\",\n        isDone: \"isDone\"\n      }),\n    },\n    watch: {\n  \n      // dataNodelink(newVal, oldVal) {\n      //   console.log(\"可以实现更新\",newVal);\n      //   if (newVal !== oldVal) {\n  \n      //   }\n      // }\n  \n    }\n  };\n  </script>\n  \n  <style scoped lang=\"scss\">\n  .node-link-main {\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n    position: relative;\n  \n    .dag-svg {\n      height: 100%;\n      width: 100%;\n    }\n  \n    .thumbnail-svg {\n      position: absolute;\n      bottom: 20px;\n      left: 20px;\n      border: 1px solid #ccc;\n      background: #fff;\n    }\n  }\n  \n  .option-box {\n    border: 1px solid #F7F7F7;\n    background-color: #F7F7F7;\n    padding: 5px;\n    position: absolute;\n    z-index: 1000;\n  \n    div {\n      margin: 2px 0;\n      cursor: pointer;\n    }\n  \n    div:hover {\n      background-color: #f0f0f0;\n    }\n  }\n  \n  .option-button {\n    padding: 5px 10px;\n    border: 1px solid #000;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: #f0f0f0;\n    font-size: 14px;\n    font-family: Arial, sans-serif;\n    color: red;\n  }\n  \n  .option-button:hover {\n    background-color: #e0e0e0;\n  }\n  </style><template>\n    <div class=\"node-link-main\">\n      <svg ref=\"dag\" class=\"dag-svg\"></svg>\n      <svg ref=\"thumbnail\" class=\"thumbnail-svg\"></svg>\n    </div>\n  </template>\n  \n  <script>\n  import * as d3 from \"d3\";\n  import { mapState } from \"vuex\";\n  import api from \"@/api/data\";\n  \n  export default {\n    name: \"NodeLinkView\",\n    components: {},\n    data() {\n      return {\n        nodelinkdata: {},\n        svgWidth: 0,  // 页面的宽度\n        svgHeight: 0,   // 页面高度\n        velocityDecay: 0.6,\n        thumbnailWidth: 0, // 缩略图宽度\n        thumbnailHeight: 0, // 缩略图高度\n      };\n    },\n    mounted() {\n      this.getViewSize();\n      this.nodelinkdata = this.$store.state.dataNodeLink;\n      console.log(\"请输出 link data 来看一下连接线的 data\",this.nodelinkdata);\n      this.initGraph(this.nodelinkdata);\n    },\n    methods: {\n      getViewSize() {\n        const dag = this.$refs.dag;\n        this.svgHeight = dag.clientHeight;\n        this.svgWidth = dag.clientWidth;\n        this.thumbnailWidth = this.svgWidth / 5;  // 缩略图宽度和高度分别为整个svg 的1/5\n        this.thumbnailHeight = this.svgHeight / 5;\n        if (this.nodelinkdata.nodes) {\n          this.initGraph(this.nodelinkdata);\n          this.initThumbnail();\n        }\n      },\n      async convertToImage(event, node) {\n        const res = await api.getImageUrl({ \"datasetName\": this.$store.state.datasetName, \"nodeId\": node.id });\n        const imageUrl = res[\"data\"][\"imageUrl\"];\n        const targetElement = d3.select(event.target);\n        const targetBBox = targetElement.node().getBBox();\n        const targetWidth = targetBBox.width;\n        const targetHeight = targetBBox.height;\n        const patternId = `pattern-${node.id}`;\n        let pattern = d3.select(`#${patternId}`);\n        if (pattern.empty()) {\n          const svg = d3.select(`#node-class`);\n          let defs = svg.select(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          if (defs.empty()) {\n            defs = svg.append(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          }\n          const pattern = defs.append(\"pattern\")\n            .attr(\"id\", patternId)\n            .attr(\"patternUnits\", \"objectBoundingBox\")\n            .attr(\"width\", 1) // 宽度为 1 表示相对于目标元素的宽度\n            .attr(\"height\", 1) // 高度为 1 表示相对于目标元素的高度\n            .attr(\"patternTransform\", \"translate(1, 1)\"); // 向右和向下移动 10 个单位\n  \n          const image = pattern.append(\"image\")\n            .attr(\"xlink:href\", imageUrl)\n            .attr(\"width\", 58)\n            .attr(\"height\", 58)\n            .attr(\"preserveAspectRatio\", \"xMidYMid slice\");\n        }\n        targetElement\n          .attr(\"r\", 30)\n          .attr(\"fill\", `url(#pattern-${node.id})`)\n          .attr(\"stroke\", \"#000\") // 设置边框颜色\n          .attr(\"stroke-width\", 2); // 设置边框宽度;\n  \n      },\n      initThumbnail() {\n        const thumbnail = d3.select(this.$refs.thumbnail);\n        thumbnail\n          .attr(\"width\", this.thumbnailWidth)\n          .attr(\"height\", this.thumbnailHeight)\n          .attr(\"viewBox\", `0 0 ${this.svgWidth} ${this.svgHeight}`)\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"position: absolute; bottom: 20px; left: 20px; border: 1px solid #ccc; background: #fff;\");\n      },\n      updateThumbnail() {\n        const that = this;\n        const thumbnail = d3.select(that.$refs.thumbnail);\n        thumbnail.selectAll(\"*\").remove();\n        const container = thumbnail.append(\"g\")\n          .attr(\"transform\", `scale(${that.thumbnailWidth / that.svgWidth}, ${that.thumbnailHeight / that.svgHeight})`);\n  \n        // Clone legend and link nodes\n        const legendNode = d3.select(that.$refs.dag).select(\"g.nodes\").node().cloneNode(true);\n        const linkNode = d3.select(that.$refs.dag).select(\"g.link\").node().cloneNode(true);\n        container.append(() => legendNode);\n        container.append(() => linkNode);\n  \n      },\n  \n      initGraph(data) {\n        const that = this;\n        const width = that.svgWidth;\n        const height = that.svgHeight;\n        const recall = data[\"metric\"]['recall'];\n        const links = data.links.map(d => ({ ...d }));\n        const nodes = data.nodes.map(d => ({ ...d }));\n  \n        // 在这里获取 links value 中的最大值和最小值\n        const val = links.map(d => d.value);\n        const minVal = Math.min(...val);\n        const maxVal = Math.max(...val);\n  \n        // 定义归一化函数\n        // 定义归一化函数，确保最小值不为 0\n        const normalize = (value) => {\n          const normalizedValue = (value - minVal) / (maxVal - minVal);\n          // 将归一化值范围调整为 [a, 1]，其中 a 为略大于 0 的数值，例如 0.1\n          const a = 0.1;\n          return 10*(normalizedValue * (1 - a) + a);\n        };\n  \n        const simulation = d3.forceSimulation(nodes)\n          .force(\"link\", d3.forceLink(links).id(d => d.id))\n          // .distance(d => normalize(d.value)/100000))\n          .force(\"charge\", d3.forceManyBody().strength(-10))\n          .force(\"center\", d3.forceCenter(width / 2, height / 2).strength(0.3))\n          // .force(\"radial\", d3.forceRadial(500, width / 2, height / 2).strength(0.8))\n          // .force(\"x\", d3.forceX(width / 2).strength(0.05))\n          // .force(\"y\", d3.forceY(height / 2).strength(0.05))\n          .velocityDecay(this.velocityDecay)\n          .on(\"tick\", ticked);\n  \n        const svg = d3.select(this.$refs.dag);\n        svg.selectAll(\"*\").remove();\n  \n        svg.attr(\"viewBox\", `0 0 ${width} ${height}`)\n          .attr(\"width\", \"100%\")\n          .attr(\"height\", \"100%\")\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"max-width: 100%; height: auto;\")\n          .call(d3.zoom().scaleExtent([0.5, 8]).on(\"zoom\", zoomed));\n  \n        const colorMap = d3.scaleOrdinal()\n          .range(['#FF0000', '#A4D3EE', '#FF7F50', '#32CD32']);\n          const groupColorMap = {\n            0: \"#FF0000\",\n            1: \"#A4D3EE\",\n            2: \"#32CD32\",\n            3: \"#FF7F50\",\n          };\n  \n        const container = svg.append(\"g\");\n        const link = container.append(\"g\")\n          .attr(\"class\", \"link\")\n          .attr(\"stroke\", \"#999\")\n          .attr(\"stroke-opacity\", 0.6)\n          .selectAll(\"line\")\n          .data(links)\n          .join(\"line\")\n          .attr(\"stroke-width\", d => Math.sqrt(normalize(d.value)))\n          .attr(\"marker-end\", \"url(#arrowhead)\")\n          .attr(\"fill\", d => groupColorMap[d.group]);\n  \n        const border = container.append(\"g\")\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 20;\n            } else if (v.group === 3) {\n              return 15;\n            } else if (v.group === 2) {\n              return 15;\n            } else {\n              return 12.5;\n            }\n          })\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"none\")\n          .attr(\"stroke-width\", 2);\n  \n        const node = container.append(\"g\")\n          .attr(\"class\", \"nodes\")\n          .attr(\"id\", `node-class`)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"stroke-width\", 0.2)\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 18;\n            } else if (v.group === 3) {\n              return 13;\n            } else if (v.group === 2) {\n              return 13;\n            } else {\n              return 10.5;\n            }\n          })\n          .attr(\"fill\", d => groupColorMap[d.group])\n          .call(d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n  \n        const labels = container.append(\"g\")\n          .attr(\"class\", \"labels\")\n          .selectAll(\"text\")\n          .data(nodes)\n          .join(\"text\")\n          .attr(\"dx\", 6)\n          .attr(\"dy\", \".35em\")\n          .style(\"font-size\", \"12px\")  // 设置字体大小\n          .attr(\"stroke\", \"white\")\n          .attr(\"paint-order\", \"stroke\")\n          .text(d => {\n            if (d.group === 2 || d.group === 3) {\n              return `${d.id}`;\n            } else {\n              return \"\";\n            }\n          });\n  \n        node.on(\"mouseover\", function (event, d) {\n          border.attr(\"stroke\", (b) => b.id === d.id ? \"#6096E6\" : \"none\");\n        })\n          .on(\"mouseout\", function (event, d) {\n            border.attr(\"stroke\", \"none\");\n          });\n  \n        node.on(\"click\", function (event, d) {\n          const existingBox = document.querySelector('.option-box');\n          if (existingBox) {\n            if (parseInt(existingBox.dataset.nodeId) === parseInt(d.id)) {\n              existingBox.remove();\n              return;\n            }\n            existingBox.remove();\n          }\n          const options = d3.select(\"body\").append(\"div\")\n            .attr(\"class\", \"option-box\")\n            .attr(\"data-node-id\", d.id)\n            .style(\"position\", \"absolute\")\n            .style(\"left\", `${event.pageX + 10}px`)\n            .style(\"top\", `${event.pageY + 10}px`)\n            .style(\"display\", \"flex\")\n            .style(\"gap\", \"8px\")\n            .style(\"border\", \"1px solid #7F7F7F\")\n            .style(\"background-color\", \"#F7F7F7\")\n            .style(\"width\", \"86px\")\n            .style(\"height\", \"25px\")\n            .style(\"padding\", \"2.5px 0\")\n            .style(\"padding-left\", \"8px\")\n            .style(\"border-radius\", \"8px\")\n            .style(\"align-items\", \"center\")\n            .style(\"z-index\", 1000);\n          options.append(\"div\")\n            .text(\"+\")\n            .style(\"font-size\", \"20px\")\n            .style(\"color\", \"#679D43\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .on(\"click\", () => console.log(\"Plus clicked\", d));\n          options.append(\"div\")\n            .text(\"-\")\n            .text(\"-\")\n            .style(\"font-size\", \"20px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => console.log(\"Minus clicked\"));\n          options.append(\"div\")\n            .text(\"A\")\n            .style(\"font-size\", \"14px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => that.convertToImage(event, d));\n  \n          d3.select(\"body\").on(\"click\", function (event) {\n            if (!event.target.closest('.option-box') && !event.target.closest('circle')) {\n              d3.selectAll('.option-box').remove();\n            }\n          });\n  \n          event.stopPropagation();\n        });\n  \n        node.append(\"title\")\n          .text(d => `ID: ${d.id}, Distance: ${d.distance}`);\n  \n        svg.append(\"text\")\n          .attr(\"transform\", `translate(60, 50)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 15)\n          .text(`Recall: ${recall}`);\n  \n        const legend = svg.append(\"g\")\n          .attr(\"transform\", `translate(60, 60)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 10);\n  \n        const uniqueGroups = [...new Set(nodes.map(d => d.group))];\n        const legendItems = legend.selectAll(\"g\")\n          .data(uniqueGroups)\n          .enter().append(\"g\")\n          .attr(\"transform\", (d, i) => `translate(0,${i * 20})`);\n        legendItems.append(\"rect\")\n          .attr(\"width\", 18)\n          .attr(\"height\", 18)\n          .attr(\"fill\", d => groupColorMap[d]);\n  \n        legendItems.append(\"text\")\n          .attr(\"x\", 24)\n          .attr(\"y\", 9)\n          .attr(\"dy\", \"0.35em\")\n          .text(d => {\n                if (d === 0) {\n                  return \"start node\";\n                } else if (d === 1) {\n                  return \"normal node\";\n                } else if (d === 2) {\n                  return \"gt&search intersection\";\n                } else if (d === 3) {\n                  return \"search other\";\n                }\n              });\n  \n        function ticked() {\n          link\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y);\n          node\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n          border\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n  \n          labels\n            .attr(\"x\", d => d.x + 2)\n            .attr(\"y\", d => d.y + 0.35); // 这里设置文本的位置\n  \n          that.updateThumbnail();\n        }\n  \n        function dragstarted(event) {\n          if (!event.active) simulation.alphaTarget(0.2).restart();\n          event.subject.fx = event.subject.x;\n          event.subject.fy = event.subject.y;\n        }\n  \n        function dragged(event) {\n          event.subject.fx = event.x;\n          event.subject.fy = event.y;\n        }\n  \n        function dragended(event) {\n          if (!event.active) simulation.alphaTarget(0);\n          event.subject.fx = null;\n          event.subject.fy = null;\n        }\n  \n        function zoomed(event) {\n          container.attr(\"transform\", event.transform);\n          that.updateThumbnail();\n        }\n  \n      },\n    },\n    computed: {\n      ...mapState({\n        dataNodelink: \"dataNodeLink\",\n        retrievalSet: \"retrievalSet\",\n        datasetName: \"datasetName\",\n        modelName: \"modelName\",\n        retrievalInfo: \"retrievalInfo\",\n        isDone: \"isDone\"\n      }),\n    },\n    watch: {\n  \n      // dataNodelink(newVal, oldVal) {\n      //   console.log(\"可以实现更新\",newVal);\n      //   if (newVal !== oldVal) {\n  \n      //   }\n      // }\n  \n    }\n  };\n  </script>\n  \n  <style scoped lang=\"scss\">\n  .node-link-main {\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n    position: relative;\n  \n    .dag-svg {\n      height: 100%;\n      width: 100%;\n    }\n  \n    .thumbnail-svg {\n      position: absolute;\n      bottom: 20px;\n      left: 20px;\n      border: 1px solid #ccc;\n      background: #fff;\n    }\n  }\n  \n  .option-box {\n    border: 1px solid #F7F7F7;\n    background-color: #F7F7F7;\n    padding: 5px;\n    position: absolute;\n    z-index: 1000;\n  \n    div {\n      margin: 2px 0;\n      cursor: pointer;\n    }\n  \n    div:hover {\n      background-color: #f0f0f0;\n    }\n  }\n  \n  .option-button {\n    padding: 5px 10px;\n    border: 1px solid #000;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: #f0f0f0;\n    font-size: 14px;\n    font-family: Arial, sans-serif;\n    color: red;\n  }\n  \n  .option-button:hover {\n    background-color: #e0e0e0;\n  }\n  </style><template>\n    <div class=\"node-link-main\">\n      <svg ref=\"dag\" class=\"dag-svg\"></svg>\n      <svg ref=\"thumbnail\" class=\"thumbnail-svg\"></svg>\n    </div>\n  </template>\n  \n  <script>\n  import * as d3 from \"d3\";\n  import { mapState } from \"vuex\";\n  import api from \"@/api/data\";\n  \n  export default {\n    name: \"NodeLinkView\",\n    components: {},\n    data() {\n      return {\n        nodelinkdata: {},\n        svgWidth: 0,  // 页面的宽度\n        svgHeight: 0,   // 页面高度\n        velocityDecay: 0.6,\n        thumbnailWidth: 0, // 缩略图宽度\n        thumbnailHeight: 0, // 缩略图高度\n      };\n    },\n    mounted() {\n      this.getViewSize();\n      this.nodelinkdata = this.$store.state.dataNodeLink;\n      console.log(\"请输出 link data 来看一下连接线的 data\",this.nodelinkdata);\n      this.initGraph(this.nodelinkdata);\n    },\n    methods: {\n      getViewSize() {\n        const dag = this.$refs.dag;\n        this.svgHeight = dag.clientHeight;\n        this.svgWidth = dag.clientWidth;\n        this.thumbnailWidth = this.svgWidth / 5;  // 缩略图宽度和高度分别为整个svg 的1/5\n        this.thumbnailHeight = this.svgHeight / 5;\n        if (this.nodelinkdata.nodes) {\n          this.initGraph(this.nodelinkdata);\n          this.initThumbnail();\n        }\n      },\n      async convertToImage(event, node) {\n        const res = await api.getImageUrl({ \"datasetName\": this.$store.state.datasetName, \"nodeId\": node.id });\n        const imageUrl = res[\"data\"][\"imageUrl\"];\n        const targetElement = d3.select(event.target);\n        const targetBBox = targetElement.node().getBBox();\n        const targetWidth = targetBBox.width;\n        const targetHeight = targetBBox.height;\n        const patternId = `pattern-${node.id}`;\n        let pattern = d3.select(`#${patternId}`);\n        if (pattern.empty()) {\n          const svg = d3.select(`#node-class`);\n          let defs = svg.select(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          if (defs.empty()) {\n            defs = svg.append(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          }\n          const pattern = defs.append(\"pattern\")\n            .attr(\"id\", patternId)\n            .attr(\"patternUnits\", \"objectBoundingBox\")\n            .attr(\"width\", 1) // 宽度为 1 表示相对于目标元素的宽度\n            .attr(\"height\", 1) // 高度为 1 表示相对于目标元素的高度\n            .attr(\"patternTransform\", \"translate(1, 1)\"); // 向右和向下移动 10 个单位\n  \n          const image = pattern.append(\"image\")\n            .attr(\"xlink:href\", imageUrl)\n            .attr(\"width\", 58)\n            .attr(\"height\", 58)\n            .attr(\"preserveAspectRatio\", \"xMidYMid slice\");\n        }\n        targetElement\n          .attr(\"r\", 30)\n          .attr(\"fill\", `url(#pattern-${node.id})`)\n          .attr(\"stroke\", \"#000\") // 设置边框颜色\n          .attr(\"stroke-width\", 2); // 设置边框宽度;\n  \n      },\n      initThumbnail() {\n        const thumbnail = d3.select(this.$refs.thumbnail);\n        thumbnail\n          .attr(\"width\", this.thumbnailWidth)\n          .attr(\"height\", this.thumbnailHeight)\n          .attr(\"viewBox\", `0 0 ${this.svgWidth} ${this.svgHeight}`)\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"position: absolute; bottom: 20px; left: 20px; border: 1px solid #ccc; background: #fff;\");\n      },\n      updateThumbnail() {\n        const that = this;\n        const thumbnail = d3.select(that.$refs.thumbnail);\n        thumbnail.selectAll(\"*\").remove();\n        const container = thumbnail.append(\"g\")\n          .attr(\"transform\", `scale(${that.thumbnailWidth / that.svgWidth}, ${that.thumbnailHeight / that.svgHeight})`);\n  \n        // Clone legend and link nodes\n        const legendNode = d3.select(that.$refs.dag).select(\"g.nodes\").node().cloneNode(true);\n        const linkNode = d3.select(that.$refs.dag).select(\"g.link\").node().cloneNode(true);\n        container.append(() => legendNode);\n        container.append(() => linkNode);\n  \n      },\n  \n      initGraph(data) {\n        const that = this;\n        const width = that.svgWidth;\n        const height = that.svgHeight;\n        const recall = data[\"metric\"]['recall'];\n        const links = data.links.map(d => ({ ...d }));\n        const nodes = data.nodes.map(d => ({ ...d }));\n  \n        // 在这里获取 links value 中的最大值和最小值\n        const val = links.map(d => d.value);\n        const minVal = Math.min(...val);\n        const maxVal = Math.max(...val);\n  \n        // 定义归一化函数\n        // 定义归一化函数，确保最小值不为 0\n        const normalize = (value) => {\n          const normalizedValue = (value - minVal) / (maxVal - minVal);\n          // 将归一化值范围调整为 [a, 1]，其中 a 为略大于 0 的数值，例如 0.1\n          const a = 0.1;\n          return 10*(normalizedValue * (1 - a) + a);\n        };\n  \n        const simulation = d3.forceSimulation(nodes)\n          .force(\"link\", d3.forceLink(links).id(d => d.id))\n          // .distance(d => normalize(d.value)/100000))\n          .force(\"charge\", d3.forceManyBody().strength(-10))\n          .force(\"center\", d3.forceCenter(width / 2, height / 2).strength(0.3))\n          // .force(\"radial\", d3.forceRadial(500, width / 2, height / 2).strength(0.8))\n          // .force(\"x\", d3.forceX(width / 2).strength(0.05))\n          // .force(\"y\", d3.forceY(height / 2).strength(0.05))\n          .velocityDecay(this.velocityDecay)\n          .on(\"tick\", ticked);\n  \n        const svg = d3.select(this.$refs.dag);\n        svg.selectAll(\"*\").remove();\n  \n        svg.attr(\"viewBox\", `0 0 ${width} ${height}`)\n          .attr(\"width\", \"100%\")\n          .attr(\"height\", \"100%\")\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"max-width: 100%; height: auto;\")\n          .call(d3.zoom().scaleExtent([0.5, 8]).on(\"zoom\", zoomed));\n  \n        const colorMap = d3.scaleOrdinal()\n          .range(['#FF0000', '#A4D3EE', '#FF7F50', '#32CD32']);\n          const groupColorMap = {\n            0: \"#FF0000\",\n            1: \"#A4D3EE\",\n            2: \"#32CD32\",\n            3: \"#FF7F50\",\n          };\n  \n        const container = svg.append(\"g\");\n        const link = container.append(\"g\")\n          .attr(\"class\", \"link\")\n          .attr(\"stroke\", \"#999\")\n          .attr(\"stroke-opacity\", 0.6)\n          .selectAll(\"line\")\n          .data(links)\n          .join(\"line\")\n          .attr(\"stroke-width\", d => Math.sqrt(normalize(d.value)))\n          .attr(\"marker-end\", \"url(#arrowhead)\")\n          .attr(\"fill\", d => groupColorMap[d.group]);\n  \n        const border = container.append(\"g\")\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 20;\n            } else if (v.group === 3) {\n              return 15;\n            } else if (v.group === 2) {\n              return 15;\n            } else {\n              return 12.5;\n            }\n          })\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"none\")\n          .attr(\"stroke-width\", 2);\n  \n        const node = container.append(\"g\")\n          .attr(\"class\", \"nodes\")\n          .attr(\"id\", `node-class`)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"stroke-width\", 0.2)\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 18;\n            } else if (v.group === 3) {\n              return 13;\n            } else if (v.group === 2) {\n              return 13;\n            } else {\n              return 10.5;\n            }\n          })\n          .attr(\"fill\", d => groupColorMap[d.group])\n          .call(d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n  \n        const labels = container.append(\"g\")\n          .attr(\"class\", \"labels\")\n          .selectAll(\"text\")\n          .data(nodes)\n          .join(\"text\")\n          .attr(\"dx\", 6)\n          .attr(\"dy\", \".35em\")\n          .style(\"font-size\", \"12px\")  // 设置字体大小\n          .attr(\"stroke\", \"white\")\n          .attr(\"paint-order\", \"stroke\")\n          .text(d => {\n            if (d.group === 2 || d.group === 3) {\n              return `${d.id}`;\n            } else {\n              return \"\";\n            }\n          });\n  \n        node.on(\"mouseover\", function (event, d) {\n          border.attr(\"stroke\", (b) => b.id === d.id ? \"#6096E6\" : \"none\");\n        })\n          .on(\"mouseout\", function (event, d) {\n            border.attr(\"stroke\", \"none\");\n          });\n  \n        node.on(\"click\", function (event, d) {\n          const existingBox = document.querySelector('.option-box');\n          if (existingBox) {\n            if (parseInt(existingBox.dataset.nodeId) === parseInt(d.id)) {\n              existingBox.remove();\n              return;\n            }\n            existingBox.remove();\n          }\n          const options = d3.select(\"body\").append(\"div\")\n            .attr(\"class\", \"option-box\")\n            .attr(\"data-node-id\", d.id)\n            .style(\"position\", \"absolute\")\n            .style(\"left\", `${event.pageX + 10}px`)\n            .style(\"top\", `${event.pageY + 10}px`)\n            .style(\"display\", \"flex\")\n            .style(\"gap\", \"8px\")\n            .style(\"border\", \"1px solid #7F7F7F\")\n            .style(\"background-color\", \"#F7F7F7\")\n            .style(\"width\", \"86px\")\n            .style(\"height\", \"25px\")\n            .style(\"padding\", \"2.5px 0\")\n            .style(\"padding-left\", \"8px\")\n            .style(\"border-radius\", \"8px\")\n            .style(\"align-items\", \"center\")\n            .style(\"z-index\", 1000);\n          options.append(\"div\")\n            .text(\"+\")\n            .style(\"font-size\", \"20px\")\n            .style(\"color\", \"#679D43\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .on(\"click\", () => console.log(\"Plus clicked\", d));\n          options.append(\"div\")\n            .text(\"-\")\n            .text(\"-\")\n            .style(\"font-size\", \"20px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => console.log(\"Minus clicked\"));\n          options.append(\"div\")\n            .text(\"A\")\n            .style(\"font-size\", \"14px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => that.convertToImage(event, d));\n  \n          d3.select(\"body\").on(\"click\", function (event) {\n            if (!event.target.closest('.option-box') && !event.target.closest('circle')) {\n              d3.selectAll('.option-box').remove();\n            }\n          });\n  \n          event.stopPropagation();\n        });\n  \n        node.append(\"title\")\n          .text(d => `ID: ${d.id}, Distance: ${d.distance}`);\n  \n        svg.append(\"text\")\n          .attr(\"transform\", `translate(60, 50)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 15)\n          .text(`Recall: ${recall}`);\n  \n        const legend = svg.append(\"g\")\n          .attr(\"transform\", `translate(60, 60)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 10);\n  \n        const uniqueGroups = [...new Set(nodes.map(d => d.group))];\n        const legendItems = legend.selectAll(\"g\")\n          .data(uniqueGroups)\n          .enter().append(\"g\")\n          .attr(\"transform\", (d, i) => `translate(0,${i * 20})`);\n        legendItems.append(\"rect\")\n          .attr(\"width\", 18)\n          .attr(\"height\", 18)\n          .attr(\"fill\", d => groupColorMap[d]);\n  \n        legendItems.append(\"text\")\n          .attr(\"x\", 24)\n          .attr(\"y\", 9)\n          .attr(\"dy\", \"0.35em\")\n          .text(d => {\n                if (d === 0) {\n                  return \"start node\";\n                } else if (d === 1) {\n                  return \"normal node\";\n                } else if (d === 2) {\n                  return \"gt&search intersection\";\n                } else if (d === 3) {\n                  return \"search other\";\n                }\n              });\n  \n        function ticked() {\n          link\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y);\n          node\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n          border\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n  \n          labels\n            .attr(\"x\", d => d.x + 2)\n            .attr(\"y\", d => d.y + 0.35); // 这里设置文本的位置\n  \n          that.updateThumbnail();\n        }\n  \n        function dragstarted(event) {\n          if (!event.active) simulation.alphaTarget(0.2).restart();\n          event.subject.fx = event.subject.x;\n          event.subject.fy = event.subject.y;\n        }\n  \n        function dragged(event) {\n          event.subject.fx = event.x;\n          event.subject.fy = event.y;\n        }\n  \n        function dragended(event) {\n          if (!event.active) simulation.alphaTarget(0);\n          event.subject.fx = null;\n          event.subject.fy = null;\n        }\n  \n        function zoomed(event) {\n          container.attr(\"transform\", event.transform);\n          that.updateThumbnail();\n        }\n  \n      },\n    },\n    computed: {\n      ...mapState({\n        dataNodelink: \"dataNodeLink\",\n        retrievalSet: \"retrievalSet\",\n        datasetName: \"datasetName\",\n        modelName: \"modelName\",\n        retrievalInfo: \"retrievalInfo\",\n        isDone: \"isDone\"\n      }),\n    },\n    watch: {\n  \n      // dataNodelink(newVal, oldVal) {\n      //   console.log(\"可以实现更新\",newVal);\n      //   if (newVal !== oldVal) {\n  \n      //   }\n      // }\n  \n    }\n  };\n  </script>\n  \n  <style scoped lang=\"scss\">\n  .node-link-main {\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n    position: relative;\n  \n    .dag-svg {\n      height: 100%;\n      width: 100%;\n    }\n  \n    .thumbnail-svg {\n      position: absolute;\n      bottom: 20px;\n      left: 20px;\n      border: 1px solid #ccc;\n      background: #fff;\n    }\n  }\n  \n  .option-box {\n    border: 1px solid #F7F7F7;\n    background-color: #F7F7F7;\n    padding: 5px;\n    position: absolute;\n    z-index: 1000;\n  \n    div {\n      margin: 2px 0;\n      cursor: pointer;\n    }\n  \n    div:hover {\n      background-color: #f0f0f0;\n    }\n  }\n  \n  .option-button {\n    padding: 5px 10px;\n    border: 1px solid #000;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: #f0f0f0;\n    font-size: 14px;\n    font-family: Arial, sans-serif;\n    color: red;\n  }\n  \n  .option-button:hover {\n    background-color: #e0e0e0;\n  }\n  </style><template>\n    <div class=\"node-link-main\">\n      <svg ref=\"dag\" class=\"dag-svg\"></svg>\n      <svg ref=\"thumbnail\" class=\"thumbnail-svg\"></svg>\n    </div>\n  </template>\n  \n  <script>\n  import * as d3 from \"d3\";\n  import { mapState } from \"vuex\";\n  import api from \"@/api/data\";\n  \n  export default {\n    name: \"NodeLinkView\",\n    components: {},\n    data() {\n      return {\n        nodelinkdata: {},\n        svgWidth: 0,  // 页面的宽度\n        svgHeight: 0,   // 页面高度\n        velocityDecay: 0.6,\n        thumbnailWidth: 0, // 缩略图宽度\n        thumbnailHeight: 0, // 缩略图高度\n      };\n    },\n    mounted() {\n      this.getViewSize();\n      this.nodelinkdata = this.$store.state.dataNodeLink;\n      console.log(\"请输出 link data 来看一下连接线的 data\",this.nodelinkdata);\n      this.initGraph(this.nodelinkdata);\n    },\n    methods: {\n      getViewSize() {\n        const dag = this.$refs.dag;\n        this.svgHeight = dag.clientHeight;\n        this.svgWidth = dag.clientWidth;\n        this.thumbnailWidth = this.svgWidth / 5;  // 缩略图宽度和高度分别为整个svg 的1/5\n        this.thumbnailHeight = this.svgHeight / 5;\n        if (this.nodelinkdata.nodes) {\n          this.initGraph(this.nodelinkdata);\n          this.initThumbnail();\n        }\n      },\n      async convertToImage(event, node) {\n        const res = await api.getImageUrl({ \"datasetName\": this.$store.state.datasetName, \"nodeId\": node.id });\n        const imageUrl = res[\"data\"][\"imageUrl\"];\n        const targetElement = d3.select(event.target);\n        const targetBBox = targetElement.node().getBBox();\n        const targetWidth = targetBBox.width;\n        const targetHeight = targetBBox.height;\n        const patternId = `pattern-${node.id}`;\n        let pattern = d3.select(`#${patternId}`);\n        if (pattern.empty()) {\n          const svg = d3.select(`#node-class`);\n          let defs = svg.select(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          if (defs.empty()) {\n            defs = svg.append(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          }\n          const pattern = defs.append(\"pattern\")\n            .attr(\"id\", patternId)\n            .attr(\"patternUnits\", \"objectBoundingBox\")\n            .attr(\"width\", 1) // 宽度为 1 表示相对于目标元素的宽度\n            .attr(\"height\", 1) // 高度为 1 表示相对于目标元素的高度\n            .attr(\"patternTransform\", \"translate(1, 1)\"); // 向右和向下移动 10 个单位\n  \n          const image = pattern.append(\"image\")\n            .attr(\"xlink:href\", imageUrl)\n            .attr(\"width\", 58)\n            .attr(\"height\", 58)\n            .attr(\"preserveAspectRatio\", \"xMidYMid slice\");\n        }\n        targetElement\n          .attr(\"r\", 30)\n          .attr(\"fill\", `url(#pattern-${node.id})`)\n          .attr(\"stroke\", \"#000\") // 设置边框颜色\n          .attr(\"stroke-width\", 2); // 设置边框宽度;\n  \n      },\n      initThumbnail() {\n        const thumbnail = d3.select(this.$refs.thumbnail);\n        thumbnail\n          .attr(\"width\", this.thumbnailWidth)\n          .attr(\"height\", this.thumbnailHeight)\n          .attr(\"viewBox\", `0 0 ${this.svgWidth} ${this.svgHeight}`)\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"position: absolute; bottom: 20px; left: 20px; border: 1px solid #ccc; background: #fff;\");\n      },\n      updateThumbnail() {\n        const that = this;\n        const thumbnail = d3.select(that.$refs.thumbnail);\n        thumbnail.selectAll(\"*\").remove();\n        const container = thumbnail.append(\"g\")\n          .attr(\"transform\", `scale(${that.thumbnailWidth / that.svgWidth}, ${that.thumbnailHeight / that.svgHeight})`);\n  \n        // Clone legend and link nodes\n        const legendNode = d3.select(that.$refs.dag).select(\"g.nodes\").node().cloneNode(true);\n        const linkNode = d3.select(that.$refs.dag).select(\"g.link\").node().cloneNode(true);\n        container.append(() => legendNode);\n        container.append(() => linkNode);\n  \n      },\n  \n      initGraph(data) {\n        const that = this;\n        const width = that.svgWidth;\n        const height = that.svgHeight;\n        const recall = data[\"metric\"]['recall'];\n        const links = data.links.map(d => ({ ...d }));\n        const nodes = data.nodes.map(d => ({ ...d }));\n  \n        // 在这里获取 links value 中的最大值和最小值\n        const val = links.map(d => d.value);\n        const minVal = Math.min(...val);\n        const maxVal = Math.max(...val);\n  \n        // 定义归一化函数\n        // 定义归一化函数，确保最小值不为 0\n        const normalize = (value) => {\n          const normalizedValue = (value - minVal) / (maxVal - minVal);\n          // 将归一化值范围调整为 [a, 1]，其中 a 为略大于 0 的数值，例如 0.1\n          const a = 0.1;\n          return 10*(normalizedValue * (1 - a) + a);\n        };\n  \n        const simulation = d3.forceSimulation(nodes)\n          .force(\"link\", d3.forceLink(links).id(d => d.id))\n          // .distance(d => normalize(d.value)/100000))\n          .force(\"charge\", d3.forceManyBody().strength(-10))\n          .force(\"center\", d3.forceCenter(width / 2, height / 2).strength(0.3))\n          // .force(\"radial\", d3.forceRadial(500, width / 2, height / 2).strength(0.8))\n          // .force(\"x\", d3.forceX(width / 2).strength(0.05))\n          // .force(\"y\", d3.forceY(height / 2).strength(0.05))\n          .velocityDecay(this.velocityDecay)\n          .on(\"tick\", ticked);\n  \n        const svg = d3.select(this.$refs.dag);\n        svg.selectAll(\"*\").remove();\n  \n        svg.attr(\"viewBox\", `0 0 ${width} ${height}`)\n          .attr(\"width\", \"100%\")\n          .attr(\"height\", \"100%\")\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"max-width: 100%; height: auto;\")\n          .call(d3.zoom().scaleExtent([0.5, 8]).on(\"zoom\", zoomed));\n  \n        const colorMap = d3.scaleOrdinal()\n          .range(['#FF0000', '#A4D3EE', '#FF7F50', '#32CD32']);\n          const groupColorMap = {\n            0: \"#FF0000\",\n            1: \"#A4D3EE\",\n            2: \"#32CD32\",\n            3: \"#FF7F50\",\n          };\n  \n        const container = svg.append(\"g\");\n        const link = container.append(\"g\")\n          .attr(\"class\", \"link\")\n          .attr(\"stroke\", \"#999\")\n          .attr(\"stroke-opacity\", 0.6)\n          .selectAll(\"line\")\n          .data(links)\n          .join(\"line\")\n          .attr(\"stroke-width\", d => Math.sqrt(normalize(d.value)))\n          .attr(\"marker-end\", \"url(#arrowhead)\")\n          .attr(\"fill\", d => groupColorMap[d.group]);\n  \n        const border = container.append(\"g\")\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 20;\n            } else if (v.group === 3) {\n              return 15;\n            } else if (v.group === 2) {\n              return 15;\n            } else {\n              return 12.5;\n            }\n          })\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"none\")\n          .attr(\"stroke-width\", 2);\n  \n        const node = container.append(\"g\")\n          .attr(\"class\", \"nodes\")\n          .attr(\"id\", `node-class`)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"stroke-width\", 0.2)\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 18;\n            } else if (v.group === 3) {\n              return 13;\n            } else if (v.group === 2) {\n              return 13;\n            } else {\n              return 10.5;\n            }\n          })\n          .attr(\"fill\", d => groupColorMap[d.group])\n          .call(d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n  \n        const labels = container.append(\"g\")\n          .attr(\"class\", \"labels\")\n          .selectAll(\"text\")\n          .data(nodes)\n          .join(\"text\")\n          .attr(\"dx\", 6)\n          .attr(\"dy\", \".35em\")\n          .style(\"font-size\", \"12px\")  // 设置字体大小\n          .attr(\"stroke\", \"white\")\n          .attr(\"paint-order\", \"stroke\")\n          .text(d => {\n            if (d.group === 2 || d.group === 3) {\n              return `${d.id}`;\n            } else {\n              return \"\";\n            }\n          });\n  \n        node.on(\"mouseover\", function (event, d) {\n          border.attr(\"stroke\", (b) => b.id === d.id ? \"#6096E6\" : \"none\");\n        })\n          .on(\"mouseout\", function (event, d) {\n            border.attr(\"stroke\", \"none\");\n          });\n  \n        node.on(\"click\", function (event, d) {\n          const existingBox = document.querySelector('.option-box');\n          if (existingBox) {\n            if (parseInt(existingBox.dataset.nodeId) === parseInt(d.id)) {\n              existingBox.remove();\n              return;\n            }\n            existingBox.remove();\n          }\n          const options = d3.select(\"body\").append(\"div\")\n            .attr(\"class\", \"option-box\")\n            .attr(\"data-node-id\", d.id)\n            .style(\"position\", \"absolute\")\n            .style(\"left\", `${event.pageX + 10}px`)\n            .style(\"top\", `${event.pageY + 10}px`)\n            .style(\"display\", \"flex\")\n            .style(\"gap\", \"8px\")\n            .style(\"border\", \"1px solid #7F7F7F\")\n            .style(\"background-color\", \"#F7F7F7\")\n            .style(\"width\", \"86px\")\n            .style(\"height\", \"25px\")\n            .style(\"padding\", \"2.5px 0\")\n            .style(\"padding-left\", \"8px\")\n            .style(\"border-radius\", \"8px\")\n            .style(\"align-items\", \"center\")\n            .style(\"z-index\", 1000);\n          options.append(\"div\")\n            .text(\"+\")\n            .style(\"font-size\", \"20px\")\n            .style(\"color\", \"#679D43\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .on(\"click\", () => console.log(\"Plus clicked\", d));\n          options.append(\"div\")\n            .text(\"-\")\n            .text(\"-\")\n            .style(\"font-size\", \"20px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => console.log(\"Minus clicked\"));\n          options.append(\"div\")\n            .text(\"A\")\n            .style(\"font-size\", \"14px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => that.convertToImage(event, d));\n  \n          d3.select(\"body\").on(\"click\", function (event) {\n            if (!event.target.closest('.option-box') && !event.target.closest('circle')) {\n              d3.selectAll('.option-box').remove();\n            }\n          });\n  \n          event.stopPropagation();\n        });\n  \n        node.append(\"title\")\n          .text(d => `ID: ${d.id}, Distance: ${d.distance}`);\n  \n        svg.append(\"text\")\n          .attr(\"transform\", `translate(60, 50)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 15)\n          .text(`Recall: ${recall}`);\n  \n        const legend = svg.append(\"g\")\n          .attr(\"transform\", `translate(60, 60)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 10);\n  \n        const uniqueGroups = [...new Set(nodes.map(d => d.group))];\n        const legendItems = legend.selectAll(\"g\")\n          .data(uniqueGroups)\n          .enter().append(\"g\")\n          .attr(\"transform\", (d, i) => `translate(0,${i * 20})`);\n        legendItems.append(\"rect\")\n          .attr(\"width\", 18)\n          .attr(\"height\", 18)\n          .attr(\"fill\", d => groupColorMap[d]);\n  \n        legendItems.append(\"text\")\n          .attr(\"x\", 24)\n          .attr(\"y\", 9)\n          .attr(\"dy\", \"0.35em\")\n          .text(d => {\n                if (d === 0) {\n                  return \"start node\";\n                } else if (d === 1) {\n                  return \"normal node\";\n                } else if (d === 2) {\n                  return \"gt&search intersection\";\n                } else if (d === 3) {\n                  return \"search other\";\n                }\n              });\n  \n        function ticked() {\n          link\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y);\n          node\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n          border\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n  \n          labels\n            .attr(\"x\", d => d.x + 2)\n            .attr(\"y\", d => d.y + 0.35); // 这里设置文本的位置\n  \n          that.updateThumbnail();\n        }\n  \n        function dragstarted(event) {\n          if (!event.active) simulation.alphaTarget(0.2).restart();\n          event.subject.fx = event.subject.x;\n          event.subject.fy = event.subject.y;\n        }\n  \n        function dragged(event) {\n          event.subject.fx = event.x;\n          event.subject.fy = event.y;\n        }\n  \n        function dragended(event) {\n          if (!event.active) simulation.alphaTarget(0);\n          event.subject.fx = null;\n          event.subject.fy = null;\n        }\n  \n        function zoomed(event) {\n          container.attr(\"transform\", event.transform);\n          that.updateThumbnail();\n        }\n  \n      },\n    },\n    computed: {\n      ...mapState({\n        dataNodelink: \"dataNodeLink\",\n        retrievalSet: \"retrievalSet\",\n        datasetName: \"datasetName\",\n        modelName: \"modelName\",\n        retrievalInfo: \"retrievalInfo\",\n        isDone: \"isDone\"\n      }),\n    },\n    watch: {\n  \n      // dataNodelink(newVal, oldVal) {\n      //   console.log(\"可以实现更新\",newVal);\n      //   if (newVal !== oldVal) {\n  \n      //   }\n      // }\n  \n    }\n  };\n  </script>\n  \n  <style scoped lang=\"scss\">\n  .node-link-main {\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n    position: relative;\n  \n    .dag-svg {\n      height: 100%;\n      width: 100%;\n    }\n  \n    .thumbnail-svg {\n      position: absolute;\n      bottom: 20px;\n      left: 20px;\n      border: 1px solid #ccc;\n      background: #fff;\n    }\n  }\n  \n  .option-box {\n    border: 1px solid #F7F7F7;\n    background-color: #F7F7F7;\n    padding: 5px;\n    position: absolute;\n    z-index: 1000;\n  \n    div {\n      margin: 2px 0;\n      cursor: pointer;\n    }\n  \n    div:hover {\n      background-color: #f0f0f0;\n    }\n  }\n  \n  .option-button {\n    padding: 5px 10px;\n    border: 1px solid #000;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: #f0f0f0;\n    font-size: 14px;\n    font-family: Arial, sans-serif;\n    color: red;\n  }\n  \n  .option-button:hover {\n    background-color: #e0e0e0;\n  }\n  </style><template>\n    <div class=\"node-link-main\">\n      <svg ref=\"dag\" class=\"dag-svg\"></svg>\n      <svg ref=\"thumbnail\" class=\"thumbnail-svg\"></svg>\n    </div>\n  </template>\n  \n  <script>\n  import * as d3 from \"d3\";\n  import { mapState } from \"vuex\";\n  import api from \"@/api/data\";\n  \n  export default {\n    name: \"NodeLinkView\",\n    components: {},\n    data() {\n      return {\n        nodelinkdata: {},\n        svgWidth: 0,  // 页面的宽度\n        svgHeight: 0,   // 页面高度\n        velocityDecay: 0.6,\n        thumbnailWidth: 0, // 缩略图宽度\n        thumbnailHeight: 0, // 缩略图高度\n      };\n    },\n    mounted() {\n      this.getViewSize();\n      this.nodelinkdata = this.$store.state.dataNodeLink;\n      console.log(\"请输出 link data 来看一下连接线的 data\",this.nodelinkdata);\n      this.initGraph(this.nodelinkdata);\n    },\n    methods: {\n      getViewSize() {\n        const dag = this.$refs.dag;\n        this.svgHeight = dag.clientHeight;\n        this.svgWidth = dag.clientWidth;\n        this.thumbnailWidth = this.svgWidth / 5;  // 缩略图宽度和高度分别为整个svg 的1/5\n        this.thumbnailHeight = this.svgHeight / 5;\n        if (this.nodelinkdata.nodes) {\n          this.initGraph(this.nodelinkdata);\n          this.initThumbnail();\n        }\n      },\n      async convertToImage(event, node) {\n        const res = await api.getImageUrl({ \"datasetName\": this.$store.state.datasetName, \"nodeId\": node.id });\n        const imageUrl = res[\"data\"][\"imageUrl\"];\n        const targetElement = d3.select(event.target);\n        const targetBBox = targetElement.node().getBBox();\n        const targetWidth = targetBBox.width;\n        const targetHeight = targetBBox.height;\n        const patternId = `pattern-${node.id}`;\n        let pattern = d3.select(`#${patternId}`);\n        if (pattern.empty()) {\n          const svg = d3.select(`#node-class`);\n          let defs = svg.select(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          if (defs.empty()) {\n            defs = svg.append(\"defs\").attr(\"width\", targetWidth).attr(\"height\", targetHeight);\n          }\n          const pattern = defs.append(\"pattern\")\n            .attr(\"id\", patternId)\n            .attr(\"patternUnits\", \"objectBoundingBox\")\n            .attr(\"width\", 1) // 宽度为 1 表示相对于目标元素的宽度\n            .attr(\"height\", 1) // 高度为 1 表示相对于目标元素的高度\n            .attr(\"patternTransform\", \"translate(1, 1)\"); // 向右和向下移动 10 个单位\n  \n          const image = pattern.append(\"image\")\n            .attr(\"xlink:href\", imageUrl)\n            .attr(\"width\", 58)\n            .attr(\"height\", 58)\n            .attr(\"preserveAspectRatio\", \"xMidYMid slice\");\n        }\n        targetElement\n          .attr(\"r\", 30)\n          .attr(\"fill\", `url(#pattern-${node.id})`)\n          .attr(\"stroke\", \"#000\") // 设置边框颜色\n          .attr(\"stroke-width\", 2); // 设置边框宽度;\n  \n      },\n      initThumbnail() {\n        const thumbnail = d3.select(this.$refs.thumbnail);\n        thumbnail\n          .attr(\"width\", this.thumbnailWidth)\n          .attr(\"height\", this.thumbnailHeight)\n          .attr(\"viewBox\", `0 0 ${this.svgWidth} ${this.svgHeight}`)\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"position: absolute; bottom: 20px; left: 20px; border: 1px solid #ccc; background: #fff;\");\n      },\n      updateThumbnail() {\n        const that = this;\n        const thumbnail = d3.select(that.$refs.thumbnail);\n        thumbnail.selectAll(\"*\").remove();\n        const container = thumbnail.append(\"g\")\n          .attr(\"transform\", `scale(${that.thumbnailWidth / that.svgWidth}, ${that.thumbnailHeight / that.svgHeight})`);\n  \n        // Clone legend and link nodes\n        const legendNode = d3.select(that.$refs.dag).select(\"g.nodes\").node().cloneNode(true);\n        const linkNode = d3.select(that.$refs.dag).select(\"g.link\").node().cloneNode(true);\n        container.append(() => legendNode);\n        container.append(() => linkNode);\n  \n      },\n  \n      initGraph(data) {\n        const that = this;\n        const width = that.svgWidth;\n        const height = that.svgHeight;\n        const recall = data[\"metric\"]['recall'];\n        const links = data.links.map(d => ({ ...d }));\n        const nodes = data.nodes.map(d => ({ ...d }));\n  \n        // 在这里获取 links value 中的最大值和最小值\n        const val = links.map(d => d.value);\n        const minVal = Math.min(...val);\n        const maxVal = Math.max(...val);\n  \n        // 定义归一化函数\n        // 定义归一化函数，确保最小值不为 0\n        const normalize = (value) => {\n          const normalizedValue = (value - minVal) / (maxVal - minVal);\n          // 将归一化值范围调整为 [a, 1]，其中 a 为略大于 0 的数值，例如 0.1\n          const a = 0.1;\n          return 10*(normalizedValue * (1 - a) + a);\n        };\n  \n        const simulation = d3.forceSimulation(nodes)\n          .force(\"link\", d3.forceLink(links).id(d => d.id))\n          // .distance(d => normalize(d.value)/100000))\n          .force(\"charge\", d3.forceManyBody().strength(-10))\n          .force(\"center\", d3.forceCenter(width / 2, height / 2).strength(0.3))\n          // .force(\"radial\", d3.forceRadial(500, width / 2, height / 2).strength(0.8))\n          // .force(\"x\", d3.forceX(width / 2).strength(0.05))\n          // .force(\"y\", d3.forceY(height / 2).strength(0.05))\n          .velocityDecay(this.velocityDecay)\n          .on(\"tick\", ticked);\n  \n        const svg = d3.select(this.$refs.dag);\n        svg.selectAll(\"*\").remove();\n  \n        svg.attr(\"viewBox\", `0 0 ${width} ${height}`)\n          .attr(\"width\", \"100%\")\n          .attr(\"height\", \"100%\")\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n          .attr(\"style\", \"max-width: 100%; height: auto;\")\n          .call(d3.zoom().scaleExtent([0.5, 8]).on(\"zoom\", zoomed));\n  \n        const colorMap = d3.scaleOrdinal()\n          .range(['#FF0000', '#A4D3EE', '#FF7F50', '#32CD32']);\n          const groupColorMap = {\n            0: \"#FF0000\",\n            1: \"#A4D3EE\",\n            2: \"#32CD32\",\n            3: \"#FF7F50\",\n          };\n  \n        const container = svg.append(\"g\");\n        const link = container.append(\"g\")\n          .attr(\"class\", \"link\")\n          .attr(\"stroke\", \"#999\")\n          .attr(\"stroke-opacity\", 0.6)\n          .selectAll(\"line\")\n          .data(links)\n          .join(\"line\")\n          .attr(\"stroke-width\", d => Math.sqrt(normalize(d.value)))\n          .attr(\"marker-end\", \"url(#arrowhead)\")\n          .attr(\"fill\", d => groupColorMap[d.group]);\n  \n        const border = container.append(\"g\")\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 20;\n            } else if (v.group === 3) {\n              return 15;\n            } else if (v.group === 2) {\n              return 15;\n            } else {\n              return 12.5;\n            }\n          })\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"none\")\n          .attr(\"stroke-width\", 2);\n  \n        const node = container.append(\"g\")\n          .attr(\"class\", \"nodes\")\n          .attr(\"id\", `node-class`)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"stroke-width\", 0.2)\n          .selectAll(\"circle\")\n          .data(nodes)\n          .join(\"circle\")\n          .attr(\"r\", v => {\n            if (v.group === 0) {\n              return 18;\n            } else if (v.group === 3) {\n              return 13;\n            } else if (v.group === 2) {\n              return 13;\n            } else {\n              return 10.5;\n            }\n          })\n          .attr(\"fill\", d => groupColorMap[d.group])\n          .call(d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n  \n        const labels = container.append(\"g\")\n          .attr(\"class\", \"labels\")\n          .selectAll(\"text\")\n          .data(nodes)\n          .join(\"text\")\n          .attr(\"dx\", 6)\n          .attr(\"dy\", \".35em\")\n          .style(\"font-size\", \"12px\")  // 设置字体大小\n          .attr(\"stroke\", \"white\")\n          .attr(\"paint-order\", \"stroke\")\n          .text(d => {\n            if (d.group === 2 || d.group === 3) {\n              return `${d.id}`;\n            } else {\n              return \"\";\n            }\n          });\n  \n        node.on(\"mouseover\", function (event, d) {\n          border.attr(\"stroke\", (b) => b.id === d.id ? \"#6096E6\" : \"none\");\n        })\n          .on(\"mouseout\", function (event, d) {\n            border.attr(\"stroke\", \"none\");\n          });\n  \n        node.on(\"click\", function (event, d) {\n          const existingBox = document.querySelector('.option-box');\n          if (existingBox) {\n            if (parseInt(existingBox.dataset.nodeId) === parseInt(d.id)) {\n              existingBox.remove();\n              return;\n            }\n            existingBox.remove();\n          }\n          const options = d3.select(\"body\").append(\"div\")\n            .attr(\"class\", \"option-box\")\n            .attr(\"data-node-id\", d.id)\n            .style(\"position\", \"absolute\")\n            .style(\"left\", `${event.pageX + 10}px`)\n            .style(\"top\", `${event.pageY + 10}px`)\n            .style(\"display\", \"flex\")\n            .style(\"gap\", \"8px\")\n            .style(\"border\", \"1px solid #7F7F7F\")\n            .style(\"background-color\", \"#F7F7F7\")\n            .style(\"width\", \"86px\")\n            .style(\"height\", \"25px\")\n            .style(\"padding\", \"2.5px 0\")\n            .style(\"padding-left\", \"8px\")\n            .style(\"border-radius\", \"8px\")\n            .style(\"align-items\", \"center\")\n            .style(\"z-index\", 1000);\n          options.append(\"div\")\n            .text(\"+\")\n            .style(\"font-size\", \"20px\")\n            .style(\"color\", \"#679D43\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .on(\"click\", () => console.log(\"Plus clicked\", d));\n          options.append(\"div\")\n            .text(\"-\")\n            .text(\"-\")\n            .style(\"font-size\", \"20px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"line-height\", \"20px\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => console.log(\"Minus clicked\"));\n          options.append(\"div\")\n            .text(\"A\")\n            .style(\"font-size\", \"14px\")\n            .style(\"border-radius\", \"50%\")\n            .style(\"width\", \"20px\")\n            .style(\"height\", \"20px\")\n            .style(\"text-align\", \"center\")\n            .style(\"background-color\", \"#D4E2C8\")\n            .style(\"color\", \"#679D43\")\n            .on(\"click\", () => that.convertToImage(event, d));\n  \n          d3.select(\"body\").on(\"click\", function (event) {\n            if (!event.target.closest('.option-box') && !event.target.closest('circle')) {\n              d3.selectAll('.option-box').remove();\n            }\n          });\n  \n          event.stopPropagation();\n        });\n  \n        node.append(\"title\")\n          .text(d => `ID: ${d.id}, Distance: ${d.distance}`);\n  \n        svg.append(\"text\")\n          .attr(\"transform\", `translate(60, 50)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 15)\n          .text(`Recall: ${recall}`);\n  \n        const legend = svg.append(\"g\")\n          .attr(\"transform\", `translate(60, 60)`)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 10);\n  \n        const uniqueGroups = [...new Set(nodes.map(d => d.group))];\n        const legendItems = legend.selectAll(\"g\")\n          .data(uniqueGroups)\n          .enter().append(\"g\")\n          .attr(\"transform\", (d, i) => `translate(0,${i * 20})`);\n        legendItems.append(\"rect\")\n          .attr(\"width\", 18)\n          .attr(\"height\", 18)\n          .attr(\"fill\", d => groupColorMap[d]);\n  \n        legendItems.append(\"text\")\n          .attr(\"x\", 24)\n          .attr(\"y\", 9)\n          .attr(\"dy\", \"0.35em\")\n          .text(d => {\n                if (d === 0) {\n                  return \"start node\";\n                } else if (d === 1) {\n                  return \"normal node\";\n                } else if (d === 2) {\n                  return \"gt&search intersection\";\n                } else if (d === 3) {\n                  return \"search other\";\n                }\n              });\n  \n        function ticked() {\n          link\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y);\n          node\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n          border\n            .attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n  \n          labels\n            .attr(\"x\", d => d.x + 2)\n            .attr(\"y\", d => d.y + 0.35); // 这里设置文本的位置\n  \n          that.updateThumbnail();\n        }\n  \n        function dragstarted(event) {\n          if (!event.active) simulation.alphaTarget(0.2).restart();\n          event.subject.fx = event.subject.x;\n          event.subject.fy = event.subject.y;\n        }\n  \n        function dragged(event) {\n          event.subject.fx = event.x;\n          event.subject.fy = event.y;\n        }\n  \n        function dragended(event) {\n          if (!event.active) simulation.alphaTarget(0);\n          event.subject.fx = null;\n          event.subject.fy = null;\n        }\n  \n        function zoomed(event) {\n          container.attr(\"transform\", event.transform);\n          that.updateThumbnail();\n        }\n  \n      },\n    },\n    computed: {\n      ...mapState({\n        dataNodelink: \"dataNodeLink\",\n        retrievalSet: \"retrievalSet\",\n        datasetName: \"datasetName\",\n        modelName: \"modelName\",\n        retrievalInfo: \"retrievalInfo\",\n        isDone: \"isDone\"\n      }),\n    },\n    watch: {\n  \n      // dataNodelink(newVal, oldVal) {\n      //   console.log(\"可以实现更新\",newVal);\n      //   if (newVal !== oldVal) {\n  \n      //   }\n      // }\n  \n    }\n  };\n  </script>\n  \n  <style scoped lang=\"scss\">\n  .node-link-main {\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n    position: relative;\n  \n    .dag-svg {\n      height: 100%;\n      width: 100%;\n    }\n  \n    .thumbnail-svg {\n      position: absolute;\n      bottom: 20px;\n      left: 20px;\n      border: 1px solid #ccc;\n      background: #fff;\n    }\n  }\n  \n  .option-box {\n    border: 1px solid #F7F7F7;\n    background-color: #F7F7F7;\n    padding: 5px;\n    position: absolute;\n    z-index: 1000;\n  \n    div {\n      margin: 2px 0;\n      cursor: pointer;\n    }\n  \n    div:hover {\n      background-color: #f0f0f0;\n    }\n  }\n  \n  .option-button {\n    padding: 5px 10px;\n    border: 1px solid #000;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: #f0f0f0;\n    font-size: 14px;\n    font-family: Arial, sans-serif;\n    color: red;\n  }\n  \n  .option-button:hover {\n    background-color: #e0e0e0;\n  }\n  </style>"]}]}