{"remainingRequest":"/home/yansha/VDProject/VDFrontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yansha/VDProject/VDFrontend/src/views/MainView/MiddleMainView/DistributionView.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/yansha/VDProject/VDFrontend/src/views/MainView/MiddleMainView/DistributionView.vue","mtime":1744442733408},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/cache-loader/dist/cjs.js","mtime":1735202380381},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/babel-loader/lib/index.js","mtime":1735202380921},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/babel-loader/lib/index.js","mtime":1735202380921},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/cache-loader/dist/cjs.js","mtime":1735202380381},{"path":"/home/yansha/VDProject/VDFrontend/node_modules/vue-loader/lib/index.js","mtime":1735202381045}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["DistributionView.vue"],"names":[],"mappings":";AAqBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;;;AAGA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA","file":"DistributionView.vue","sourceRoot":"src/views/MainView/MiddleMainView","sourcesContent":["<template>\n    <div class=\"mapview-class\">\n        <div id=\"popper-tooltip-top\" class=\"popper-tooltip hidden\" role=\"tooltip\">\n            <span class=\"popper-content\"></span>\n            <div class=\"popper-arrow\"></div>\n        </div>\n\n        <div id=\"popper-tooltip-bottom\" class=\"popper-tooltip hidden\" role=\"tooltip\">\n            <span class=\"popper-content\"></span>\n            <div class=\"popper-arrow\"></div>\n        </div>\n\n        <div class=\"distribution-main\" ref=\"distributionMain\">\n        </div>\n\n    </div>\n\n</template>\n\n\n<script>\nimport { mapState } from \"vuex\";\nimport { config } from '@/config/config';\nimport createRegl from 'regl';\nimport d3 from '../../../utils/d3-import';\nimport { anyTrue, allTrue } from '../../../components/Embedding/Embedding';\n\nimport LoaderWorker from '../../../components/Embedding/workers/loader.worker.js';\nimport TreeWorker from '../../../components/Embedding/workers/tree.worker.js';\nimport SeacherWorker from '../../../components/Embedding/workers/search.worker.js';\n\nimport * as Embedder from '../../../components/Embedding/Embedding';\nimport * as PointDrawer from '../../../components/Embedding/EmbeddingPointWebGL';\nimport * as Labeler from '../../../components/Embedding/EmbeddingLabel';\nimport { HOVER_RADIUS } from '../../../utils/utils';\n\nexport default {\n    name: \"DistributionView\",\n    components: {\n\n    },\n    data() {\n        return {\n            component: null,\n\n            svg: null,\n            svgFullSize: { width: 0, height: 0 },\n            svgSize: { width: 0, height: 0 },\n            svgPadding: { top: 0, bottom: 0, left: 0, right: 0 },\n\n            topSvg: null,\n            topicCanvases: [],\n\n            // points\n            pointCanvas: null,\n            pointRegl: null,\n            frontPositionBuffer: null,\n            frontTextureCoordinateBuffer: null,\n            frontBufferPointSize: 0,\n\n            // search trace\n            searchPointCanvas: null,\n            searchPointRegl: null,\n            searchPointPositionBuffer: null,\n            searchPointTextureCoordinateBuffer: null,\n            searchPointResults: { \"tracePoints\": [], \"connectData\": [], \"startNode\": [], \"diffSList\": [], \"diffGList\": [], \"interList\": [] },\n\n            // search table\n            searchPointCanvas2: null,\n            searchPointRegl2: null,\n            searchPointPositionBuffer2: null,\n            searchPointTextureCoordinateBuffer2: null,\n            searchPointResults2: [],\n\n            // Tooltips\n            tooltipTop: null,\n            tooltipBottom: null,\n            hoverPoint: null,\n\n            xScale: d3.scaleLinear(),\n            yScale: d3.scaleLinear(),\n\n            // zooming\n            zoom: null, // d3.ZoomBehavior<HTMLElement, unknown>\n            initZoomTransform: null,\n            curZoomTransform: d3.zoomIdentity,\n            curZoomLevel: 1,\n\n            // interaction\n            lastMouseClientPosition: null,\n            hideHighlights: false,\n\n            // user settings\n            showContours: [true],   // 先给一些默认的值出来\n            showGrid: true,\n            showPoints: [true],\n            showPoints_back: false,\n            showLabel: false,\n            showTrace: true,\n\n            // data\n            dataURLs: null,\n            promptPoints: [],\n            gridData: null,\n            tileData: null,\n            contours: null,\n            groupContour: null,\n            contoursInitialized: false,\n            loadedPointCount: 1,\n\n            // Time\n            timeTextureMap: null,\n\n            // Group\n            groupNames: [],\n\n            // search\n            completedSearchQueryID: null,\n\n            // scatter plot\n            lastRefillID: 0,\n            lsatRefillTime: 0,\n            webGLMatrices: null,\n            curPointWidth: 1,\n\n            // display labels\n            topicLevelTrees: new Map(),\n            lastGridTreeLevels: [],\n\n            // Web workers\n            loaderWorker: null,\n            treeWorker: null,\n\n            // store\n            footerStoreValue: { xScale: null, embeddingName: null, numPoints: null },\n\n\n            // other top\n            DEBUG: config.debug,\n\n            handledFooterMessageID: 0,\n\n\n            // canvas points dis\n            pointsDict: [{}],\n\n\n        };\n    },\n    mounted() {\n\n        this.init();\n\n    },\n    methods: {\n        init() {\n\n            const dag = this.$refs.distributionMain;\n            this.svgFullSize.height = dag.clientHeight;\n            this.svgFullSize.width = dag.clientWidth;\n\n            console.log(\"对dis 的大小进行输出\", this.svgFullSize.height, this.svgFullSize.width)\n\n            this.component = d3.select('.distribution-main');\n\n            // init worker\n            this.initWorker();\n\n            // init svg and canvas\n            const squareCanvasWidth = Math.min(\n                this.svgFullSize.width - this.svgPadding.left - this.svgPadding.right,\n                this.svgFullSize.height - this.svgPadding.top - this.svgPadding.bottom\n            );\n\n            this.svgSize = {\n                width: squareCanvasWidth,\n                height: squareCanvasWidth\n            };\n\n            this.initTopSvg();\n            this.initCanvas();\n            this.initSVGGroups();\n\n            // Register zoom\n            this.zoom = d3\n                .zoom()\n                .extent([\n                    [0, 0],\n                    [this.svgSize.width, this.svgSize.height]\n                ])\n                .scaleExtent([config.layout.zoomScale[0], config.layout.zoomScale[1]])\n                .interpolate(d3.interpolate)\n                .on('zoom', (g) => {\n                    (async () => {\n                        await this.zoomed(g);\n                    })();\n                })\n                .on('end', () => this.zoomEnded());\n\n            this.topSvg.call(this.zoom).on('dblclick.zoom', null);\n\n            this.tooltipTop = document.querySelector('#popper-tooltip-top');\n            this.tooltipBottom = document.querySelector('#popper-tooltip-bottom');\n\n            // init data\n            this.initData().then(() => {\n\n                Embedder.displayGroupChanged(this, \"Image\");\n\n\n            });\n\n        },\n        async initData() {\n\n            const gridData = await d3.json(this.$store.state.dataURLs.grid);\n            if (gridData === undefined) {\n                console.log('Fail to load grid data');\n            }\n\n            this.gridData = gridData;\n\n            // Initialize the data scales\n            const xRange = this.gridData.xRange;\n            const yRange = this.gridData.yRange;\n\n            let xLength = xRange[1] - xRange[0];\n            let yLength = yRange[1] - yRange[0];\n\n            if (!this.gridData.padded) {\n                // Add padding for the data\n                if (xLength < yLength) {\n                    yRange[0] -= yLength / 50;\n                    yRange[1] += yLength / 50;\n                    yLength = yRange[1] - yRange[0];\n\n                    xRange[0] -= (yLength - xLength) / 2;\n                    xRange[1] += (yLength - xLength) / 2;\n                } else {\n                    // Add padding for the data\n                    xRange[0] -= xLength / 50;\n                    xRange[1] += xLength / 50;\n                    xLength = xRange[1] - xRange[0];\n\n                    yRange[0] -= (xLength - yLength) / 2;\n                    yRange[1] += (xLength - yLength) / 2;\n                }\n            }\n\n            this.xScale = d3\n                .scaleLinear()\n                .domain(xRange)\n                .range([0, this.svgSize.width]);\n\n            this.yScale = d3\n                .scaleLinear()\n                .domain(yRange)\n                .range([this.svgSize.height, 0]);\n\n            PointDrawer.drawContour(this);  // 这个一般是指刚刚选中的时候直接对全部数据，即没有 group 数据的绘制\n\n            // Create group related structures if the data has groups\n            if (this.gridData.groupGrids && this.gridData.groupNames.length > 0) {\n                this.groupNames = this.gridData.groupNames;\n                const umapGroup = this.svg.select('g.umap-group');\n\n                // Adjust the first contour's name\n                this.showContours = [];\n                this.showPoints = [];\n                this.groupContours = [];\n\n                for (let i = 0; i < this.groupNames.length; i++) {\n                    // Add groups to the control states\n                    // (Default is to show the first group only)\n                    this.showContours.push(i === 0);    // 这里的意思是只有第一个组是可以显示的，因为默认展示第一个组\n                    this.showPoints.push(i === 0);\n\n                    // Add contour elements for other groups\n                    const name = this.groupNames[i];\n                    umapGroup\n                        .append('g')\n                        .attr('class', `contour-group-generic contour-group-${name}`)\n                        .classed('hidden', i !== 0);\n\n                    // Drw the group contour\n                    const curContour = PointDrawer.drawGroupContour(this, name);\n                    if (curContour !== null) {\n                        this.groupContours.push(curContour);\n                    }\n                }\n            }\n\n            // Tell the tree worker to prepare to add points to the tree\n            const groupIDs = [];\n\n            if (this.groupNames) {\n                for (let i = 0; i < this.groupNames.length; i++) {\n                    groupIDs.push(i);\n                }\n            }\n\n            const treeMessage = {\n                command: 'initQuadtree',\n                payload: {\n                    xRange: xRange,\n                    yRange: yRange,\n                    groupIDs: groupIDs,\n                    times: []\n                }\n            };\n\n            this.treeWorker.postMessage(treeMessage);\n\n            for (const level of Object.keys(this.gridData.topic.data)) {\n                const tree = d3\n                    .quadtree()\n                    .x(function (d) { return d[0]; })\n                    .y(function (d) { return d[1]; })\n                    .addAll(this.gridData.topic.data[level]);\n                this.topicLevelTrees.set(parseInt(level, 10), tree);\n            }\n\n            // 之后是对 topic label 的绘制，之后进行添加\n\n\n            // Initialize WebGL matrices once we have the scales\n            PointDrawer.initWebGLMatrices(this);\n            PointDrawer.initWebGLBuffers(this);\n\n        },\n        initCanvas() {\n\n            const discomponent = this.$refs.distributionMain;\n\n            this.searchPointCanvas = d3.select(discomponent)\n                .append('canvas')\n                .attr('class', 'search-point-canvas')\n                .classed('hidden', true)\n                .attr('width', this.svgFullSize.width)\n                .attr('height', this.svgFullSize.height);\n\n            this.searchPointRegl = createRegl(this.searchPointCanvas?.node());\n\n            this.pointCanvas = d3.select(discomponent)\n                .append('canvas')\n                .attr('class', 'embedding-canvas')\n                .attr('width', this.svgFullSize.width)\n                .attr('height', this.svgFullSize.height);\n\n            this.pointRegl = createRegl(this.pointCanvas?.node());\n\n            this.topicCanvases = [];\n            for (const pos of ['top', 'bottom']) {\n                this.topicCanvases.push(\n                    d3\n                        .select(discomponent)\n                        .append('canvas')\n                        .attr('class', `topic-grid-canvas ${pos}`)\n                        .attr('width', `${this.svgFullSize.width}px`)\n                        .attr('height', `${this.svgFullSize.height}px`)\n                        .classed('hidden', !this.showGrid)\n                );\n            }\n\n        },\n        initSVGGroups() {\n\n            this.svg = this.component.append('svg')\n                .attr('class', \"embedding-svg\")\n                .attr('width', this.svgFullSize.width)\n                .attr('height', this.svgFullSize.height);\n\n\n            const umapGroup = this.svg\n                .append('g')\n                .attr('class', 'umap-group')\n                .attr(\n                    'transform',\n                    `translate(${this.svgPadding.left}, ${this.svgPadding.top})`\n                );\n\n            umapGroup\n                .append('g')\n                .attr('class', 'contour-group')\n                .classed('hidden', !this.showContours);\n\n        },\n        initTopSvg() {\n\n            // 创建一个 SVG 元素并设置其属性\n            this.topSvg = this.component.append('svg')\n                .attr('class', \"top-svg\")\n                .attr('width', `${this.svgFullSize.width}px`)\n                .attr('height', `${this.svgFullSize.height}px`) // 设置高度\n                .on('pointermove', e => this.mousemoveHandler(e))\n                .on('mouseleave', () => {\n                    PointDrawer.highlightPoint(this, { point: undefined, animated: false });\n                    Labeler.mouseoverLabel(this, null, null);\n                })\n                .attr(\n                    'transform',\n                    `translate(${this.svgPadding.left}, ${this.svgPadding.top})`\n                );\n\n\n            const topGroup = this.topSvg.append('g').attr('class', 'top-group');\n\n            topGroup\n                .append('rect')\n                .attr('class', 'mouse-track-rect')\n                .attr('width', this.svgFullSize.width)\n                .attr('height', this.svgFullSize.height);\n\n            const topContent = topGroup.append('g').attr('class', 'top-content');\n\n            topContent.append('g').attr('class', 'topics-bottom');\n            topContent\n                .append('g')\n                .attr('class', 'topics')\n                .classed('hidden', !this.showLabel);\n            topContent.append('g').attr('class', 'topics-top');\n            topContent.append('g').attr('class', 'highlights');\n\n        },\n        zoomed(e) {\n\n            const transform = e.transform;\n            const scaleChanged = this.curZoomTransform.k !== transform.k;\n            this.curZoomTransform = transform;\n\n            // === Task (1) ===\n            // Transform the SVG elements\n            this.svg.select('.umap-group').attr('transform', transform.toString());\n\n            // Transform the top SVG elements\n            this.topSvg\n                .select('.top-group')\n                .attr('transform', transform.toString());\n\n            // Transform the visible canvas elements\n            console.log(\"对 showPoints 进行输出\", this.showPoints)\n            if (anyTrue(this.showPoints)) {\n                if (this.frontPositionBuffer && this.frontTextureCoordinateBuffer) {\n                    PointDrawer.drawScatterPlot(this);\n                }\n            }\n\n            // Transform the search scatter plot\n            if (this.showTrace) {\n\n                console.log(\"trace 是否会进行展示\", this.showTrace)\n\n                this.searchPointCanvas.classed('hidden', false);\n                this.pointCanvas.classed('faded', true);\n\n                PointDrawer.drawSearchScatterPlot(this);\n\n            }\n\n            if (this.searchPointResults2.length > 0) {\n\n                this.searchPointCanvas.classed('hidden', false);\n                this.pointCanvas.classed('faded', true);\n\n                PointDrawer.drawSearchScatterPlot2(this);\n\n            }\n\n            if (this.showGrid) {\n                Labeler.redrawTopicGrid(this, null);\n            }\n\n\n        },\n        // Event handler for zoom ended\n        zoomEnded() {\n            console.log(\"svg zoom end !!!\")\n        },\n        initWorker() {\n            // Initialize the web worker to load data and deal with the quadtree\n            this.loaderWorker = new LoaderWorker();\n            this.loaderWorker.onmessage = (e) => {\n                this.loaderWorkerMessageHandler(e);\n            };\n\n            this.treeWorker = new TreeWorker();\n            this.treeWorker.onmessage = (e) => {\n                this.treeWorkerMessageHandler(e);\n            };\n\n            // this.searchWorker = new SearchWorker();\n            // this.searchWorker.onmessage = (e) => {\n            //     this.searchWorkerMessageHandler(e);\n            // };\n        },\n        loaderWorkerMessageHandler(e) {\n            switch (e.data.command) {\n                case 'transferLoadData': {\n                    // Add these points to the quadtree ASAP\n                    const treeMessage = {\n                        command: 'updateQuadtree',\n                        payload: {\n                            points: e.data.payload.points\n                        }\n                    };\n                    this.treeWorker.postMessage(treeMessage);\n\n                    if (e.data.payload.isFirstBatch) {\n\n                        // Add the first batch points\n                        this.promptPoints = e.data.payload.points;\n\n\n                        PointDrawer.initWebGLBuffers(this);\n                        if (anyTrue(this.showPoints)) {\n                            PointDrawer.drawScatterPlot(this);\n                        }\n\n                        // Add the points to the search index\n                        const searchMessage = {\n                            command: 'addPoints',\n                            payload: {\n                                points: e.data.payload.points\n                            }\n                        };\n                        // this.searchWorker.postMessage(searchMessage);\n                    } else {\n                        // Batches after the first batch\n                        // Add the points to the prompt point list\n                        const newPoints = e.data.payload.points;\n                        for (const point of newPoints) {\n                            this.promptPoints.push(point);\n                        }\n\n                        // Add the points to the search index\n                        // const searchMessage = {\n                        //     command: 'addPoints',\n                        //     payload: {\n                        //         points: newPoints\n                        //     }\n                        // };\n                        // this.searchWorker.postMessage(searchMessage);\n\n                        // Add the new points to the WebGL buffers\n                        PointDrawer.updateWebGLBuffers(this, newPoints);\n                        if (anyTrue(this.showPoints)) {\n                            PointDrawer.drawScatterPlot(this);\n                        }\n\n                        if (e.data.payload.isLastBatch) {\n                            console.log('Finished loading all data.');\n\n                            // console.log(\"对 this.prompt 的大小进行\", this.promptPoints)\n                            this.getPointsDis();\n                        }\n\n\n                    }\n\n                    // Update the data point count\n                    this.loadedPointCount = e.data.payload.loadedPointCount;\n\n                    // Update the footer\n                    this.footerStoreValue.numPoints = this.promptPoints.length;\n                    // this.footerStore.set(this.footerStoreValue);\n                    break;\n                }\n\n                default: {\n                    console.error('Unknown message', e.data.command);\n                    break;\n                }\n            }\n        },\n\n        treeWorkerMessageHandler(e) {\n            switch (e.data.command) {\n                case 'finishInitQuadtree': {\n                    // Tell the loader worker to start loading data\n                    // (need to wait to set up the quadtree to avoid racing)\n                    const message = {\n                        command: 'startLoadData',\n                        payload: { url: this.$store.state.dataURLs.point }\n                    };\n                    this.loaderWorker.postMessage(message);\n                    break;\n                }\n\n                case 'finishQuadtreeSearch': {\n                    if (this.lastMouseClientPosition === null) {\n                        throw new Error('lastMouseClientPosition is null');\n                    }\n                    // Check if the closest point is relatively close to the mouse\n                    const closestPoint = structuredClone(\n                        e.data.payload.point\n                    );\n                    const screenPointX = this.curZoomTransform.applyX(\n                        this.xScale(closestPoint.x)\n                    );\n                    const screenPointY = this.curZoomTransform.applyY(\n                        this.yScale(closestPoint.y)\n                    );\n\n                    const distance = Math.max(\n                        Math.abs(screenPointX - this.lastMouseClientPosition.x),\n                        Math.abs(screenPointY - this.lastMouseClientPosition.y)\n                    );\n\n                    const highlightRadius = Math.max(\n                        10 / this.curZoomTransform.k,\n                        (config.layout.scatterDotRadius *\n                            Math.exp(Math.log(this.curZoomTransform.k) * 0.55)) /\n                        this.curZoomTransform.k\n                    );\n\n                    // Highlight the point if it is close enough to the mouse\n                    const curHoverRadius = Math.max(\n                        HOVER_RADIUS,\n                        highlightRadius * this.curZoomTransform.k\n                    );\n\n                    if (distance <= curHoverRadius) {\n                        PointDrawer.highlightPoint(this, { point: closestPoint, animated: false });\n                    } else {\n                        PointDrawer.highlightPoint(this, { point: undefined, animated: false });\n                    }\n                    break;\n                }\n\n\n                case 'finishQuadtreeSearchById': {\n\n                    // Check if the closest point is relatively close to the mouse\n                    const closestPoint = structuredClone(\n                        e.data.payload.point\n                    );\n                    const screenPointX = this.curZoomTransform.applyX(\n                        this.xScale(closestPoint.x)\n                    );\n                    const screenPointY = this.curZoomTransform.applyY(\n                        this.yScale(closestPoint.y)\n                    );\n\n                    const highlightRadius = Math.max(\n                        10 / this.curZoomTransform.k,\n                        (config.layout.scatterDotRadius *\n                            Math.exp(Math.log(this.curZoomTransform.k) * 0.55)) /\n                        this.curZoomTransform.k\n                    );\n\n                    // Highlight the point if it is close enough to the mouse\n                    const curHoverRadius = Math.max(\n                        HOVER_RADIUS,\n                        highlightRadius * this.curZoomTransform.k\n                    );\n\n                    if (e.data.payload.point) {\n                        PointDrawer.highlightPoint(this, { point: closestPoint, animated: false });\n                    } else {\n                        PointDrawer.highlightPoint(this, { point: undefined, animated: false });\n                    }\n                    break;\n                }\n\n\n\n                default: {\n                    console.error('Unknown message', e.data.command);\n                    break;\n                }\n            }\n        },\n\n        searchWorkerMessageHandler(e) {\n            switch (e.data.command) {\n                case 'finishQuery': {\n                    const { resultIndexes } = e.data.payload;\n                    const resultPoints = [];\n\n                    for (const resultIndex of resultIndexes) {\n                        const curPoint = this.promptPoints[resultIndex];\n                        resultPoints.push(curPoint);\n                    }\n\n                    // Update the search panel\n                    // this.searchBarStoreValue.results = resultPoints;\n                    // this.searchBarStoreValue.shown = true;\n                    // this.searchBarStore.set(this.searchBarStoreValue);\n\n                    // Draw the scatter plot\n                    this.searchPointCanvas.classed('hidden', false);\n                    this.searchPointResults = resultPoints;\n                    PointDrawer.drawSearchScatterPlot(this);\n                    break;\n                }\n\n                default: {\n                    console.error('Unknown message', e.data.command);\n                    break;\n                }\n            }\n        },\n\n        mouseoverPoint(x, y) {\n            // Invert to the stage scale => invert to the data scale\n            const dataX = this.xScale.invert(this.curZoomTransform.invertX(x));\n            const dataY = this.yScale.invert(this.curZoomTransform.invertY(y));\n\n            // Let the worker to search the closest point in a radius\n            let groupID = -1;\n\n            if (this.groupNames) {\n                if (allTrue(this.showPoints)) {\n                    groupID = -1;\n                } else {\n                    // TODO: Need a better way to search slices of groups for multi groups\n                    for (let i = 0; i < this.showPoints.length; i++) {\n                        if (this.showPoints[i]) {\n                            groupID = i;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            const message = {\n                command: 'startQuadtreeSearch',\n                payload: {\n                    x: dataX,\n                    y: dataY,\n                    time: this.timeInspectMode && this.curTime ? this.curTime : '',\n                    groupID: groupID,\n                    method: null\n                }\n            };\n            this.treeWorker.postMessage(message);\n        },\n\n        mousemoveHandler(e) {\n            // Show tooltip when mouse over a data point on canvas\n            // We need to use color picking to figure out which point is hovered over\n            const x = e.offsetX;\n            const y = e.offsetY;\n            this.lastMouseClientPosition = { x: x, y: y };\n\n            // Show point highlight\n            if (anyTrue(this.showPoints) && !this.hideHighlights) {\n                this.mouseoverPoint(x, y);\n            }\n\n            // Show labels\n            if (!this.hideHighlights) {\n                Labeler.mouseoverLabel(this, x, y);\n            }\n        },\n\n        getCurZoomBox() {\n            const box = {\n                x: this.curZoomTransform.invertX(0),\n                y: this.curZoomTransform.invertY(0),\n                width: Math.abs(\n                    this.curZoomTransform.invertX(this.svgFullSize.width) -\n                    this.curZoomTransform.invertX(0)\n                ),\n                height: Math.abs(\n                    this.curZoomTransform.invertY(this.svgFullSize.height) -\n                    this.curZoomTransform.invertY(0)\n                )\n            };\n            return box;\n        },\n        getSearchTraceData() {\n\n            // 这里主要是分为三种数据\n\n            // 1. 一种是 node-link 数据\n            // 2.一种是搜索的结果 {\"gt not search\": [], \"search&gt\": [], \"search not gt\": []}\n\n            // const resultPoints = [];\n\n            // for (const resultIndex of resultIndexes) {\n            //     const curPoint = this.promptPoints[resultIndex];\n            //     resultPoints.push(curPoint);\n            // }\n\n            // Draw the scatter plot\n            this.searchPointCanvas.classed('hidden', false);\n            this.pointCanvas.classed('faded', true);\n            // this.searchPointResults = resultPoints;\n            PointDrawer.drawSearchScatterPlot(this);\n\n        },\n        getSearchByIdResult(selectedNode) {\n            // 首先，我们应该获取该 id node 的数据坐标\n            console.log(\"pos-----------\", this.promptPoints[selectedNode]);\n\n            const dataX = this.promptPoints[selectedNode].x;\n            const dataY = this.promptPoints[selectedNode].y;\n\n            // Let the worker to search the closest point in a radius\n            let groupID = -1;\n\n            if (this.groupNames) {\n                if (allTrue(this.showPoints)) {\n                    groupID = -1;\n                } else {\n                    // TODO: Need a better way to search slices of groups for multi groups\n                    for (let i = 0; i < this.showPoints.length; i++) {\n                        if (this.showPoints[i]) {\n                            groupID = i;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            const message = {\n                command: 'startQuadtreeSearchById',\n                payload: {\n                    point: this.promptPoints[selectedNode],\n                    method: 'id'\n                }\n            };\n            this.treeWorker.postMessage(message);\n        },\n        getPointsDis() {\n\n            // 这里是否执行该函数！！！\n            console.log(\"是否执行该函数！！！   dis\", this.promptPoints)\n\n            const pairPoints = [96525, 108791, 166518, 267176, 33103, 165549, 203193, 290725, 25731, 113572, 141181, 204376, 284997, 222524, 128324, 156231, 205478, 65275, 92693, 2609, 18517, 39219, 290535, 153897, 234501, 230064, 132706, 232534, 20106, 51369, 181971, 279546, 169313, 129455, 103872, 177641, 53790, 82080, 11950, 285777, 120341, 210428, 103481, 264413, 113056, 152719, 45621, 180558, 176928, 250723, 116622, 128458, 36924, 16817, 259438, 279062, 51396, 101666, 33561, 258777, 157548, 142826, 169862, 160716, 209716, 101040, 183063, 107639, 14869, 114479, 118693, 154047, 200534, 60525, 263843, 185383, 82329, 41903, 252541, 286431, 265292, 153150, 39432, 276085, 120819, 142210, 98553, 64439, 256844, 71370, 22427, 49592, 228182, 120339, 29153, 230946, 299630, 116558, 250299, 125909, 216661, 288813, 48003, 117204, 192909, 187202, 215129, 273241, 138807, 196661, 26875, 79750, 104866, 45695, 204431, 231573, 76216, 102253, 125634, 251827, 247382, 81156, 57798, 34194, 87647, 186840, 79844, 295326, 256396, 32080, 10534, 200505, 273922, 33574, 8125, 8366, 291137, 145952, 98829, 39600, 242407, 101295, 238727, 185926, 201797, 62769, 182167, 225255, 269142, 5048, 17984, 260328, 108197, 67602, 2789, 291329, 36452, 158003, 181298, 194478, 208707, 47127, 223622, 200454, 226092, 3444, 227919, 125815, 96932, 124366, 41067, 240765, 109817, 267532, 143381, 200455, 213220, 64279, 135312, 212277, 89614, 19436, 266613, 56906, 6355, 155155, 122551, 283878, 15843, 189202, 293525, 71544, 61158, 126463, 113547, 230063, 58517, 225333, 148556, 243662, 228835, 16921, 241481, 270759, 239354, 223058, 298963, 18739, 295330, 186860, 38381, 162262, 207826, 238198, 55402, 92327, 253749, 62054, 229492, 20965, 280649, 44071, 47853, 192277, 161674, 58113, 18659, 126469, 269440, 179573, 273425, 150322, 46184, 159308, 92535, 191964, 269188, 108708, 172607, 41916, 194217, 242881, 208102, 154381, 20667, 27823, 29086, 276074, 11601, 54928, 1422, 183569, 157972, 184539, 122516, 113357, 79314, 262263, 54208, 277314, 243997, 90137, 275614, 16712, 125488, 165567, 27224, 251775, 110452, 20451, 105315, 136280, 88956, 175644, 121565, 217059, 168285, 247779, 185333, 237968, 4641, 23299, 138405, 272321, 87224, 142514, 90695, 150176, 124845, 216678, 299506, 211529, 4635, 213657, 65424, 131629, 20418, 230397, 82933, 285097, 186596, 218834, 262197, 109567, 249712, 159931, 228616, 111108, 246682, 52478, 57957, 77799, 186600, 70789, 184529, 204423, 217347, 113794, 274530, 109148, 86755, 291649, 59476, 105307, 64810, 207949, 70335, 59877, 228282, 150253, 130291, 112660, 53281, 171966, 186932, 59417, 157583, 83485, 185219, 33323, 50480, 157148, 110532, 154150, 288440, 186347, 224698, 77624, 227482, 214719, 66166, 95340, 60063, 248970, 133719, 207652, 31596, 285623, 209248, 164301, 40212, 144978, 24009, 272494, 253731, 13797, 236337, 93758, 98806, 135870, 244261, 240947, 140480, 296523, 231270, 55139, 210617, 286252, 251160, 104473, 269914, 40178, 160338, 169217, 51209, 159755, 27301, 164035, 202364, 135088, 231042, 116528, 59344, 125474, 181234, 92116, 28161, 172540, 212861, 101411, 24795, 93445, 7901, 40312, 266139, 118767, 40834, 3142, 166640, 244874, 230754, 269489, 296822, 292201, 126347, 10634, 201863, 232392, 272474, 57609, 54609, 183802, 250954, 23888, 157861, 177705, 214531, 70321, 176092, 249452, 55092, 68756, 270535, 149866, 106861, 51350, 269887, 105070, 83159, 120789, 250386, 69339, 218537, 179332, 221361, 270419, 8418, 280065, 36882, 117107, 292747, 145218, 108904, 171299, 119896, 298225, 204699, 121976, 209283, 41518, 263710, 225568, 261042, 99435, 56127, 84079, 279377, 140428, 214007, 146826, 262048, 279419, 297456, 223862, 68097, 286644, 27381, 54550, 46607, 140179, 88747, 201891, 30434, 128226, 212330, 220723, 180346, 296818, 86749, 173691, 195657, 161674, 82835, 293196, 184195, 241395, 72943, 51262, 295953, 170439, 139628, 203068, 54943, 267396, 39290, 66706, 140989, 266486, 201374, 174152, 99448, 67779, 68027, 18605, 272853, 295708, 191181, 218387, 73742, 29844, 21149, 283123, 142684, 235872, 107439, 55957, 208758, 170697, 170444, 278989, 128178, 117241, 223899, 212834, 90869, 15371, 224918, 107179, 242051, 131299, 176454, 180188, 196393, 276231, 39202, 202778, 268749, 209173, 275214, 91992, 170261, 103772, 142105, 164435, 289253, 4554, 238056, 249955, 13549, 99610, 193419, 220973, 110199, 17858, 149100, 228404, 133768, 193866, 172504, 136070, 170865, 218487, 18102, 265418, 54028, 46223, 65269, 117192, 271015, 43732, 208927, 72260, 57472, 139983, 47535, 142098, 233152, 158219, 156764, 296628, 259867, 15812, 227223, 148096, 184082, 285707, 175790, 117974, 125510, 231407, 225929, 259460, 148379, 12452, 100993, 272527, 35186, 137566, 40652, 204943, 212306, 262011, 177405, 81923, 218707, 251966, 133026, 108271, 24697, 299195, 167025, 209933, 237416, 83348, 188919, 48162, 63841, 130230, 113140, 12014, 126847, 227095, 167883, 213519, 90553, 273911, 91002, 81837, 62325, 193369, 175586, 30192, 42094, 111399, 130873, 181116, 274534, 210079, 135332, 142538, 22333, 209918, 151836, 8422, 147236, 38228, 133982, 198759, 242971, 96437, 123963, 222716, 28371, 251243, 14006, 43665, 280981, 19067, 247704, 161839, 103530, 82622, 261433, 264603, 77623, 142509, 50716, 34298, 76983, 16377, 293188, 274216, 169852, 245588, 168089, 47123, 46734, 43665, 193138, 222658, 119512, 234976, 23331, 155950, 183042, 101852, 266050, 182257, 19886, 128818, 247127, 43646, 782, 90487, 216474, 269093, 86035, 169670, 250042, 271904, 231929, 88572, 249342, 105928, 72211, 134552, 195038, 58973, 269360, 56593, 151720, 184903, 272442, 224599, 272327, 5657, 163259, 118890, 124569, 181669, 143508, 225400, 26385, 30979, 87135, 87033, 175041, 62019, 152548, 14244, 64621, 241937, 251174, 275872, 162503, 31867, 131883, 56281, 220580, 149602, 89349, 282523, 182188, 101007, 253662, 209049, 95977, 230437, 108382, 170769, 146442, 79761, 223687, 295653, 160832, 179661, 192962, 161793, 85291, 40010, 263394, 26760, 28814, 272363, 164907, 178172, 147834, 77194, 162434, 120583, 46237, 138420, 58688, 106685, 117945, 191328, 285934, 277033, 38591, 131219, 215862, 173865, 264971, 5986, 110651, 86616, 244510, 15598, 134368, 237964, 205548, 190833, 58045, 201511, 244387, 96306, 43579, 280347, 297190, 10155, 285687, 124706, 273017, 54085, 35796, 65766, 250597, 192827, 235450, 59065, 147448, 184323, 65348, 111190, 267785, 200355, 67548, 29115, 141665, 7646, 47767, 181962, 12770, 44821, 1008, 138547, 52976, 84360, 159903, 280401, 42734, 58007, 220363, 205722, 102482, 41437, 52758, 111405, 119752, 184427, 46874, 42254, 128973, 109681, 32100, 182891, 115614, 97456, 225430, 99241, 176100, 147085, 116409, 85626, 182066, 125830, 227070, 42042, 139036, 173841, 104576, 16728, 297659, 137785, 189368, 233663, 5538, 92347, 150000, 181773, 44039, 245278, 261211, 152592, 44811, 132237, 49767, 222695, 69070, 173146, 142780, 41955, 191395, 210404, 290183, 8562, 172350, 234195, 258609, 146913, 196146, 244481, 169378, 224385, 193138, 149219, 128111, 12607, 251089, 236471, 66874, 109072, 175010, 198604, 248051, 158612, 189445, 250428, 225950, 169923, 195311, 75579, 282830, 245469, 4883, 44877, 95906, 77577, 255922, 193139, 181187, 60120, 279168, 188165, 252834, 165188, 242748, 2321, 131471, 120852, 254712, 27430, 265988, 214831, 13085, 125938, 293196, 232600, 170377, 35288, 199193, 185330, 202646, 29431, 3856, 169368, 132964, 265439, 242042, 204505, 15689, 50935, 229315, 13752, 19339, 206656, 166732, 199176, 277016, 174063, 150075, 126544, 75153, 238447, 27100, 50740, 234487, 65040, 159800, 28762, 210305, 33987, 8885, 157993, 210485, 144775, 138802, 157708, 63443, 225395, 89015, 279512, 179898, 51272, 37938, 143799, 42932, 89450, 24671, 263725];\n\n            // 输出生成的随机数字\n            console.log(pairPoints);\n\n            let dis_list = [];\n\n            // 获取矩阵\n            const { dataScaleMatrix, normalizeMatrix } = this.webGLMatrices;\n\n            \n            // 定义一个函数来应用矩阵变换\n            function applyMatrix(matrix, point) {\n                const x = point.x;\n                const y = point.y;\n                const w = 1; // 齐次坐标\n\n                return {\n                    x: matrix[0][0] * x + matrix[0][1] * y + matrix[0][2] * w,\n                    y: matrix[1][0] * x + matrix[1][1] * y + matrix[1][2] * w,\n                    w: matrix[2][0] * x + matrix[2][1] * y + matrix[2][2] * w\n                };\n            }\n\n            for (const pair of pairPoints) {\n                // 获取原始坐标\n                const startNode = {x:this.promptPoints[pair].x, y: this.promptPoints[pair].y};\n                const endNode = {x:this.promptPoints[pair + 300000].x, y: this.promptPoints[pair + 300000].y};\n                // 转换为像素坐标\n                // 先应用数据缩放矩阵\n                // const stagePoint = applyMatrix(dataScaleMatrix, startNode);\n                // const pixelPoint = applyMatrix(normalizeMatrix, stagePoint);\n\n                // const stagePoint_end = applyMatrix(dataScaleMatrix, endNode);\n                // const pixelPoint_end = applyMatrix(normalizeMatrix, stagePoint_end);\n\n                const x0 = this.xScale(startNode.x);\n                const y0 = this.yScale(startNode.y);\n\n                const x1 = this.xScale(endNode.x);\n                const y1 = this.yScale(endNode.y);\n\n\n                console.log(\"endNode\", endNode);\n\n                const dis = Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n\n                dis_list.push(dis);\n\n            }\n\n            // 对 dis_list 求平均并进行输出\n            // 对 dis_list 求平均并进行输出\n            const averageDis = dis_list.reduce((sum, value) => sum + value, 0) / dis_list.length;\n\n            console.log(\"dis_list\", dis_list);\n            console.log(\"Average distance:\", averageDis);\n\n        }\n\n    },\n    computed: {\n        ...mapState({\n            iconShow: \"iconShow\",\n            dataNodeLink: \"dataNodeLink\",\n            selectedNode: \"selectedNode\",\n            tableFiterResults: \"tableFiterResults\"\n        }),\n    },\n    watch: {\n        iconShow: {\n            handler(newVal, oldVal) {\n                this.showGrid = newVal.grid;\n                this.topicCanvases.forEach(c => {\n                    c.classed('hidden', !this.showGrid);\n                });\n\n                this.showTrace = newVal.trace;\n                this.searchPointCanvas.classed('hidden', !this.showTrace);\n                this.pointCanvas.classed('faded', this.showTrace);\n\n                console.log(\"show\", newVal, oldVal)\n\n                if (newVal.points !== this.showPoints_back) {\n                    // 使用 map 取反所有值\n                    this.showPoints = this.showPoints.map(point => !point);\n                    this.pointCanvas\n                        .classed('hidden', !newVal.points)\n                        .classed('faded', newVal.points);\n                    this.searchPointCanvas.classed('hidden', newVal.points);\n                    this.showPoints_back = !this.showPoints_back;\n\n                }\n            },\n            deep: true,\n        },\n        dataNodeLink(newVal, oldVal) {\n            if (newVal != oldVal) {\n                this.getSearchTraceData();\n            }\n        },\n        selectedNode(newVal, oldVal) {\n            if (newVal !== oldVal & newVal !== '-1') {\n                console.log(\"对这个进行输出\", typeof newVal)\n                this.getSearchByIdResult(newVal);\n\n            }\n\n\n        },\n        tableFiterResults(newVal) {\n\n            if (newVal.length > 0) {\n\n                const resultList = []\n\n                for (const resultIndex of newVal) {\n                    const curPoint = this.promptPoints[resultIndex];\n                    resultList.push(curPoint);\n                }\n                this.searchPointResults2 = resultList;\n                this.searchPointCanvas.classed('hidden', false);\n                this.pointCanvas.classed('faded', true);\n\n                PointDrawer.drawSearchScatterPlot2(this);\n\n\n            }\n        }\n    }\n};\n\n\n</script>\n\n<style lang=\"scss\">\n@use './DistributionView.scss';\n</style>"]}]}